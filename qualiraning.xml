
<manialink name="UIModule_COTDQualifications_Ranking" version="3">

<!-- @Component start component-cmgame-uimodules -->
<framemodel id="component-cmgame-uimodules">
		</framemodel>
<!-- @Component end component-cmgame-uimodules -->

<!-- @Component start share-menu-navigation -->
<framemodel id="share-menu-navigation">
		</framemodel>
<!-- @Component end share-menu-navigation -->

<!-- @Component start component-navigation -->
<framemodel id="component-navigation">
		</framemodel>
<!-- @Component end component-navigation -->

<!-- @Component start component-loadingspinner -->
<framemodel id="component-loadingspinner">
<quad id="menu-libs-loading-spinner_quad-dimmer" size="320 180" halign="center" valign="center" bgcolor="000514" opacity="0.8" fullscreen="1" z-index="0" hidden="1"/>
<quad id="menu-libs-loading-spinner_quad-loading" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/CMGame/Components/LoadingSpinner/LoadingSpinner.dds" size="15 15" z-index="1" hidden="1"/>
<label id="menu-libs-loading-spinner_label-loading" pos="0 -15" halign="center" valign="center2" size="150 15" textfont="GameFontRegular" textcolor="fff" textprefix="$i" textsize="5" z-index="1"/>
	</framemodel>
<!-- @Component end component-loadingspinner -->

<!-- @Component start component-trackmania-button -->
<framemodel id="component-trackmania-button">
<frame class="Trackmania_Button_frame-button-container" id="Trackmania_Button_frame-align">
	<frame id="Trackmania_Button_frame-background">
		<quad id="Trackmania_Button_quad-image" bgcolor="005948" size="40 10" z-index="0" />
		<quad id="Trackmania_Button_quad-gradient" z-index="1" hidden="1" />
		<quad id="Trackmania_Button_quad-contour" z-index="2" hidden="1" />
		<frame id="Trackmania_Button_frame-hitbox-clip">
			<quad id="ComponentTrackmania_Button_quad-background" class="component-navigation-item-zone" size="40 10" scriptevents="1" />
		</frame>
		<quad id="Trackmania_Button_quad-focus-background" z-index="1" size="40 10" bgcolor="005948" hidden="1" />
	</frame>
	<frame id="Trackmania_Button_frame-content" z-index="1">
		<frame id="Trackmania_Button_frame-icon" z-index="1">
			<quad id="Trackmania_Button_quad-icon" size="10 10" bgcolor="FFF" />
			<quad id="Trackmania_Button_quad-focus-icon" z-index="1" size="10 10" bgcolor="005948" hidden="1" />
		</frame>
		<label id="Trackmania_Button_label-value" pos="20 -5" z-index="10" size="39 9" halign="center" valign="center2" textsize="3" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="FFF" />
	</frame>
	<frameinstance id="Trackmania_Button_spinner-loading" modelid="component-loadingspinner" z-index="2" />
</frame>
	</framemodel>
<!-- @Component end component-trackmania-button -->

<!-- @Component start component-button-icon-2 -->
<framemodel id="component-button-icon-2">
<frame id="button-icon-2_frame-mouse-visibility" class="button-icon-2_button-icon">
	<frame id="button-icon-2_frame-gamepad" z-index="1">
		<quad id="button-icon-2_quad-button-icon" keepratio="fit" />
	</frame>
	<frame id="button-icon-2_frame-keyboard" z-index="2">
		<quad id="button-icon-2_quad-key-icon" z-index="1" />
		<label id="button-icon-2_label-keyboard-key-name" z-index="2" halign="center" valign="center2" textsize="8" textcolor="ffffff" textfont="GameFontExtraBold" textprefix="$t" />
		<label id="button-icon-2_label-keyboard-key-enter" z-index="3" halign="center" valign="center2" textsize="8" textcolor="ffffff" textfont="GameFontExtraBold" textprefix="$t" text="|Keyboard|Enter" hidden="1" />
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-button-icon-2 -->

<!-- @Component start component-checkbox -->
<framemodel id="component-checkbox">
<frame id="trackmania-checkbox_frame-checkbox-align" class="trackmania-checkbox_frame-container-checkbox">
	<quad id="trackmania-checkbox_quad-activation" class="component-navigation-item-zone" halign="center" valign="center" z-index="1" opacity="0" scriptevents="1"/>
	<quad id="trackmania-checkbox_quad-icon" bgcolor="FFF" halign="center" valign="center" size="7 7" />
	<label id="trackmania-checkbox_label-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
	<label id="trackmania-checkbox_label-mirror-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
</frame>
	</framemodel>
<!-- @Component end component-checkbox -->

<!-- @Component start component-cmgame-expendable-button -->
<framemodel id="component-cmgame-expendable-button">
<frame id="menu-libs-expendable-button_frame-button-align" class="menu-libs-expendable-button_expendable-button">
	<frame id="menu-libs-expendable-button_frame-button-align" z-index="0">
		<quad id="menu-libs-expendable-button_quad-bg-left" />
		<quad id="menu-libs-expendable-button_quad-bg-center" />
		<quad id="menu-libs-expendable-button_quad-bg-right" />
	</frame>
	<frame id="menu-libs-expendable-button_frame-focus" z-index="1">
		<quad id="menu-libs-expendable-button_quad-focus-left" opacity="0" />
		<quad id="menu-libs-expendable-button_quad-focus-center" opacity="0" />
		<quad id="menu-libs-expendable-button_quad-focus-right" opacity="0" />
	</frame>
	<quad id="menu-libs-expendable-button_quad-button-icon" z-index="2" valign="center" />
	<frame id="menu-libs-expendable-button_frame-button-text-align" z-index="3">
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="menu-libs-expendable-button_label-button-text" valign="center2" textprefix="$z" />
	</frame>

	<frame id="menu-libs-expendable-button_frame-hitbox-clip" z-index="4" >
		<quad id="CMGame_ExpendableButton_quad-nav-zone" class="component-navigation-item-zone" z-index="4" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-expendable-button -->

<!-- @Component start component-trackmania-expendable-button -->
<framemodel id="component-trackmania-expendable-button">
		</framemodel>
<!-- @Component end component-trackmania-expendable-button -->

<!-- @Component start component-trackmania-pop-up-background-2 -->
<framemodel id="component-trackmania-pop-up-background-2">
<frame class="trackmania-pop-up-background-2_pop-up-background">
	<quad id="trackmania-pop-up-background-2_quad-dimmer" z-index="0" size="320 180" halign="center" valign="center" fullscreen="1" scriptevents="1" />
	<frame id="trackmania-pop-up-background-2_frame-background" z-index="2">
		<frame id="trackmania-pop-up-background-2_frame-align">
			<quad id="trackmania-pop-up-background-2_quad-background" z-index="0" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup.dds" opacity="0.95"/>
			<quad id="trackmania-pop-up-background-2_quad-header-image" z-index="1" halign="right" alphamask="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup_Header_Mask.dds" />
			<quad id="trackmania-pop-up-background-2_quad-header-gradient" z-index="2" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PopUp/Common_MainPopup_Header_Gradient.dds" />
			<quad id="trackmania-pop-up-background-2_button-leave" z-index="3" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/256x256/Icones_256_icon_cross_oblique.dds" size="7 7" halign="center" valign="center" colorize="FFF" scriptevents="1" />
			<frame id="trackmania-pop-up-background-2_frame-background-hitbox" z-index="2">
				<quad id="trackmania-pop-up-background-2_quad-background-hitbox" rot="10." halign="right" scriptevents="1" />
			</frame>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-trackmania-pop-up-background-2 -->

<!-- @Component start menu-libs-scroll -->
<framemodel id="menu-libs-scroll">
<frame class="menu-libs-scroll_scroll-widgets">
	<frameinstance id="menu-libs-scroll_frame-loading-spinner" modelid="component-loadingspinner" z-index="3"/>
	<label id="menu-libs-scroll_label-scroll-indicator" halign="center" valign="bottom" textsize="8" text="" hidden="1" scriptevents="1" />
	<quad id="menu-libs-scroll_quad-scroll-indicator" halign="center" valign="bottom" size="8 8" hidden="1" scriptevents="1" />
	<frame id="menu-libs-scroll_frame-scrollbar" hidden="1">
		<frame id="menu-libs-scroll_frame-scrollbar-during-scroll">
			<frame id="menu-libs-scroll_frame-scrollbar-bg" z-index="0">
				<quad id="menu-libs-scroll_quad-top" class="menu-libs-scroll_scrollbar-bg" halign="center" rot="180" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-center" class="menu-libs-scroll_scrollbar-bg" halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_Center.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-bottom" class="menu-libs-scroll_scrollbar-bg" halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
			</frame>
			<frame id="menu-libs-scroll_frame-scrollbar-fg" z-index="1">
				<quad id="menu-libs-scroll_quad-top" class="menu-libs-scroll_scrollbar-fg" halign="center" rot="180" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-center" class="menu-libs-scroll_scrollbar-fg" halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_Center.dds" scriptevents="1" />
				<quad id="menu-libs-scroll_quad-bottom" class="menu-libs-scroll_scrollbar-fg" halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/CMGame/Components/Scroll//ScrollBar_TopBottom.dds" scriptevents="1" />
			</frame>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end menu-libs-scroll -->

<!-- @Component start component-cmgame-selector -->
<framemodel id="component-cmgame-selector">
<frame id="menu-libs-selector_frame-selector-align" class="menu-libs-selector_selector">
	<frame id="menu-libs-selector_frame-navigation-container" class="component-navigation-container" z-index="1" >
		<quad id="CMGame_Selector_quad-nav-zone" class="component-navigation-item-zone" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" z-index="10"/>
		<frame
			id="menu-libs-selector_frame-selector-focus"
			class="component-navigation-item"
			data-nav-group="CMGame_Selector_NavGroup"
			data-nav-inputs="left;right"
			data-nav-targets="_;_"
		>
			<quad id="menu-libs-selector_button-previous" class="CMGame_Selector_Class_ChoiceButton" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds" colorize="FFFFFF" opacity="0.6" halign="left" valign="center" scriptevents="1" z-index="0"/>
			<label id="menu-libs-selector_label-value" pos="0 -0.3" textfont="GameFontRegular" textcolor="FFFFFF" textprefix="$i$t" opacity="0.6" halign="center" valign="center2" z-index="1"/>
			<quad id="menu-libs-selector_button-next" class="CMGame_Selector_Class_ChoiceButton" image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds" colorize="FFFFFF" opacity="0.6" halign="right" valign="center" scriptevents="1" z-index="0"/>
		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-selector -->

<!-- @Component start component-textfield -->
<framemodel id="component-textfield">
<stylesheet>
	<style class="cmgame-text-field_quad-default" halign="center" valign="center"/>
	<style class="cmgame-text-field_text-default" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="3" textcolor="FFF"/>
</stylesheet>

<frame id="cmgame-text-field_frame-text-field-align" class="cmgame-text-field_frame-container-text-field">
	<quad id="CMGame_TextField_quad-activation" class="component-navigation-item-zone cmgame-text-field_quad-default" scriptevents="1" opacity="0" z-index="10"/>
	<entry id="cmgame-text-field_entry-label" size="110 10" class="cmgame-text-field_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5"/>
	<textedit id="cmgame-text-field_textedit-label" size="110 28" pos="0 -1.5" class="cmgame-text-field_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5." linespacing="1.1" hidden="1"/>
	<frameinstance id="cmgame-text-field_button-background" modelid="component-cmgame-expendable-button" data-styles="component-trackmania-expendable-button-style-stack component-trackmania-expendable-button-style-align-center" z-index="-1"/>
</frame>
	</framemodel>
<!-- @Component end component-textfield -->

<!-- @Component start component-popupmultichoice -->
<framemodel id="component-popupmultichoice">
<frame class="trackmania-pop-up-multi-choice_popupmultichoice">
	<frame z-index="1" id="trackmania-pop-up-multi-choice_navcontainer" class="component-navigation-container">
		<frameinstance id="trackmania-pop-up-multi-choice_frame-background" modelid="component-trackmania-pop-up-background-2" data-styles="secondary-pop-up-with-header" z-index="0"/>
		<label id="trackmania-pop-up-multi-choice_label-title" halign="center" valign="center2" textcolor="FFFFFF" z-index="1"/>
		<frame id="trackmania-pop-up-multi-choice_frame-description-container" class="component-grid-container" z-index="1">

			<label id="trackmania-pop-up-multi-choice_label-description-line-0" class="component-grid-element" data-grid-row="0" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="trackmania-pop-up-multi-choice_label-description-line-1" class="component-grid-element" data-grid-row="1" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="trackmania-pop-up-multi-choice_label-description-line-2" class="component-grid-element" data-grid-row="2" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="trackmania-pop-up-multi-choice_label-description-line-3" class="component-grid-element" data-grid-row="3" textprefix="$z" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

		</frame>
		<frame id="trackmania-pop-up-multi-choice_frame-description-debug" z-index="2" hidden="1">

			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-0" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>

			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-1" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>

			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-2" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>

			<quad id="trackmania-pop-up-multi-choice_quad-description-debug-3" bgcolor="FF0000" halign="center" valign="center" opacity="0.3" hidden="1"/>

		</frame>

		<frame id="trackmania-pop-up-multi-choice_frame-scroll-view" z-index="2">
			<frameinstance modelid="menu-libs-scroll" data-scroll-parent="trackmania-pop-up-multi-choice_frame-scroll-choices" z-index="1" />
			<frame
				id="trackmania-pop-up-multi-choice_frame-scroll-choices"
				pos="-51.1498 19."
				class="menu-libs-scroll-window component-navigation-item trackmania-pop-up-multi-choice_navigation"
				data-pager-page-size="10"
				data-elements-per-line="1"
				data-element-size="100. 10."
				data-margin-size="0. 0."
				data-window-size="100. 50."
				data-header-height="0."
				data-footer-height="0."
				data-scroll-indicator-x-offset="-5."
				data-scroll-indicator-y-offset="-9."
				data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="10"
				data-scrollbar-xoffset="10."
				data-scrollpadding="17.5"
				data-scroll-locked="1"
				data-skew="-10."
				data-skew-valign="1"
				data-nav-group="navgroup-component-popupmultichoice"
			>
				<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="trackmania-pop-up-multi-choice_button-choice" modelid="component-cmgame-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="trackmania-pop-up-multi-choice_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			</frame>
		</frame>

		<frameinstance
			id="trackmania-pop-up-multi-choice_button-first-choice" z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item trackmania-pop-up-multi-choice_navigation"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;trackmania-pop-up-multi-choice_button-second-choice"
			data-nav-group="navgroup-component-popupmultichoice"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="trackmania-pop-up-multi-choice_button-second-choice" z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item trackmania-pop-up-multi-choice_navigation"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;trackmania-pop-up-multi-choice_button-first-choice"
			data-nav-group="navgroup-component-popupmultichoice"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-popupmultichoice -->

<!-- @Component start component-cmgame-menusounds -->
<framemodel id="component-cmgame-menusounds">
</framemodel>
<!-- @Component end component-cmgame-menusounds -->

<!-- @Component start component-buttonslist2 -->
<framemodel id="component-buttonslist2">
<framemodel id="ComponentButtonsList2_framemodel-button">
	<frameinstance modelid="component-button-icon-2" id="ComponentButtonsList2_button-icon-bind" data-size="8. 8." />
	<label id="ComponentButtonsList2_label-action" pos="5. -0.5" size="8. 8." valign="center2" textfont="GameFontExtraBold" textemboss="1"/>
</framemodel>
<frame class="ComponentButtonsList2_container">
	<frame id="ComponentButtonsList2_frame-align">
		<frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" /><frameinstance modelid="ComponentButtonsList2_framemodel-button" />
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-buttonslist2 -->

<!-- @Component start component-menu-button-list -->
<framemodel id="component-menu-button-list">
<frame id="ComponentMenuButtonList_frame-global">
	<frameinstance modelid="component-buttonslist2"
		id="ComponentMenuButtonList_frame-button-list"
		z-index="2"
		pos="160 -92"
		data-buttons="{&quot;A&quot;:&quot;|Action|Select&quot;,&quot;B&quot;:&quot;|Action|Back&quot;}"
		data-halign="right"
		data-valign="bottom"
		data-buttonmaxwidth="50."
		data-textprefix="$t"
		data-textfont="GameFontSemiBold"
		data-buttons-spacing="5."
	/>
</frame>
</framemodel>
<!-- @Component end component-menu-button-list -->

<!-- @Component start structures-club -->
<framemodel id="structures-club">
		</framemodel>
<!-- @Component end structures-club -->

<!-- @Component start structures-matchmaking -->
<framemodel id="structures-matchmaking">
		</framemodel>
<!-- @Component end structures-matchmaking -->

<!-- @Component start lib-user-store -->
<framemodel id="lib-user-store">
		</framemodel>
<!-- @Component end lib-user-store -->

<!-- @Component start lib-http-struct -->
<framemodel id="lib-http-struct">
		</framemodel>
<!-- @Component end lib-http-struct -->

<!-- @Component start lib-campaign-struct -->
<framemodel id="lib-campaign-struct">
		</framemodel>
<!-- @Component end lib-campaign-struct -->

<!-- @Component start lib-campaign-store -->
<framemodel id="lib-campaign-store">
		</framemodel>
<!-- @Component end lib-campaign-store -->

<!-- @Component start component-playerroyalvictories -->
<framemodel id="component-playerroyalvictories">
<stylesheet>
	<style class="trackmania-player-royal-victories_quad-base" halign="center" valign="center"/>
	<style class="trackmania-player-royal-victories_text-base" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textsize="3"/>
</stylesheet>

<frame id="trackmania-player-royal-victories_frame-player-royal-victories" class="trackmania-player-royal-victories_container">
	<frame id="trackmania-player-royal-victories_frame-lion">
		<quad id="trackmania-player-royal-victories_quad-lion" size="36 36" class="trackmania-player-royal-victories_quad-base"/>
		<frame id="trackmania-player-royal-victories_frame-victory-count" pos="0 -30">
			<label id="trackmania-player-royal-victories_label-count" pos="0 7" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-victory" size="55 10" class="trackmania-player-royal-victories_text-base" maxline="2" autonewline="1" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>
		</frame>
		<frame id="trackmania-player-royal-victories_frame-super-victory-count" pos="0 -23">
			<label id="trackmania-player-royal-victories_label-count" halign="right" pos="-15 0" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-victory" halign="left" pos="-14 0" size="45 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>

			<label id="trackmania-player-royal-victories_label-super-count" halign="right" pos="-25 -7" size="25 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontExtraBold" textsize="6"/>
			<label id="trackmania-player-royal-victories_label-super-victory" halign="left" pos="-24 -7" size="55 10" class="trackmania-player-royal-victories_text-base" textcolor="003228" textfont="GameFontSemiBold" textsize="3"/>
		</frame>
	</frame>
	<frame id="trackmania-player-royal-victories_frame-crown">
		<quad id="trackmania-player-royal-victories_quad-crown" size="10 10" class="trackmania-player-royal-victories_quad-base"/>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-playerroyalvictories -->

<!-- @Component start component-playerrank -->
<framemodel id="component-playerrank">
<stylesheet>
	<style class="ComponentPlayerRank_quad-base" halign="center" valign="center"/>
	<style class="ComponentPlayerRank_text-base" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textsize="3"/>
</stylesheet>

<frame id="ComponentPlayerRank_frame-player-rank">
	<quad id="ComponentPlayerRank_quad-rank" class="ComponentPlayerRank_quad-base" size="20 20" keepratio="Fit" z-index="1"/>
</frame>
		</framemodel>
<!-- @Component end component-playerrank -->

<!-- @Component start component-cmgame-expendable-asset -->
<framemodel id="component-cmgame-expendable-asset">
<frame id="expendable-asset_frame-align" class="expendable-asset_expendable-asset">
	<quad id="expendable-asset_quad-left" halign="right"/>
	<quad id="expendable-asset_quad-center" halign="center"/>
	<quad id="expendable-asset_quad-right" halign="left"/>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-expendable-asset -->

<!-- @Component start component-trackmania-expendable-asset -->
<framemodel id="component-trackmania-expendable-asset">
		</framemodel>
<!-- @Component end component-trackmania-expendable-asset -->

<!-- @Component start component-transition -->
<framemodel id="component-transition">
		</framemodel>
<!-- @Component end component-transition -->

<!-- @Component start component-navigationtabs -->
<framemodel id="component-navigationtabs">
<frame id="trackmania-navigation-tabs_frame-align" class="trackmania-navigation-tabs_container">
	<frame id="trackmania-navigation-tabs_frame-navigation-container" class="component-navigation-container">
		<frameinstance id="trackmania-navigation-tabs_frame-background" modelid="component-cmgame-expendable-asset" data-styles="component-trackmania-expendable-asset-style-edges-rounded" z-index="-1"/>
		<frame id="trackmania-navigation-tabs_frame-controller-info" z-index="2">
			<frameinstance id="trackmania-navigation-tabs_button-icon-prev-tab" modelid="component-button-icon-2" data-halign="right" data-size="8. 8." data-bind="LB" data-hideformouse="1" />
			<frameinstance id="trackmania-navigation-tabs_button-icon-next-tab" modelid="component-button-icon-2" data-halign="left" data-size="8. 8." data-bind="RB" data-hideformouse="1" />
		</frame>
		<frame
			id="trackmania-navigation-tabs_frame-tabs"
			class="component-navigation-item"
			data-nav-inputs="pageup;pagedown"
			data-nav-targets="_;_"
			data-nav-group="navgroup-component-navigationtabs-alltabs"
		>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-0"
				modelid="component-cmgame-expendable-button"
				z-index="0"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="0"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-1"
				modelid="component-cmgame-expendable-button"
				z-index="1"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="1"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-2"
				modelid="component-cmgame-expendable-button"
				z-index="2"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="2"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-3"
				modelid="component-cmgame-expendable-button"
				z-index="3"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="3"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-4"
				modelid="component-cmgame-expendable-button"
				z-index="4"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="4"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-5"
				modelid="component-cmgame-expendable-button"
				z-index="5"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="5"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

			<frameinstance
				id="trackmania-navigation-tabs_button-tab-6"
				modelid="component-cmgame-expendable-button"
				z-index="6"
				class="component-navigation-item trackmania-navigation-tabs_buttontab component-menusounds-item"
				data-tabindex="6"
				data-styles="component-trackmania-expendable-button-style-align-center"
				data-focus-opacity-focused="0."
				data-focus-opacity-unfocused="0."
				data-icon-align="1"
				data-icon-keepratio="clip"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-group="navgroup-component-navigationtabs-tab"
				data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
				data-menusounds-selectsound="MainTabSelect"
				data-menusounds-playsoundonlyformouse="1"
				data-nav-locked="1"
				hidden="1"
			/>

		</frame>
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-navigationtabs -->

<!-- @Component start component-form-select -->
<framemodel id="component-form-select">
<framemodel id="menu-libs-form-select_option">
	<quad id="menu-libs-form-select_button-option" pos="0.25 0" z-index="0" size="99.5 9." valign="center" opacity="0.4" scriptevents="1" />
	<label id="menu-libs-form-select_label-option" pos="3 0" z-index="1" size="88 8." valign="center2" opacity="0.4" textprefix="$t$i" textsize="3" />
</framemodel>
<frame class="menu-libs-form-select_container" data-option-size-y="9.">
	<frame id="menu-libs-form-select_selection" z-index="0">
		<quad id="menu-libs-form-select_toggle-bg2" pos="0.25 0" z-index="0" size="99.5 9.5" valign="center" opacity="0.4" />
		<quad id="menu-libs-form-select_toggle-bg" pos="92 0" z-index="1" size="7.5 9.5" valign="center" opacity="0.4" />
		<label id="menu-libs-form-select_toggle-fg" pos="96 0" z-index="2" size="7.5 9.5" halign="center" valign="center2" textprefix="$t$i" textsize="3" text="⏷" />
		<quad id="ComponentFormSelect_quad-toggle" z-index="3" size="100 10" valign="center" scriptevents="1" class="component-navigation-item-zone" />
		<label id="menu-libs-form-select_selected" pos="3 0" z-index="4" size="88 8" valign="center2" textprefix="$t$i" textsize="3" opacity="0.4" />
	</frame>
	<frame id="menu-libs-form-select_container-options" pos="0 -4.5" z-index="1">
		<quad id="menu-libs-form-select_options-bg" pos="0.25 -0.25" z-index="0" size="99.5 49.5" opacity="0.9" bgcolor="" scriptevents="1" />
		<frame id="menu-libs-form-select_clip-options" z-index="2">
			<frame id="menu-libs-form-select_options" pos="0 -5" z-index="2">
				<frameinstance pos="0 0." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -9." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -18." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -27." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -36." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -45." modelid="menu-libs-form-select_option" /><frameinstance pos="0 -54." modelid="menu-libs-form-select_option" />
			</frame>
		</frame>
		<frame id="menu-libs-form-select_scrollbar" pos="99.75 -0.25" z-index="3">
			<quad id="menu-libs-form-select_scrollbar-bg" size="2 30" z-index="0" halign="right" bgcolor="000" opacity="0." scriptevents="1" />
			<quad id="menu-libs-form-select_scrollbar-fg" size="2 10" z-index="1" halign="right" bgcolor="FFF" bgcolorfocus="FFF" opacity="0.7" scriptevents="1" />
		</frame>
		<quad id="menu-libs-form-select_options-border" z-index="4" size="100 50" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-form-select -->

<!-- @Component start component-popupreportsystem -->
<framemodel id="component-popupreportsystem">
<stylesheet>
	<style class="trackmania-pop-up-report-system_text-semi-bold" halign="left" valign="center2" textfont="GameFontSemiBold" textsize="4" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="trackmania-pop-up-report-system_text-extra-bold" halign="left" valign="center2" textfont="GameFontExtraBold" textsize="13" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame global -->
<frame id="trackmania-pop-up-report-system_frame-global" class="trackmania-pop-up-report-system_popupreportsystem">
	<frame z-index="1" id="trackmania-pop-up-report-system_navigation-container" class="component-navigation-container">
		<frameinstance id="trackmania-pop-up-report-system_frame-background" modelid="component-trackmania-pop-up-background-2" z-index="-1"/>
		<label id="trackmania-pop-up-report-system_label-title" pos="-115.656 61.5" size="150 20" class="trackmania-pop-up-report-system_text-extra-bold" text="|Title|Report" z-index="1"/>
		<label id="trackmania-pop-up-report-system_label-first-choice" pos="-116.507 51." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" text="What do you want to report?" z-index="1"/>

		<!-- Drop down menu for report target -->
		<frameinstance
			id="trackmania-pop-up-report-system_frame-select-report-target" pos="-115.623 39."
			modelid="component-form-select"
			class="component-navigation-item"
			data-size="90. 11."
			data-scale-options="1"
			data-fontname="GameFontSemiBold"
			data-color-background="003228"
			data-color-text="FFF"
			data-custom-navigation="1"
			data-text-center="1"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="ComponentFormSelect_quad-toggle"
		/>

		<!-- Drop down menu for report details -->
		<label id="trackmania-pop-up-report-system_label-second-choice" pos="-121.826 18." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" z-index="1"/>
		<frameinstance
			id="trackmania-pop-up-report-system_frame-select-report-details" pos="-120.942 6."
			modelid="component-form-select"
			class="component-navigation-item"
			data-size="90. 11."
			data-scale-options="1"
			data-fontname="GameFontSemiBold"
			data-color-background="003228"
			data-color-text="FFF"
			data-custom-navigation="1"
			data-text-center="1"
			data-halign="center" data-valign="center"
			data-nav-inputs="select;cancel"
			data-nav-targets="_;_"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="ComponentFormSelect_quad-toggle"
		/>

			<!-- Drop down menu for report reason -->
			<label id="trackmania-pop-up-report-system_label-third-choice" pos="-127.527 -20." size="150 10" class="trackmania-pop-up-report-system_text-semi-bold" text="What is the reason of your report?" z-index="1"/>
			<frameinstance
				id="trackmania-pop-up-report-system_frame-select-report-reason" pos="-126.642 -32."
				modelid="component-form-select"
				class="component-navigation-item"
				data-size="90. 11."
				data-scale-options="1"
				data-fontname="GameFontSemiBold"
				data-color-background="003228"
				data-color-text="FFF"
				data-custom-navigation="1"
				data-text-center="1"
				data-halign="center" data-valign="center"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="navgroup-pop-up-report-system"
				data-nav-zone="ComponentFormSelect_quad-toggle"
			/>

		<!-- Bottom buttons -->
		<frameinstance id="trackmania-pop-up-report-system_button-icon-back" modelid="component-button-icon-2" pos="-137.314 -67." data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="trackmania-pop-up-report-system_button-back" pos="-137.314 -67." z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item"
			data-max-width="70."
			data-text="Quit"
			data-styles="component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-secondary"
			data-halign="left"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;trackmania-pop-up-report-system_button-report"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>

		<label id="trackmania-pop-up-report-system_label-report-status" hidden="1" pos="-11.8139 -67." halign="center" textsize="3" size="130 10" class="trackmania-pop-up-report-system_text-semi-bold" z-index="1"/>

		<frameinstance id="trackmania-pop-up-report-system_frame-loading-spinner" modelid="component-loadingspinner" pos="68.1861 -67." scale="0.8" halign="right" valign="center"/>

		<frameinstance id="trackmania-pop-up-report-system_button-icon-report" modelid="component-button-icon-2" pos="115.186 -67." data-halign="left" data-size="8 8" data-bind="select" data-hideformouse="1" />
		<frameinstance
			id="trackmania-pop-up-report-system_button-report" pos="115.186 -67." z-index="2"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item"
			data-text="|Verb|Report"
			data-max-width="60."
			data-styles="component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-secondary"
			data-halign="right"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;trackmania-pop-up-report-system_button-back"
			data-nav-group="navgroup-pop-up-report-system"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
</framemodel>
<!-- @Component end component-popupreportsystem -->

<!-- @Component start component-cmgame-player-name -->
<framemodel id="component-cmgame-player-name">
<frame class="cmgame-player-name_player-name">
	<frame id="cmgame-player-name_frame-align">
		<frameinstance id="cmgame-player-name_loading-spinner-name" modelid="component-loadingspinner" />
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="cmgame-player-name_label-name" valign="center2" textprefix="$z" />
		<label id="cmgame-player-name_label-first-party-icon" valign="center2" textfont="GameFontExtraBold" />
	</frame>
</frame>
	</framemodel>
<!-- @Component end component-cmgame-player-name -->

<!-- @Component start component-profileplayerinfo -->
<framemodel id="component-profileplayerinfo">
<stylesheet>
	<style class="ComponentProfilePlayerInfo_text-title" textsize="10" textprefix="$t$i" textitalicslope=".2" textfont="GameFontExtraBold" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-regular" textsize="4" textprefix="$t$i" textitalicslope=".2" textfont="GameFontRegular" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-info" textsize="4" halign="center" valign="center2" textprefix="$t$i" textitalicslope=".2" textfont="GameFontExtraBold" textcolor="FFF" />
	<style class="ComponentProfilePlayerInfo_text-error" halign="center" valign="center2" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="CE0000" />
	<style class="ComponentProfilePlayerInfo_text-bold" valign="center2" textfont="GameFontExtraBold" textprefix="$t$i" textcolor="ffffff" textsize="2" />
	<style class="ComponentProfilePlayerInfo_text-semibold" valign="center2" textfont="GameFontSemiBold" textprefix="$t$i" textcolor="ffffff" textsize="2" />
</stylesheet>
<framemodel id="ComponentProfilePlayerInfo_framemodel-trophy-cell">
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-icon"
		pos="0.75 -9.89" z-index="1"
		size="21. 21."
		halign="center" valign="center"
		autoscale="0"
		image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds"
	/>
	<label
		id="ComponentProfilePlayerInfo_label-trophy-count"
		class="ComponentProfilePlayerInfo_text-bold"
		pos="0 -20.24" z-index="2"
		size="30.5571 23."
		halign="center" valign="center2"
		textsize="3.5"
		text="0"
	/>
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-bg"
		pos="0 -11.5" z-index="-1"
		size="30.5571 23."
		halign="center" valign="center"
		image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Trophy.dds"
		colorize="000514"
		opacity="0.2"
	/>
	<quad
		id="ComponentProfilePlayerInfo_quad-trophy-focus"
		pos="0 -11.5" z-index="0"
		size="30.5571 23."
		halign="center" valign="center"
		opacity="0"
		image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Trophy_Contour.dds"
		colorize="6EFAA0"
	/>
	<frame size="30.5571 23." halign="center">
		<quad
			id="ComponentProfilePlayerInfo_quad-trophy-mouse"
			class="component-navigation-item-zone"
			pos="0 -11.5" z-index="-1"
			rot="10"
			size="25.9736 27.6"
			halign="center" valign="center"
			opacity="0"
			scriptevents="1"
		/>
	</frame>
</framemodel>
<framemodel id="ComponentProfilePlayerInfo_framemodel-trophy-history-cell">
	<frame id="frame-trophy-history-cell-bg" z-index="0">
		<quad pos="3.35714 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="3.35714 0." size="118.286 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="121.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />

		<quad pos="129.357 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="129.357 0." size="19.2857 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="148.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />

		<quad pos="155.857 0." size="3.35714 6.71429" halign="right" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_Start.dds" colorize="000514" opacity="0.6" />
		<quad pos="155.857 0." size="2.78571 6.71429" bgcolor="000514" opacity="0.6" />
		<quad pos="158.643 0." size="3.35714 6.71429" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_Profile_Trophies_Line_End.dds" colorize="000514" opacity="0.6" />
	</frame>
	<frame pos="0 -3.85714" z-index="1">
		<label id="ComponentProfilePlayerInfo_label-description" class="ComponentProfilePlayerInfo_text-semibold" pos="3.35714 0" size="118.286 6.71429" valign="center2" textsize="2" />
		<label id="ComponentProfilePlayerInfo_label-date" class="ComponentProfilePlayerInfo_text-semibold" pos="139. 0" size="23.2857 6.71429" halign="center" valign="center2" textsize="2" />
		<label id="ComponentProfilePlayerInfo_label-amount" class="ComponentProfilePlayerInfo_text-bold" pos="157.25 0" size="4.78571 6.71429" halign="center" valign="center2" textsize="2" textcolor="6EFAA0" />
	</frame>
</framemodel>

<frame id="ComponentProfilePlayerInfo_frame-global" class="component-profileplayerinfo component-navigation-item" data-nav-inputs="action3;action4;up;down;cancel" data-nav-targets="_;_;_;_;_" data-nav-group="navgroup-component-profileplayerinfo-global">
	<quad id="ComponentProfilePlayerInfo_quad-background" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/UI_profile_background_map_gradients.dds" size="320 180" z-index="-4" halign="center" valign="center" fullscreen="1"/>
	<frameinstance modelid="component-menu-button-list" id="ComponentProfilePlayerInfo_frame-button-list-profile" z-index="1" />
	<quad id="ComponentProfilePlayerInfo_quad-lights" pos="-105 30" size="200. 180." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Common/Common_Light_Spotlight.webm" z-index="1" colorize="FFF" halign="center" valign="center" />
	<label id="ComponentProfilePlayerInfo_label-error" class="ComponentProfilePlayerInfo_text-error" pos="0 -61" textsize="2.5" size="300 10" z-index="10"/>

	<frameinstance
		id="ComponentProfilePlayerInfo_frame-report-system"
		z-index="10"
		modelid="component-popupreportsystem"
		hidden="1"
	/>

	<frame id="ComponentProfilePlayerInfo_frame-player-card" pos="-104.5 73" z-index="5">
		<quad z-index="0" size="91.56 11.76" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Common_Widget_Double.dds" />
		<frameinstance id="ComponentProfilePlayerInfo_playername-player-card-name" modelid="component-cmgame-player-name" pos="-21 1.75" z-index="1" data-size="64 10" data-textsize="3" data-valign="center2" data-textfont="GameFontExtraBold" data-textprefix="$t$i" data-textcolor="ffffff" />
		<quad id="ComponentProfilePlayerInfo_quad-player-card-echelon" pos="-22.5 -3.75" z-index="1" size="4 4" autoscale="0" valign="center" />
		<label id="ComponentProfilePlayerInfo_label-player-card-echelon" pos="-18.5 -3.75" z-index="2" size="62 10" class="ComponentProfilePlayerInfo_text-semibold" textsize="1" textcolor="6EFAA0" halign="left" />
		<frameinstance id="ComponentProfilePlayerInfo_spinner-player-card-echelon" modelid="component-loadingspinner" pos="-20 -3.75" z-index="3" scale="0.2" data-color="6EFAA0" />
		<quad id="ComponentProfilePlayerInfo_quad-player-card-flag" pos="-46.6956 0" z-index="1" size="19.488 11.76" keepratio="Clip" image="file://ZoneFlags/Path/World" alphamask="file://Media/Manialinks/Nadeo/Trackmania/Menus/Overlays/Menu_Widget_Profile_Flag_Mask.dds" halign="left" valign="center" />
		<frameinstance
			modelid="component-trackmania-button"
			id="ComponentProfilePlayerInfo_button-prev-player"
			class="component-navigation-item component-menusounds-item"
			pos="-45.78 0" z-index="0"
			data-size="7. 7."
			data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
			data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
			data-bgcolor="FFFFFF"
			data-focuscolor="FFFFFF"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="right" data-valign="center"
			data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="ComponentTrackmania_Button_quad-background"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance
			modelid="component-trackmania-button"
			id="ComponentProfilePlayerInfo_button-next-player"
			class="component-navigation-item component-menusounds-item"
			pos="45.78 0" z-index="0"
			data-size="7. 7."
			data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
			data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
			data-bgcolor="FFFFFF"
			data-focuscolor="FFFFFF"
			data-opacity="1."
			data-opacityunfocus="0.6"
			data-halign="left" data-valign="center"
			data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
			data-nav-inputs="select"
			data-nav-targets="_"
			data-nav-zone="ComponentTrackmania_Button_quad-background"
			data-menusounds-selectsound="ArrowSelect"
			hidden="1"
		/>
		<frameinstance id="ComponentProfilePlayerInfo_button-icon-prev-player" modelid="component-button-icon-2" pos="-46.78 0" data-halign="right" data-valign="center" data-size="7 7" data-bind="LT" data-hideformouse="1" />
		<frameinstance id="ComponentProfilePlayerInfo_button-icon-next-player" modelid="component-button-icon-2" pos="46.78 0" data-halign="left" data-valign="center" data-size="7 7" data-bind="RT" data-hideformouse="1" />
	</frame>
	<frameinstance
		id="ComponentProfilePlayerInfo_navigationtabs-categories"
		modelid="component-navigationtabs"
		pos="-122.6 49.7"
		data-tabs="{&quot;0&quot;:&quot;|Profile|General&quot;,&quot;1&quot;:&quot;|Profile|Trophies&quot;,&quot;2&quot;:&quot;|Profile|Royal&quot;,&quot;3&quot;:&quot;|Profile|Ranked&quot;}"
		data-halign="left"
		z-index="5"
	/>

	<frameinstance id="ComponentProfilePlayerInfo_spinner-privilege-check" modelid="component-loadingspinner" pos="12 -5" z-index="4" />
	<label id="ComponentProfilePlayerInfo_label-privilege-check" class="ComponentProfilePlayerInfo_text-regular" pos="12 -5" z-index="5" size="125 20" halign="center" valign="center2" text="Error while retrieving profile (code: %1)MS-0048" hidden="1" />

	<frame id="ComponentProfilePlayerInfo_frame-content" pos="-87.8 30">
		<frame id="ComponentProfilePlayerInfo_frame-trophies" hidden="1" pos="0 0" z-index="2">
			<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-trophies" pos="100. -35." />
			<label
				id="ComponentProfilePlayerInfo_label-trophies-error"
				class="ComponentProfilePlayerInfo_text-regular"
				pos="100. -35."
				size="125 20"
				halign="center" valign="center2"
				maxline="5"
				hidden="1"
			/>
			<frame id="ComponentProfilePlayerInfo_frame-trophies-loaded">
				<label
					id="ComponentProfilePlayerInfo_label-display-history"
					class="ComponentProfilePlayerInfo_text-title"
					pos="-48 -60.2" z-index="2"
					size="258 15"
					valign="bottom"
					textsize="3.5"
					text="Select a trophy to see its unlock history"
				/>
				<frame
					id="ComponentProfilePlayerInfo_frame-trophies-list"
					class="component-navigation-item"
					pos="-37 -62.5" z-index="1"
					data-nav-group="navgroup-component-profileplayerinfo-main"
					data-nav-inputs="select;left;right;up;down"
					data-nav-targets="_;_;_;ComponentProfilePlayerInfo_frame-trophies-ranking;ComponentProfilePlayerInfo_button-back"
				>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-0"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="0. 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="0"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-1"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="30.0371 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="1"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-2"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="60.0743 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="2"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-3"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="90.1114 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="3"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-4"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="120.149 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="4"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-5"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="150.186 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="5"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-6"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="180.223 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="6"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-7"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="210.26 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="7"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_button-trophy-8"
				class="component-navigation-item ComponentProfilePlayerInfo_button-trophy"
				pos="240.297 0."
				data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
				data-nav-inputs="select"
				data-nav-targets="_"
				data-nav-zone="ComponentProfilePlayerInfo_quad-trophy-mouse"
				data-trophy-key="8"
			>
				<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-cell" />
			</frame>

				</frame>
				<frame
					id="ComponentProfilePlayerInfo_frame-trophies-ranking"
					class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
					pos="-15 -16"
					data-nav-group="navgroup-component-profileplayerinfo-main"
					data-nav-inputs="left;right;down"
					data-nav-targets="_;_;ComponentProfilePlayerInfo_frame-trophies-list"
				>
					<frame>
						<frameinstance
							modelid="component-trackmania-button"
							id="ComponentProfilePlayerInfo_button-next-zone"
							pos="-19.5 0"
							data-size="8 8"
							data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
							data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
							data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="ComponentTrackmania_Button_quad-background"
							data-menusounds-selectsound="ArrowSelect"
							data-ComponentProfilePlayerInfo_opacity-focus="1"
							data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
						/>
						<frameinstance
							modelid="component-trackmania-button"
							id="ComponentProfilePlayerInfo_button-prev-zone"
							pos="19 0"
							data-size="8 8"
							data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
							data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
							data-bgcolor="FFF"
							data-opacityunfocus=".6"
							data-focuscolor="FFF"
							data-halign="center" data-valign="center"
							class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
							data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
							data-nav-inputs="select"
							data-nav-targets="_"
							data-nav-zone="ComponentTrackmania_Button_quad-background"
							data-menusounds-selectsound="ArrowSelect"
							data-ComponentProfilePlayerInfo_opacity-focus="1"
							data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
						/>
						<label size="46 5" pos="3.26205 18.5" text="Global rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
						<label size="46 5" pos="1.41062 8." text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textsize="2" textfont="GameFontRegular" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-global-ranking-position" size="32 5" pos="-0.352654 -2." class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-global-ranking-zone" size="46 5" pos="-3.43838 -19.5" class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
					</frame>
					<quad size="59.8633 53." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
					<quad size="59.8633 53." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="2" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
				</frame>
				<frame id="ComponentProfilePlayerInfo_frame-trophies-points" pos="38 -16">
					<frame>
						<quad id="ComponentProfilePlayerInfo_quad-best-trophy" pos="1.23429 7." z-index="2" size="42 42" image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds" halign="center" valign="center" autoscale="0"/>
						<quad pos="1.23429 7." z-index="1" size="45 45" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Trophy_selected_light.dds" opacity="0.4" halign="center" valign="center"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-points" size="46 5" pos="-2.55674 -14.5" class="ComponentProfilePlayerInfo_text-info" textsize="5.5" textcolor="6EFAA0"/>
						<label id="ComponentProfilePlayerInfo_label-trophies-points-text" size="46 5" pos="-3.49127 -19.8" text="|Score|Point" class="ComponentProfilePlayerInfo_text-info" textsize="1.8" textfont="GameFontRegular" textcolor="6EFAA0"/>
					</frame>
					<quad size="59.8633 53." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
				<frame pos="47.5 10.5" hidden="1" id="ComponentProfilePlayerInfo_frame-trophies-history">
					<label id="ComponentProfilePlayerInfo_label-trophy-history" class="ComponentProfilePlayerInfo_text-regular" pos="22 -5" size="162. 10" valign="center2" />
					<frameinstance
						modelid="component-loadingspinner"
						id="ComponentProfilePlayerInfo_spinner-trophies-history"
						pos="97. -26.5"
					/>
					<frameinstance modelid="menu-libs-scroll" data-scroll-parent="ComponentProfilePlayerInfo_scroll-trophies-history" z-index="6" />
					<frame
						id="ComponentProfilePlayerInfo_scroll-trophies-history"
						class="menu-libs-scroll-window"
						pos="22 0" z-index="5"
						data-elements-per-line="1"
						data-element-size="162. 6.71429"
						data-margin-size="1. 1."
						data-window-size="162. 53."
						data-scroll-indicator-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
						data-scroll-indicator-colorize="FFFFFF"
						data-scroll-indicator-size="8"
						data-scroll-indicator-x-offset="-8"
						data-scroll-indicator-y-offset="-8"
						data-scrollbar-xoffset="2"
						data-scrollpadding="10"
						data-skew="-10"
						data-scroll-grid-size="1 3.75"
						data-pager-page-size="8"
						data-pager-trigger-size="8"
						data-pager-margin-size="4"
					>
						<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />
						<frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" /><frameinstance modelid="ComponentProfilePlayerInfo_framemodel-trophy-history-cell" class="menu-libs-scroll-element" hidden="1" />
					</frame>
				</frame>
			</frame>
		</frame>

		<frame id="ComponentProfilePlayerInfo_frame-ranked-stats" pos="-16.2 -4.5" hidden="1" z-index="2">
			<frame id="ComponentProfilePlayerInfo_frame-public-data">
				<frame id="ComponentProfilePlayerInfo_frame-current-season" pos="42.2 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Current season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.78859 -38.5" class="ComponentProfilePlayerInfo_text-info" textsize="5.8" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold" hidden="1"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-previous-season" pos="89.5 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Previous season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-best-season" pos="136.8 -33">
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Best season" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-rank" pos="1.5 0." scale="1.8"/>
					<label id="ComponentProfilePlayerInfo_label-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
					<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
					<label id="ComponentProfilePlayerInfo_label-ranked-error"	class="ComponentProfilePlayerInfo_text-regular" textprefix="$i"	textsize="2" size="40 40" halign="center" valign="center2" maxline="4" />
				</frame>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-sensible-data">
				<frame id="ComponentProfilePlayerInfo_frame-matches-count">
					<label id="ComponentProfilePlayerInfo_label-matches-count" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="Matches" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-win-rate" pos="-5.83642 -33.1">
					<label id="ComponentProfilePlayerInfo_label-percentage" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="Win rate" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>

				<frame id="ComponentProfilePlayerInfo_frame-mvp" pos="-11.6728 -66.2">
					<label id="ComponentProfilePlayerInfo_label-mvp-count" size="40 5" pos="0.0440817 0.25"  class="ComponentProfilePlayerInfo_text-info" textsize="11" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="-1.49878 -8.5" text="MVP" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<quad size="49.3333 30." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Third.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				</frame>
			</frame>
		</frame>

		<frame id="ComponentProfilePlayerInfo_frame-royal-stats" pos="-22 -37.5" hidden="1" z-index="2">
			<frame id="ComponentProfilePlayerInfo_frame-royal-victories">
				<label id="ComponentProfilePlayerInfo_label-title" pos="7.22941 41." size="40 5" text="|Profile|Royal" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerroyalvictories" id="ComponentProfilePlayerInfo_frame-royal-level" pos="0.705308 4." data-imagetype="2" />
				<label id="ComponentProfilePlayerInfo_label-royal-victories" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="10" textcolor="6EFAA0"/>
				<label text="Victories" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-super-royal-victories" pos="48 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Super Royal" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<quad id="ComponentProfilePlayerInfo_quad-super-royal-logo" pos="0.705308 4." size="35 35" image="file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds" halign="center" valign="center"/>
				<label id="ComponentProfilePlayerInfo_label-super-royal-victories" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="10" textcolor="6EFAA0"/>
				<label text="Victories" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full_RoundedLeft.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>

				<frame pos="63.8 36.5">
					<frame>
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Bronze.dds" halign="center" valign="center"/>
						<label text="Bronze" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-bronze-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-4.29356 -24.35">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Silver.dds" halign="center" valign="center"/>
						<label text="Silver" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-silver-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-8.58712 -48.7">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Gold.dds" halign="center" valign="center"/>
						<label text="Gold" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-gold-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
					<frame pos="-12.8807 -73.05">
						<quad size="71.6667 23." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Quarter.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
						<quad pos="-20.5 1" size="16.5 16.5" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/Crown_Master.dds" halign="center" valign="center"/>
						<label text="Master" pos="-20.5 -7.1" size="21 5" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="1.8"/>
						<label id="ComponentProfilePlayerInfo_label-master-victories" pos="-9 0.75" size="38 10" class="ComponentProfilePlayerInfo_text-info" textsize="9" halign="left" textcolor="6EFAA0"/>
						<label text="Victories" pos="-9 -5.5" size="36 5" halign="left" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5" textcolor="6EFAA0"/>
					</frame>
				</frame>
			</frame>
		</frame>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-current-skin" pos="-106 -12" z-index="0">
		<camera id="ComponentProfilePlayerInfo_camera-skin" halign="center" valign="center" size="144. 162."/>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-general-tab" z-index="3">
		<frame id="ComponentProfilePlayerInfo_frame-main-profile" pos="-24 -7.7">
			<frame
				id="ComponentProfilePlayerInfo_frame-info-ranking"
				class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
				pos="-0.627091 24.8"
				data-nav-group="navgroup-component-profileplayerinfo-main"
				data-nav-inputs="left;right;down"
				data-nav-targets="_;_;ComponentProfilePlayerInfo_frame-info-campaign-ranking"
			>
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="3" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
				<label z-index="1" size="40 5" pos="2.89176 16.4" text="Global rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-ranking" pos="-1 -5" z-index="2" />
				<frame id="ComponentProfilePlayerInfo_frame-info-ranking-loaded" z-index="1">
					<label size="40 5" pos="1.28719 7.3" text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textcolor="6EFAA0" textsize="2"/>
					<label id="ComponentProfilePlayerInfo_label-ranking-position" size="30 5" pos="-0.19396 -1.1" class="ComponentProfilePlayerInfo_text-info" textcolor="6EFAA0" textsize="13"/>
					<label id="ComponentProfilePlayerInfo_label-ranking-category" size="40 5" pos="-2.99756 -17." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-general-trophies-next-zone"
						pos="-17.5 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-general-trophies-previous-zone"
						pos="17 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
				</frame>
			</frame>

			<frame
				id="ComponentProfilePlayerInfo_frame-info-campaign-ranking"
				class="component-navigation-item ComponentProfilePlayerInfo_focus-opacity-container ComponentProfilePlayerInfo_controller-info-pager"
				pos="-9.37291 -24.8"
				data-nav-group="navgroup-component-profileplayerinfo-main"
				data-nav-inputs="left;right;down;up"
				data-nav-targets="_;_;ComponentProfilePlayerInfo_button-back;ComponentProfilePlayerInfo_frame-info-ranking"
			>
				<frameinstance modelid="component-loadingspinner" id="ComponentProfilePlayerInfo_spinner-campaign" scale="0.8" />
				<frame>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-previous-campaign"
						pos="-17.5 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<frameinstance modelid="component-trackmania-button" id="ComponentProfilePlayerInfo_button-next-campaign"
						pos="17 0"
						data-size="7 7"
						data-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-imagefocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds"
						data-bgcolor="FFF"
						data-opacityunfocus=".6"
						data-focuscolor="FFF"
						data-halign="center" data-valign="center"
						class="component-navigation-item component-menusounds-item ComponentProfilePlayerInfo_focus-opacity-element"
						data-nav-group="navgroup-component-profileplayerinfo-mouse-only"
						data-nav-inputs="select"
						data-nav-targets="_"
						data-nav-zone="ComponentTrackmania_Button_quad-background"
						data-menusounds-selectsound="ArrowSelect"
						data-ComponentProfilePlayerInfo_opacity-focus="1"
						data-ComponentProfilePlayerInfo_opacity-unfocus="0.6"
					/>
					<label id="ComponentProfilePlayerInfo_label-campaign-name" size="40 5" pos="2.89176 16.4" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-top" size="40 5" pos="1.28719 7.3" text="|Rank|Top" class="ComponentProfilePlayerInfo_text-info" textsize="2" textfont="GameFontRegular" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-position" size="30 5" pos="-0.19396 -1.1" class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
					<label id="ComponentProfilePlayerInfo_label-campaign-ranking-zone" size="40 5" pos="-2.99756 -17." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" maxline="3" textfont="GameFontSemiBold"/>
				</frame>
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6" data-ComponentProfilePlayerInfo_opacity-focus="0.8" data-ComponentProfilePlayerInfo_opacity-unfocus="0.6" />
				<quad size="51.9568 46." class="ComponentProfilePlayerInfo_focus-opacity-element" image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Half_Contour.dds" colorize="6EFAA0" z-index="2" halign="center" valign="center" opacity="0" data-ComponentProfilePlayerInfo_opacity-focus="1" data-ComponentProfilePlayerInfo_opacity-unfocus="0" />
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-trophies" pos="42 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="|Profile|Trophies" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<quad id="ComponentProfilePlayerInfo_quad-highest-trophy" pos="0. 0." size="36 36" image="file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds" halign="center" valign="center" autoscale="0"/>
				<label id="ComponentProfilePlayerInfo_label-trophy-number" size="40 5" pos="-6.96492 -39.5" class="ComponentProfilePlayerInfo_text-info" textsize="13" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-royal" pos="89.5 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Royal rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerroyalvictories" id="ComponentProfilePlayerInfo_frame-royal-level" pos="0. 0." z-index="2" data-imagetype="2" />
				<label id="ComponentProfilePlayerInfo_label-royal-level" size="40 5" pos="-6.87675 -39." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="component-loadingspinner" z-index="1" id="ComponentProfilePlayerInfo_spinner-royal" />
			</frame>

			<frame id="ComponentProfilePlayerInfo_frame-info-ranked" pos="137 0">
				<label id="ComponentProfilePlayerInfo_label-title" size="40 5" pos="7.22941 41." text="Best rank" class="ComponentProfilePlayerInfo_text-info" textfont="GameFontRegular" textsize="2.5"/>
				<frameinstance modelid="component-playerrank" id="ComponentProfilePlayerInfo_frame-best-rank" pos="1.5 0." z-index="2" scale="1.8"/>
				<label id="ComponentProfilePlayerInfo_label-best-rank" size="40 5" pos="-6.34777 -36." class="ComponentProfilePlayerInfo_text-info" textsize="4" textcolor="6EFAA0"/>
				<label id="ComponentProfilePlayerInfo_label-best-rank-date" size="40 5" pos="-7.40573 -42." class="ComponentProfilePlayerInfo_text-info" textsize="2.5" textfont="GameFontSemiBold"/>
				<quad size="61. 96." image="file://Media/Manialinks/Nadeo/Trackmania/Menus/PageProfile/Menu_Profile_Full.dds" colorize="000514" z-index="-1" halign="center" valign="center" opacity="0.6"/>
				<frameinstance modelid="component-loadingspinner" z-index="1" id="ComponentProfilePlayerInfo_spinner-ranked" />
			</frame>
		</frame>
	</frame>

	<frame id="ComponentProfilePlayerInfo_frame-footer" pos="0 -73">
		<frameinstance modelid="component-button-icon-2" pos="-151.5 0" z-index="3" data-halign="right" data-size="8 8" data-bind="B" data-hideformouse="1" />
		<frameinstance
			id="ComponentProfilePlayerInfo_button-back"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button component-menusounds-item"
			pos="-151.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-align-center component-trackmania-expendable-button-style-size-expendable component-trackmania-expendable-button-style-page-back"
			data-max-width="60"
			data-nav-inputs="select;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-my-access"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-menusounds-selectsound="BackButtonSelect"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-my-access"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="20 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="My access"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-back;ComponentProfilePlayerInfo_button-update-zone"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-update-zone"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="Change region"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-my-access;ComponentProfilePlayerInfo_button-garage"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-garage"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="Garage"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-icon-image="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_CAR_01.dds"
			data-icon-colormode="1"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-update-zone;ComponentProfilePlayerInfo_button-first-party-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-first-party-profile"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="70 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="%1 profile$<$i$<$zUbisoft Connect$>$>"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-garage;ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="100 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="%1 profile$<$i$<$zUbisoft Connect$>$>"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left;right"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-first-party-profile;ComponentProfilePlayerInfo_button-report"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
		<frameinstance
			id="ComponentProfilePlayerInfo_button-report"
			modelid="component-cmgame-expendable-button"
			class="component-navigation-item ComponentProfilePlayerInfo_bottom-button"
			pos="124.5 0"
			z-index="2"
			data-styles="component-trackmania-expendable-button-style-secondary component-trackmania-expendable-button-style-size-expendable"
			data-text="|Verb|Report"
			data-max-width="70"
			data-halign="right"
			data-valign="center"
			data-nav-inputs="select;left"
			data-nav-targets="_;ComponentProfilePlayerInfo_button-ubisoft-connect-profile"
			data-nav-group="navgroup-component-profileplayerinfo-main"
			data-nav-zone="CMGame_ExpendableButton_quad-nav-zone"
			data-nav-locked="1"
			hidden="1"
		/>
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-profileplayerinfo -->

<stylesheet>
	<style class="text-semibold" halign="center" valign="center2" textfont="GameFontSemiBold" textprefix="$i$t" textcolor="FFFFFF"/>
	<style class="text-extrabold" halign="center" valign="center2" textfont="GameFontExtraBold" textprefix="$i$t" textcolor="FFFFFF"/>
</stylesheet>

<!-- Frame models -->
<framemodel id="framemodel-score-row">
	<quad id="quad-activation" size="54. 5." class="component-navigation-item-zone" opacity="0" scriptevents="1" z-index="10"/>
	<quad id="quad-bg" size="54. 5." bgcolor="FFFFFF" opacity="0." z-index="0"/>
	<label id="label-rank" class="text-semibold" pos="6. -2.75" size="5. 3." textfont="GameFontExtraBold" textsize="1." halign="right" z-index="5" />
	<frameinstance id="playername-name" z-index="5" modelid="component-cmgame-player-name" pos="7. -2.75" data-size="30. 3." data-halign="left" data-valign="center" data-textprefix="$t$i" data-textfont="GameFontSemiBold" data-textsize="1." />
	<label id="label-time" class="text-semibold" pos="53. -2.75" size="15. 3." textprefix="$i" textfont="GameFontSemiBold" textsize="1." halign="right" z-index="5" />
	<frameinstance id="loading-spinner-rank" modelid="component-loadingspinner" pos="4. -2.5" scale="0.25" z-index="5" />
</framemodel>

<!-- Pop-ups -->
<frame id="frame-profile" z-index="11" hidden="1">
	<frameinstance modelid="component-profileplayerinfo" data-enable-players-pager="0" data-enable-zone-selection="0" data-enable-my-access-info="0" data-enable-garage="0"/>
</frame>
<frameinstance
	id="popupmultichoice-rules" z-index="10"
	modelid="component-popupmultichoice"
	data-title="Welcome to the Cup of the Day"
	data-description="[{&quot;TextFitLabelEnabled&quot;:true,&quot;TextFontSize&quot;:2.5,&quot;TextFont&quot;:&quot;GameFontSemiBold&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;Race for 15 minutes on today&apos;s track. You will be able to join the knockout phase afterwards and earn even more trophies.\nYou can see your global rank among all servers on the left of your screen.&quot;,&quot;TextSize&quot;:[130,30],&quot;TextColor&quot;:[1,1,1]}]"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global" size="320 180" halign="center" valign="center" z-index="-2" hidden="1">
	<frame  id="COTDQualifications_Ranking" class="component-cmgame-uimodules-module" pos="-133. 0." scale="1." hidden="0" data-customizable-module-enabled="1" >
		<frame id="frame-content">
			<frameinstance
				id="button-hide" pos="-27. 32.5" z-index="3"
				modelid="component-trackmania-button"
				class="component-navigation-item"
				data-size="8 8"
				data-iconsize="8 8"
				data-bgcolor="000514"
				data-focuscolor="000514"
				data-iconcolortype="1"
				data-iconcolor="FFFFFF"
				data-iconfocuscolor="FFFFFF"
				data-icon="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT.dds"
				data-iconfocus="file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT.dds"
				data-opacityunfocus=".6"
				data-iconopacityunfocus=".3"
				data-halign="left" data-valign="bottom"
				data-nav-inputs="select;cancel"
				data-nav-targets="_;_"
				data-nav-group="navgroup-cotd-ranking-mouse-only"
				data-nav-zone="ComponentTrackmania_Button_quad-background"
				hidden="True"
			/>

			<!-- Hide the content of this frame with the 'button-hide' -->
			<frame id="frame-hideable-content">
				<quad id="quad_bg" size="54. 63." bgcolor="000514" halign="center" valign="center" opacity="0.6" z-index="0"/>
				<label id="label-title" pos="-4. 29.61" size="42. 8." class="text-extrabold" text="Cup of the Day" textsize="3.5" valign="top" z-index="3"/>
				<frame id="frame-clip-new-rank" pos="0. 22.6775" size="54. 63." halign="center" valign="center" z-index="3">
					<label id="label-new-rank" size="48.6 5." class="text-semibold" textsize="1.75" textcolor="6EFAA0" valign="top" hidden="1"/>
				</frame>
				<frameinstance id="buttonicon-rules" modelid="component-button-icon-2" pos="28.08 27.72" data-size="6 6" data-halign="left" data-valign="center" data-bind="action2" hidden="1" z-index="4"/>
				<frameinstance
					id="button-rules" pos="27. 31.5" z-index="4"
					modelid="component-trackmania-button"
					class="component-navigation-item"
					data-opacityunfocus="0.6"
					data-size="8. 8."
					data-labelsize="8. 8."
					data-bgcolor="000514"
					data-focuscolor="009B5F"
					data-textfont="GameFontExtraBold"
					data-textcolor="FFFFFF"
					data-textopacityunfocus="0.6"
					data-textitalicslope="0.1"
					data-textypos="-0.57"
					data-textsize="5"
					data-text="?"
					data-halign="right" data-valign="top"
					data-nav-inputs="select;cancel"
					data-nav-targets="_;_"
					data-nav-group="navgroup-cotd-ranking-mouse-only"
					data-nav-zone="ComponentTrackmania_Button_quad-background"
				/>
				<frame id="frame-clip-scores" pos="0. 23.5" size="54. 50." halign="center" valign="top" z-index="3">
					<frame id="frame-scores">

			<frameinstance
				id="button-score-0" pos="-27. 0."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-0;button-score-1"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-1" pos="-27. -5."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-0;button-score-2"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-2" pos="-27. -10."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-1;button-score-3"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-3" pos="-27. -15."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-2;button-score-4"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-4" pos="-27. -20."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-3;button-score-5"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-5" pos="-27. -25."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-4;button-score-6"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-6" pos="-27. -30."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-5;button-score-7"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-7" pos="-27. -35."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-6;button-score-8"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-8" pos="-27. -40."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-7;button-score-9"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

			<frameinstance
				id="button-score-9" pos="-27. -45."
				modelid="framemodel-score-row"
				class="component-navigation-item class-cotd-ranking-score"
				data-nav-inputs="select;cancel;action1;action2;up;down"
				data-nav-targets="_;_;_;_;button-score-8;button-score-9"
				data-nav-group="navgroup-cotd-ranking"
				data-nav-zone="quad-activation"
			/>

					</frame>
				</frame>
				<frameinstance id="frame-score-owner" modelid="framemodel-score-row" pos="-27. -26.5" z-index="3"/>
				<frame id="frame-controller-info" pos="4 -33.39" class="component-grid-container" z-index="5" hidden="1">

			<frame id="frame-info-0" class="component-grid-element" pos="-27. -2.5" data-grid-row="0">
				<frameinstance id="buttonicon-info" modelid="component-button-icon-2" data-size="6 6" data-halign="center" data-valign="center" data-bind="cancel"/>
				<label id="label-info" text="Back to race" pos="5 0" class="text-semibold" halign="left" valign="center2" size="48.6 10" textsize="2"/>
			</frame>

				</frame>
			</frame>
		</frame>
	</frame>
</frame>

<script><!--

// @Component start component-cmgame-uimodules
// /*

#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Component_CMGame_UIModules_Tools
#Include "Libs/Nadeo/CMGame/Modes/UIModules_Common.Script.txt" as Component_CMGame_UIModules_UIModules_Common

#Struct Component_CMGame_UIModules_K_Module {
	CMlControl Control;
	Boolean IsCustom;
	Component_CMGame_UIModules_UIModules_Common::K_ModuleProperties DefaultProperties;
}

// */
// @Component end component-cmgame-uimodules

// @Component start share-menu-navigation
// /*

#Include "Libs/Nadeo/CMGame/Menus/ShareMenuNavigation_ML.Script.txt" as ShareMenuNavigation_ShareMenuNavigation

// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

#Include "Libs/Nadeo/CMGame/Components/Navigation.Script.txt" as ComponentNavigation_ComponentNavigation

// */
// @Component end component-navigation

// @Component start component-loadingspinner
// /*

#Include "Libs/Nadeo/CMGame/Components/LoadingSpinner.Script.txt" as CMGame_LoadingSpinner

// */
// @Component end component-loadingspinner

// @Component start component-trackmania-button
// /*

#Include "Libs/Nadeo/CMGame/Components/Button.Script.txt" as Trackmania_Button

// */
// @Component end component-trackmania-button

// @Component start component-button-icon-2
// /*

#Include "Libs/Nadeo/CMGame/Components/ButtonIcon2.Script.txt" as ButtonIcon2_ButtonIcon2

// */
// @Component end component-button-icon-2

// @Component start component-checkbox
// /*

#Include "Libs/Nadeo/CMGame/Components/Checkbox.Script.txt" as Trackmania_Checkbox

// */
// @Component end component-checkbox

// @Component start component-cmgame-expendable-button
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableButtonBase.Script.txt" as CMGame_ExpendableButton

// */
// @Component end component-cmgame-expendable-button

// @Component start component-trackmania-expendable-button
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableButton.Script.txt" as CMGame_ExpendableButton

// */
// @Component end component-trackmania-expendable-button

// @Component start component-trackmania-pop-up-background-2
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpBackground2.Script.txt" as Trackmania_PopUpBackground2

// */
// @Component end component-trackmania-pop-up-background-2

// @Component start menu-libs-scroll
// /*

#Include "Libs/Nadeo/CMGame/Components/Scroll.Script.txt" as CMGame_Scroll

// */
// @Component end menu-libs-scroll

// @Component start component-cmgame-selector
// /*

#Include "Libs/Nadeo/CMGame/Components/Selector.Script.txt" as CMGame_Selector

// */
// @Component end component-cmgame-selector

// @Component start component-textfield
// /*

#Include "Libs/Nadeo/CMGame/Components/TextField.Script.txt" as CMGame_TextField

// */
// @Component end component-textfield

// @Component start component-popupmultichoice
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpMultiChoice.Script.txt" as Trackmania_PopUpMultiChoice

// */
// @Component end component-popupmultichoice

// @Component start component-cmgame-menusounds
// /*

#Include "Libs/Nadeo/CMGame/Components/MenuSounds.Script.txt" as CMGame_MenuSounds

// */
// @Component end component-cmgame-menusounds

// @Component start component-buttonslist2
// /*

#Include "TextLib" as ComponentButtonsList2_TL
#Include "MathLib" as ComponentButtonsList2_ML
#Include "ColorLib" as ComponentButtonsList2_CL
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentButtonsList2_Tools

#Struct ComponentButtonsList2_K_Data {
	CMlFrame Frame_Align;
	CMlFrame[] Frames_Button;
	Text[] Binds;
	Text[] Actions;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	Vec3 Color;
	Real ButtonMaxWidth;
	Real Width;
	Text TextPrefix;
	Text TextFont;
	Real ButtonsSpacing;
	Integer[] DirtyProperties;
}

#Const ComponentButtonsList2_C_Property_Buttons 0
#Const ComponentButtonsList2_C_Property_HAlign 1
#Const ComponentButtonsList2_C_Property_VAlign 2
#Const ComponentButtonsList2_C_Property_Color 3
#Const ComponentButtonsList2_C_Property_ButtonMaxWidth 4
#Const ComponentButtonsList2_C_Property_TextPrefix 5
#Const ComponentButtonsList2_C_Property_TextFont 6
#Const ComponentButtonsList2_C_Property_ButtonsSpacing 7

// */
// @Component end component-buttonslist2

// @Component start component-menu-button-list
// /*

#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentMenuButtonList_Tools

// */
// @Component end component-menu-button-list

// @Component start structures-club
// /*

#Include "TextLib" as LibStructuresClub_TL

#Struct LibStructuresClub_K_Member { Text AccountId; Text DisplayName; Text Role; Integer JoinDate; Boolean VIP; }
#Struct LibStructuresClub_K_Activity { Integer Id; Integer ClubId; Text Name; Text Type; Integer ExternalId; Integer Position; Boolean Public; Boolean Active; Text MediaUrl; Boolean Password; Boolean Featured; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_Club { Integer Id; Text Name; Text Tag; Text Description; Text AuthorAccountId; Integer CreationTimestamp; Integer EditionTimestamp; Text IconUrl; Text LogoUrl; Text DecalUrl; Text BgUrl; Text VerticalUrl; Text DecoImageUrl_DecalSponsor4x1; Text DecoImageUrl_Screen16x9; Text DecoImageUrl_Screen8x1; Text DecoImageUrl_Screen16x1; Text PrivacyState; Integer PopularityLevel; Boolean IsVerified; LibStructuresClub_K_Member[][Text][Text] VIPListOnMap; LibStructuresClub_K_Activity FeaturedActivity; }
#Struct LibStructuresClub_K_ScriptSetting { Text Key; Text Value; Text Type; }
#Struct LibStructuresClub_K_ServerInfo { Text JoinLink; Integer PlayerCount; Text CurrentMapUid; Boolean IsStarting; }
#Struct LibStructuresClub_K_Room { Integer Id; Integer RoomId; Integer ClubId; Text ClubName; Integer ActivityId; Boolean IsHostedByNadeo; Text PlayerServerLogin; Text ServerAccountId; Text Name; Text Region; Integer MaxPlayers; Text ScriptName; Integer CampaignId; Text[] MapUids; Text MediaUrl; Integer PopularityLevel; Integer CreationTimestamp; Boolean Scalable; Boolean HasPassword; LibStructuresClub_K_ScriptSetting[] ScriptSettings; LibStructuresClub_K_ServerInfo ServerInfo; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_BucketItem { Text ItemId; Integer Position; Text Description; Text[] MediaUrls; }
#Struct LibStructuresClub_K_BucketActivity { Integer Id; Text Type; Text Name; Text ClubName; Text MediaUrl; Integer ClubId; Integer CreationTimestamp; LibStructuresClub_K_BucketItem[] BucketItemList; Integer BucketItemCount; Integer PopularityLevel; Integer PopularityValue; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibStructuresClub_K_Skin { Text Id; Text Type; Text Name; Text DisplayName; Text CreatorAccountId; Text CreatorDisplayName; Boolean CreatorIsFirstPartyDisplayName; Text FileName; Text FileUrl; Text ThumbnailUrl; Integer TimeStamp; Boolean IsFavorite; Boolean IsUsed; Text PrestigeOptions; Text CharacterOptions; }
#Struct LibStructuresClub_K_News { Integer Id; Text Headline; Text Body; Text MediaUrl; Integer ClubId; Text Name; Integer CreationTimestamp; }
#Struct LibStructuresClub_K_MapReview { LibStructuresClub_K_Activity Activity; Text ClubName; Integer TimeLimit; Boolean Scalable; Integer MaxPlayer; Boolean AllowVoteSkipMap; Boolean Public; Text Game2WebUrl; Boolean SubmissionLimitation; Integer PopularityValue; Integer PopularityValueBonus; Integer PopularityLevel; Integer PlayerCount; Integer SubmittedMapCount; Integer CreationTimestamp; }
#Struct LibStructuresClub_K_Advertisement { Text AdUid; Text Name; Text ExternalUrl; Text[Text] MediaUrl; Text CreatorAccountId; Text LatestEditorAccountId; }

#Const LibStructuresClub_C_ClubNullId 0
#Const LibStructuresClub_C_AccountNullId ""
#Const LibStructuresClub_C_ActivityNullId 0
#Const LibStructuresClub_C_ClubRoleNone ""
#Const LibStructuresClub_C_RoomNullId 0

#Const LibStructuresClub_C_ClubActivity_Campaign "campaign"
#Const LibStructuresClub_C_ClubActivity_Room "room"
#Const LibStructuresClub_C_ClubActivity_MapUpload "map-upload"
#Const LibStructuresClub_C_ClubActivity_MapReview "map-review"
#Const LibStructuresClub_C_ClubActivity_SkinUpload "skin-upload"
#Const LibStructuresClub_C_ClubActivity_ItemUpload "item-upload"
#Const LibStructuresClub_C_ClubActivity_Competition "competition"
#Const LibStructuresClub_C_ClubActivity_News "news"
#Const LibStructuresClub_C_ClubActivity_RankingOfficial "ranking-official"
#Const LibStructuresClub_C_ClubActivity_RankingDaily "ranking-daily"
#Const LibStructuresClub_C_ClubActivity_RankingClub "ranking-club"
#Const LibStructuresClub_C_ClubActivity_Ad "ad"
#Const LibStructuresClub_C_ClubActivity_Team "team"

#Const LibStructuresClub_C_ClubActivity_DisplayNames ["campaign"=>"Campaign", "room"=>"Room", "map-review"=>"Track review", "map-upload"=>"Track uploads", "skin-upload"=>"Skin uploads", "item-upload"=>"Item collection", "news"=>"News", "competition"=>"Competition", "ranking-official"=>"Official rankings", "ranking-daily"=>"Daily rankings", "ranking-club"=>"Rankings", "ad"=>"|ActivityType|Advertisement", "team"=>"|ActivityType|Team"]
#Const LibStructuresClub_C_ClubActivity_FeaturedAd ["campaign"=>"Play the new '$<%1$>' campaign!", "room"=>"Play online in the new '$<%1$>' room!", "map-review"=>"Review tracks in '$<%1$>'!", "map-upload"=>"Let's see the new '$<%1$>' tracks!", "skin-upload"=>"Let's see the new '$<%1$>' skins!", "item-upload"=>"Check the new '$<%1$>' collection!", "news"=>"Check this news '$<%1$>'!", "competition"=>"Participate in the new '$<%1$>' competition!", "ranking-official"=>"Go see '$<%1$>' ranking!", "ranking-daily"=>"Go see '$<%1$>' ranking!", "ranking-club"=>"Go see '$<%1$>' ranking!", "ad"=>"Check the new '$<%1$>'!"]

#Const LibStructuresClub_C_ClubState_Public "public"
#Const LibStructuresClub_C_ClubState_PrivateOpen "private-open"
#Const LibStructuresClub_C_ClubState_PrivateClosed "private-closed"

#Const LibStructuresClub_C_MediaType_Icon "icon"
#Const LibStructuresClub_C_MediaType_Decal "decal"
#Const LibStructuresClub_C_MediaType_Bg "background"
#Const LibStructuresClub_C_MediaType_Vertical "vertical"
#Const LibStructuresClub_C_MediaType_DecalSponsor "decal_sponsor_4x1"
#Const LibStructuresClub_C_MediaType_Screen16x9 "screen_16x9"
#Const LibStructuresClub_C_MediaType_Screen8x1 "screen_8x1"
#Const LibStructuresClub_C_MediaType_Screen16x1 "screen_16x1"
#Const LibStructuresClub_C_MediaType_Translations ["icon"=>"|ImageType|Icon", "decal"=>"|ImageType|Decal", "background"=>"|ImageType|Background", "vertical"=>"|ImageType|Vertical", "decal_sponsor_4x1"=>"|ImageType|Decal sponsor", "screen_16x9"=>"|ImageType|Big screen", "screen_8x1"=>"|ImageType|Screen 8x1", "screen_16x1"=>"|ImageType|Screen 16x1"]
#Const LibStructuresClub_C_ClubThemes_Path "Media/Manialinks/Nadeo/CMGame/OfficialThemes"
#Const LibStructuresClub_C_ClubThemes_DisplayNames ["animals"=>"|Club Theme|Animals", "food"=>"|Club Theme|Food", "fullSpeed"=>"|Club Theme|Full speed", "manga"=>"|Club Theme|Manga", "racing"=>"|Club Theme|Racing", "space"=>"|Club Theme|Space", "skull&bones1"=>"Long Live Piracy", "skull&bones2"=>"Raging Tides", "industrialRevolution"=>"|Club Theme|Industrial Revolution", "valhalla"=>"Valhalla", "mirage"=>"Mirage", "rabbids"=>"Rabbids", "hungry"=>"Hungry", "honor"=>"Honor", "crew"=>"Crew", "division"=>"Division", "justDance"=>"Just Dance", "laserhawk"=>"Laserhawk"]
#Const LibStructuresClub_C_ClubThemes_Folders ["animals"=>"/Animals", "food"=>"/Food", "fullSpeed"=>"/FullSpeed", "manga"=>"/Manga", "racing"=>"/Racing", "space"=>"/Space", "skull&bones1"=>"/LongLivePiracy", "skull&bones2"=>"/RagingTides", "industrialRevolution"=>"/IndustrialRevolution", "valhalla"=>"/Valhalla", "mirage"=>"/Mirage", "rabbids"=>"/Rabbids", "hungry"=>"/Hungry", "honor"=>"/Honor", "crew"=>"/Crew", "division"=>"/Division", "justDance"=>"/JustDance", "laserhawk"=>"/Laserhawk"]
#Const LibStructuresClub_C_ClubThemes_Files ["decal"=>"/1x1.dds", "screen_8x1"=>"/8x1.dds", "screen_16x1"=>"/16x1.dds", "screen_16x9"=>"/64x41.dds", "background"=>"/Background.dds", "icon"=>"/Icon.dds", "vertical"=>"/Vertical.dds"]

#Const LibStructuresClub_C_ChoiceList_AddActivity ["campaign"=>"Campaign", "room"=>"Room", "skin-upload"=>"Skin uploads", "map-upload"=>"Track uploads", "map-review"=>"Track review", "news"=>"News", "competition"=>"%1 Competition", "ranking-club"=>"Rankings", "item-upload"=>"Item collection", "ad"=>"%1 |ActivityType|Advertisement", "team"=>"%1 |ActivityType|Team"]

#Const LibStructuresClub_C_CreateAdvertisement_Link "/clubs/{ClubId}/maniapubs/create"
#Const LibStructuresClub_C_CreateTeam_Link "/clubs/{ClubId}/teams/create"
#Const LibStructuresClub_C_DisplayTeam_Link "/clubs/{ClubId}/teams/{ActivityId}"
#Const LibStructuresClub_C_ActivityLink_ToReplace_ClubId "{ClubId}"
#Const LibStructuresClub_C_ActivityLink_ToReplace_ActivityId "{ActivityId}"
#Const LibStructuresClub_C_CreateCompetition_Link "/create"

// */
// @Component end structures-club

// @Component start structures-matchmaking
// /*

#Struct LibStructuresMatchmaking_K_Heartbeat { Text Status; Integer CreationDate; Integer MatchmakingWaitingTime; Text MatchLiveId; Integer BanEndDate; }
#Struct LibStructuresMatchmaking_K_Penalty { Integer CreationDate; Integer Points; }
#Struct LibStructuresMatchmaking_K_Inactivity { Boolean InactivityPenaltyEnabled; Real ImmunityDays; Integer Penalty; }
#Struct LibStructuresMatchmaking_K_PlayerStatus { LibStructuresMatchmaking_K_Heartbeat CurrentHeartbeat; LibStructuresMatchmaking_K_Penalty Penalty; LibStructuresMatchmaking_K_Inactivity Inactivity; Text CurrentDivision; Integer CurrentProgression; Text MatchmakingStatus; Integer MatchGenerationTimer; }
#Struct LibStructuresMatchmaking_K_PlayerRank { Integer MatchmakingId; Text AccountId; Integer Score; }
#Struct LibStructuresMatchmaking_K_PlayerProgression { Text AccountId; Text CurrentDivision; Integer CurrentProgression; }
#Struct LibStructuresMatchmaking_K_MatchParticipants { Boolean IsCompleted; LibStructuresMatchmaking_K_PlayerProgression[Text] Participants; }
#Struct LibStructuresMatchmaking_K_TeamMember { Text AccountId; Text Name; Text ClubTag; Text FlagUrl; Integer Score; Integer BestTime; Boolean IsFakeUser; }
#Struct LibStructuresMatchmaking_K_Division { Text Id; Integer Position; Text RuleType; Integer MinimumPoints; Integer MaximumPoints; Integer MinimumRank; }
#Struct LibStructuresMatchmaking_K_Mode { Text Id; Text Name; Text Info; Text QueueName; Integer MusicSection; }
#Struct LibStructuresMatchmaking_K_Queue { Text Id; Text Path; Text Name; }
#Struct LibStructuresMatchmaking_K_SuperRoyal { Integer StartsIn; Text Status; Text MatchLiveId; }
#Struct LibStructuresMatchmaking_K_SuperRoyalStatistics { Integer BronzeVictories; Integer SilverVictories; Integer GoldVictories; Integer MasterVictories; }
#Struct LibStructuresMatchmaking_K_PlayerStatistics { Integer MatchmakingId; Text AccountId; Text CurrentDivision; Integer CurrentProgression; Text BestDivision; Integer BestProgressionDate; Integer BestProgression; Text PreviousDivision; Integer PreviousProgression; Integer PreviousProgressionDate; Integer MVPCount; Integer Victories; Integer PlayedMatches; }
#Struct LibStructuresMatchmaking_K_PlayerLeaderboard { Text AccountId; Integer Rank; Integer Score; }

#Const LibStructuresMatchmaking_C_Status_NotInQueue ""
#Const LibStructuresMatchmaking_C_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_Status_SkillGapCanceled "skill_gap_canceled"
#Const LibStructuresMatchmaking_C_Status_DifferentCodeCanceled "different_code_canceled"
#Const LibStructuresMatchmaking_C_Status_CrossplayCanceled "crossplay_canceled"
#Const LibStructuresMatchmaking_C_Status_MaintenanceCanceled "maintenance_canceled"
#Const LibStructuresMatchmaking_C_Status_Queued "queued"
#Const LibStructuresMatchmaking_C_Status_MatchFound "match_found"
#Const LibStructuresMatchmaking_C_Status_MatchAccepted "match_accepted"
#Const LibStructuresMatchmaking_C_Status_MatchReady "match_ready"
#Const LibStructuresMatchmaking_C_Status_Canceled "canceled"
#Const LibStructuresMatchmaking_C_Status_Banned "banned"
#Const LibStructuresMatchmaking_C_Status_UnderMaintenance "matchmaking_under_maintenance"
#Const LibStructuresMatchmaking_C_Status_OldGameVersion "old_game_version"
#Const LibStructuresMatchmaking_C_Status_Unknown "Unknown"

#Const LibStructuresMatchmaking_C_Matchmaking_Status_Enabled "enabled"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Under_Maintenance "under_maintenance"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Too_Many_Matches "too_many_matches"

#Const LibStructuresMatchmaking_C_SuperRoyal_Status_NotRegistered "not_registered"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Qualified "qualified"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Eliminated "eliminated"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Over "over"

#Const LibStructuresMatchmaking_C_RuleType_Points "points_range"
#Const LibStructuresMatchmaking_C_RuleType_MinPointsAndRank "minimum_rank_and_points"
#Const LibStructuresMatchmaking_C_RuleType_MinPoints "minimum_points"

#Const LibStructuresMatchmaking_C_MatchmakingQueueId_None "none"
#Const LibStructuresMatchmaking_C_MatchmakingQueueId_Debug "dev-ranked"

#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_Debug "debug"

#Const LibStructuresMatchmaking_C_MatchmakingQueueName_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueueName_Debug "Official debug"

#Const LibStructuresMatchmaking_C_Status_PartyCode_NotFound 404
#Const LibStructuresMatchmaking_C_Status_PartyCode_IncompatiblePlatform 500

#Const LibStructuresMatchmaking_C_MatchmakingQueue_None LibStructuresMatchmaking_K_Queue {
	Id = "none",
	Path = "",
	Name = ""
}
#Const LibStructuresMatchmaking_C_MatchmakingQueue_Debug LibStructuresMatchmaking_K_Queue {
	Id = "dev-ranked",
	Path = "debug",
	Name = "Official debug"
}

#Const LibStructuresMatchmaking_C_Mode_Null ""
#Const LibStructuresMatchmaking_C_Mode_Teams3v3 "Teams 3v3"
#Const LibStructuresMatchmaking_C_Mode_Royal "Royal"
#Const LibStructuresMatchmaking_C_Mode_SuperRoyal "SuperRoyal"

#Const LibStructuresMatchmaking_C_Ranked_QueueId "ranked"
#Const LibStructuresMatchmaking_C_Royal_QueueId "royal"
#Const LibStructuresMatchmaking_C_SuperRoyal_QueueId "super-royal"

#Const LibStructuresMatchmaking_C_Modes [
	"Teams 3v3" => LibStructuresMatchmaking_K_Mode {
		Id = "Teams 3v3",
		Name = "Teams 3v3",
		Info = """The players are divided into two competing teams: Blue versus Red.
As the match progresses, players drive several times on the same track. Each time they earn points for their team according to their position at the finish. The distribution of points is adjusted according to the number of players starting the race. At the end of each race, the points of the players on each team are added up and the team with the most points wins the race. The first team to win 5 races wins the match.""",
		QueueName = "ranked",
		MusicSection = 1
	},
	"Royal" => LibStructuresMatchmaking_K_Mode {
		Id = "Royal",
		Name = "Royal",
		Info = """%1 teams of %2 players compete for the win.
The game is played in several rounds. Each round, the first teams to finish the race are qualified for the next round while the last ones are eliminated. After a few rounds, only %3 teams will remain. The team that wins this last race wins the match.2034""",
		QueueName = "royal",
		MusicSection = 2
	},
	"SuperRoyal" => LibStructuresMatchmaking_K_Mode {
		Id = "SuperRoyal",
		Name = "SuperRoyal",
		Info = "",
		QueueName = "super-royal",
		MusicSection = 2
	}
]

// */
// @Component end structures-matchmaking

// @Component start lib-user-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/UserStore_ML.Script.txt" as Trackmania_UserStore

// */
// @Component end lib-user-store

// @Component start lib-http-struct
// /*

#Struct LibHttpStruct_K_HttpMedia { Text buttonBackgroundUrl; Text buttonForegroundUrl; Text decalUrl; Text popUpBackgroundUrl; Text popUpImageUrl; Text liveButtonBackgroundUrl; Text liveButtonForegroundUrl; }
#Struct LibHttpStruct_K_HttpMap { Integer id; Integer position; Text mapUid; }
#Struct LibHttpStruct_K_HttpCampaign { Integer id; Text seasonUid; Text name; Integer useCase; Integer clubId; Integer year; Integer week; Integer day; Integer monthYear; Integer month; Integer monthDay; Integer startTimestamp; Integer endTimestamp; Integer rankingSentTimestamp; Integer publicationTimestamp; Integer editionTimestamp; LibHttpStruct_K_HttpMap[] playlist; }
#Struct LibHttpStruct_K_HttpDailyMap { Integer campaignId; Text mapUid; Integer day; Integer monthDay; Text seasonUid; Integer startTimestamp; Integer endTimestamp; Integer relativeStart; Integer relativeEnd; }
#Struct LibHttpStruct_K_HttpMonthlyCampaign { Integer year; Integer month; Integer lastDay; LibHttpStruct_K_HttpDailyMap[] days; LibHttpStruct_K_HttpMedia media; }

// */
// @Component end lib-http-struct

// @Component start lib-campaign-struct
// /*

#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as LibCampaignStruct_Config
#Include "Libs/Nadeo/TMGame/Utils/Constants.Script.txt" as LibCampaignStruct_TM_Const
#Include "Libs/Nadeo/Trackmania/MainMenu/Constants.Script.txt" as LibCampaignStruct_Const
#Include "Libs/Nadeo/Trackmania/MainMenu/TitleControl.Script.txt" as LibCampaignStruct_TitleControl
#Include "TextLib" as LibCampaignStruct_TL
#Include "TimeLib" as LibCampaignStruct_TiL

#Const LibCampaignStruct_TM_Const::C_ScoreTextOptions_Null as LibCampaignStruct_C_ScoreTextOptions_Null

#Const LibCampaignStruct_C_CampaignType_None -1
#Const LibCampaignStruct_C_CampaignType_Quarterly 0
#Const LibCampaignStruct_C_CampaignType_Monthly 1
#Const LibCampaignStruct_C_CampaignType_WeeklyShorts 5
#Const LibCampaignStruct_C_CampaignType_Club 2
#Const LibCampaignStruct_C_CampaignType_Royal 3

#Const LibCampaignStruct_C_CampaignType_ContextNames [-1=>"Unknown", 0=>"Quarterly", 1=>"Monthly", 2=>"Club", 3=>"Royal", 5=>"Weekly shorts"]

#Const LibCampaignStruct_C_Campaign_NullId 0
#Const LibCampaignStruct_C_MonthlyCampaign_NullId 0

#Const LibCampaignStruct_C_MapsByCategory 5

#Const LibCampaignStruct_C_LoadStatus_NotLoaded 0
#Const LibCampaignStruct_C_LoadStatus_Loaded 1
#Const LibCampaignStruct_C_LoadStatus_Error 2

#Const LibCampaignStruct_C_Season_Names ["Winter"=>"|Season|Winter", "Spring"=>"|Season|Spring", "Summer"=>"|Season|Summer", "Fall"=>"|Season|Fall"]

#Const LibCampaignStruct_C_CategoryWhite 0
#Const LibCampaignStruct_C_CategoryGreen 1
#Const LibCampaignStruct_C_CategoryBlue 2
#Const LibCampaignStruct_C_CategoryRed 3
#Const LibCampaignStruct_C_CategoryBlack 4

#Const LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSection 10
#Const LibCampaignStruct_C_MinSilverMedalsToPlayRedSection 15
#Const LibCampaignStruct_C_MinGoldMedalsToPlayBlackSection 20

#Const LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSectionDebug 1
#Const LibCampaignStruct_C_MinSilverMedalsToPlayRedSectionDebug 2
#Const LibCampaignStruct_C_MinGoldMedalsToPlayBlackSectionDebug 3

#Const LibCampaignStruct_C_CategoriesToMedalsNames [2=>"Bronze", 3=>"Silver", 4=>"Gold"]

#Struct LibCampaignStruct_TM_Const::K_ScoreTextOptions as LibCampaignStruct_K_ScoreTextOptions

#Struct LibCampaignStruct_K_Top { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Text SP; }
#Struct LibCampaignStruct_K_TopScore { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Integer Score; }
#Struct LibCampaignStruct_K_TopRanking { Text ZoneName; LibCampaignStruct_K_Top[] Tops; }
#Struct LibCampaignStruct_K_MapTopRanking { Text ZoneName; LibCampaignStruct_K_TopScore[] Tops; }
#Struct LibCampaignStruct_K_PlayerCloseToMedal { Text Medal; Text AccountId; Text ZoneId; Text ZoneName; Integer Score; }
#Struct LibCampaignStruct_K_Ranking { Text ZoneId; Text ZoneName; Integer Position; Integer Length; }
#Struct LibCampaignStruct_K_CampaignRanking { LibCampaignStruct_K_Ranking[] Rankings; Text SP; }
#Struct LibCampaignStruct_K_Map { Integer Position; Text Uid; Text Name; Text Type; Text Style; Text AuthorLogin; Text AuthorDisplayName; Boolean AuthorIsFirstPartyDisplayName; Text SubmitterAccountId; Integer AuthorTime; Integer GoldTime; Integer SilverTime; Integer BronzeTime; Integer NbLaps; Text LocalFileName; Text DownloadUrl; Text ThumbnailUrl; Integer UploadTimestamp; Integer Score; Integer Points; Integer RespawnCount; Integer[Text] ScoreBySeason; LibCampaignStruct_K_Ranking[] Rankings; Integer[Integer] ClubRankings; LibCampaignStruct_K_MapTopRanking[] TopRankings; LibCampaignStruct_K_TopScore[][Integer] ClubTopRankings; LibCampaignStruct_K_TopScore[][Text] SurroundingRankings; LibCampaignStruct_K_TopScore[][Text] RankingLevels; Integer UpdateTime_Rankings; Integer[Integer] UpdateTime_ClubRankings; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer UpdateTime_SurroundingRankings; Integer UpdateTime_RankingLevels; Integer Medal; Integer Top; Text Zone; Boolean IsPlayable; Boolean IsFavorite; Text CollectionName; Boolean CreatedWithSimpleEditor; Boolean CreatedWithGamepadEditor; }
#Struct LibCampaignStruct_K_Media { Text ButtonBackgroundUrl; Text ButtonForegroundUrl; Text DecalUrl; Text PopUpBackgroundUrl; Text PopUpImageUrl; Text LiveButtonBackgroundUrl; Text LiveButtonForegroundUrl; }
#Struct LibCampaignStruct_K_Campaign { Integer Id; Text Name; Text SeasonUid; Integer ActivityId; Integer Type; Integer Day; Integer Week; Integer Month; Integer MonthDay; Integer MonthYear; Integer Year; Integer SeasonName; LibStructuresClub_K_Club Club; Boolean Published; Boolean IsSeasonLive; Boolean IsLoaded; Boolean IsFetched; Boolean FailedToGetMapUrl; Boolean IsPrivate; LibCampaignStruct_K_Map[] Playlist; LibCampaignStruct_K_CampaignRanking CampaignRanking; LibCampaignStruct_K_TopRanking[] TopRankings; LibCampaignStruct_K_Top[][Integer] ClubTopRankings; LibCampaignStruct_K_Top[Integer] ClubPlayerRanking; Integer UpdateTime_CampaignRanking; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer[Integer] UpdateTime_ClubPlayerRanking; LibCampaignStruct_K_Media Media; Integer PopularityLevel; Boolean ClubOfficialTrophiesEnabled; Integer StartTimestamp; Integer EndTimestamp; Integer EditionTimestamp; Integer RankingSentTimestamp; Integer PublicationTimestamp; Text CreatorAccountId; Text LatestEditorAccountId; }
#Struct LibCampaignStruct_K_DailyMap { Integer CampaignId; Text SeasonId; Integer Day; Integer MonthDay; LibCampaignStruct_K_Map Map; Integer StartTimestamp; Integer EndTimestamp; Integer RelativeStart; Integer RelativeEnd; Integer RelativeNow; Integer LoadStatus; }
#Struct LibCampaignStruct_K_MonthlyCampaign { Integer Id; Integer Year; Integer Month; Integer LastDay; LibCampaignStruct_K_DailyMap[Integer] DailyMaps; LibCampaignStruct_K_Media Media; Boolean IsLoaded; Boolean IsLive; }
#Struct LibCampaignStruct_K_CampaignName { Boolean IsValid; Text Season; Text Year; Text Name; Text TranslatedName; }

// */
// @Component end lib-campaign-struct

// @Component start lib-campaign-store
// /*

#Include "Libs/Nadeo/Trackmania/Stores/CampaignStore_ML.Script.txt" as Trackmania_CampaignStore

// */
// @Component end lib-campaign-store

// @Component start component-playerroyalvictories
// /*

#Include "Libs/Nadeo/Trackmania/Components/PlayerRoyalVictories.Script.txt" as Trackmania_PlayerRoyalVictories

// */
// @Component end component-playerroyalvictories

// @Component start component-playerrank
// /*

#Include "MathLib" as ComponentPlayerRank_ML

#Const ComponentPlayerRank_C_Rank_Icons [1=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B1.dds", 2=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B2.dds", 3=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/B3.dds", 4=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S1.dds", 5=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S2.dds", 6=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/S3.dds", 7=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G1.dds", 8=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G2.dds", 9=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/G3.dds", 10=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M1.dds", 11=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M2.dds", 12=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/M3.dds", 13=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/TM.dds", 14=>"file://Media/Manialinks/Nadeo/Trackmania/Menus/Icons/Matchmaking_Ranks/TM.dds"]
#Const ComponentPlayerRank_C_RankAnim_Delay 500
#Const ComponentPlayerRank_C_RankAnim_Duration 500


// */
// @Component end component-playerrank

// @Component start component-cmgame-expendable-asset
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableAssetBase.Script.txt" as CMGame_ExpendableAsset

// */
// @Component end component-cmgame-expendable-asset

// @Component start component-trackmania-expendable-asset
// /*

#Include "Libs/Nadeo/CMGame/Components/ExpendableAsset.Script.txt" as CMGame_ExpendableAsset

// */
// @Component end component-trackmania-expendable-asset

// @Component start component-transition
// /*

#Include "Libs/Nadeo/CMGame/Components/Transition.Script.txt" as CMGame_Transition

// */
// @Component end component-transition

// @Component start component-navigationtabs
// /*

#Include "Libs/Nadeo/Trackmania/Components/NavigationTabs.Script.txt" as Trackmania_NavigationTabs

// */
// @Component end component-navigationtabs

// @Component start component-form-select
// /*

#Include "Libs/Nadeo/CMGame/Components/FormSelect.Script.txt" as CMGame_FormSelect

// */
// @Component end component-form-select

// @Component start component-popupreportsystem
// /*

#Include "Libs/Nadeo/Trackmania/Components/PopUpReportSystem.Script.txt" as ComponentPopUpReportSystem

// */
// @Component end component-popupreportsystem

// @Component start component-cmgame-player-name
// /*

#Include "Libs/Nadeo/CMGame/Components/PlayerName.Script.txt" as CMGame_PlayerName

// */
// @Component end component-cmgame-player-name

// @Component start component-profileplayerinfo
// /*

#Include "TextLib" as ComponentProfilePlayerInfo_TL
#Include "MathLib" as ComponentProfilePlayerInfo_ML
#Include "ColorLib" as ComponentProfilePlayerInfo_CL
#Include "TimeLib" as ComponentProfilePlayerInfo_TiL
#Include "Libs/Nadeo/CMGame/Utils/Privileges.Script.txt" as ComponentProfilePlayerInfo_Privileges
#Include "Libs/Nadeo/CMGame/Utils/Http.Script.txt" as ComponentProfilePlayerInfo_Http
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as ComponentProfilePlayerInfo_Task
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as ComponentProfilePlayerInfo_Platform
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as ComponentProfilePlayerInfo_MainUser
#Include "Libs/Nadeo/CMGame/Utils/AudioManager_ML.Script.txt" as ComponentProfilePlayerInfo_AudioManager
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as ComponentProfilePlayerInfo_Tools
#Include "Libs/Nadeo/CMGame/Components/Pager2.Script.txt" as ComponentProfilePlayerInfo_Pager
#Include "Libs/Nadeo/CMGame/Utils/MenuSceneManager.Script.txt" as ComponentProfilePlayerInfo_MenuSceneManager
#Include "Libs/Nadeo/CMGame/Modes/Bot.Script.txt" as ComponentProfilePlayerInfo_Bot
#Include "Libs/Nadeo/Trackmania/API/LeaderboardAPI.Script.txt" as ComponentProfilePlayerInfo_LeaderboardAPI
#Include "Libs/Nadeo/Trackmania/API/MatchmakingAPI.Script.txt" as ComponentProfilePlayerInfo_MatchmakingAPI
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ControllerInfo_ML.Script.txt" as ComponentProfilePlayerInfo_ControllerInfo
#Include "Libs/Nadeo/Trackmania/MainMenu/Overlays/ReportSystem.Script.txt" as ComponentProfilePlayerInfo_ReportSystem
#Include "Libs/Nadeo/CMGame/Utils/Config.Script.txt" as ComponentProfilePlayerInfo_Config
#Include "Libs/Nadeo/Trackmania/Structures/PrestigeStruct.Script.txt" as ComponentProfilePlayerInfo_PrestigeStruct
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ComponentProfilePlayerInfo_ReportStruct

#Struct ComponentProfilePlayerInfo_K_Controls {
	CMlFrame Frame_Global;
	CMlQuad Quad_PlayerCardFlag;
	CMlFrame PlayerName_PlayerCardName;
	CMlFrame Button_MyAccess;
	CMlFrame Button_UpdateZone;
	CMlFrame Button_NextPlayer;
	CMlFrame Button_PrevPlayer;
	CMlFrame ButtonIcon_PrevPlayer;
	CMlFrame ButtonIcon_NextPlayer;
	CMlLabel Label_DisplayHistory;
	CMlLabel Label_TrophiesGlobalRankingPosition;
	CMlLabel Label_TrophiesGlobalRankingZone;
	CMlLabel Label_TrophiesPoints;
	CMlLabel Label_TrophiesPointsText;
	CMlFrame Button_NextZone;
	CMlFrame Button_PrevZone;
	CMlFrame Frame_Trophies;
	CMlLabel Label_TrophiesError;
	CMlFrame Frame_TrophiesLoaded;
	CMlFrame Frame_TrophiesHistory;
	CMlLabel Label_TrophyHistory;
	CMlFrame Spinner_TrophiesHistory;
	CMlFrame Scroll_TrophiesHistory;
	CMlFrame Frame_InfoRankingLoaded;
	CMlFrame Spinner_Trophies;
	CMlFrame Spinner_Ranking;
	CMlFrame Spinner_Campaign;
	CMlFrame Spinner_Ranked;
	CMlFrame Spinner_Royal;
	CMlFrame Frame_TrophiesList;
	CMlFrame Frame_MainProfile;
	CMlLabel Label_TrophyTopRank;
	CMlLabel Label_TrophyTopRankZone;
	CMlQuad Quad_TopTrophy;
	CMlQuad Quad_BestTrophy;
	CMlLabel Label_TopTrophyCount;
	CMlLabel Label_TopCampaignName;
	CMlLabel Label_TopText;
	CMlLabel Label_TopCampaignRank;
	CMlLabel Label_TopCampaignZone;
	CMlFrame Frame_MyQuarterlyCampaignsRankings;
	CMlFrame Frame_PreviousCampaign;
	CMlFrame Frame_NextCampaign;
	CMlFrame Button_GeneralTrophiesPreviousZone;
	CMlFrame Button_GeneralTrophiesNextZone;
	CMlFrame Button_Back;
	CMlFrame Frame_CurrentSkin;
	CMlQuad Quad_Lights;
	CMlQuad Quad_PlayerCardEchelon;
	CMlLabel Label_PlayerCardEchelon;
	CMlFrame Spinner_PlayerCardEchelon;
	CMlFrame Button_Garage;
	CMlFrame Button_FirstPartyProfile;
	CMlFrame Button_UbisoftConnectProfile;
	CMlFrame Button_Report;
	CMlFrame Frame_PlayerBestRank;
	CMlLabel Label_BestRank;
	CMlLabel Label_BestRankDate;
	CMlFrame Frame_RankedStats;
	CMlFrame Frame_RankedCurrentSeason;
	CMlFrame Frame_PlayerCurrentSeason;
	CMlLabel Label_CurrentSeason;
	CMlLabel Label_CurrentSeasonDate;
	CMlFrame Frame_RankedPreviousSeason;
	CMlFrame Frame_PlayerPreviousSeason;
	CMlLabel Label_PreviousSeason;
	CMlLabel Label_PreviousSeasonDate;
	CMlLabel Label_PreviousRankedError;
	CMlFrame Frame_RankedBestSeason;
	CMlFrame Frame_PlayerBestSeason;
	CMlLabel Label_BestSeason;
	CMlLabel Label_BestSeasonDate;
	CMlLabel Label_BestRankedError;
	CMlFrame Frame_PublicData;
	CMlFrame Frame_SensibleData;
	CMlLabel Label_MatchesCount;
	CMlLabel Label_WinRate;
	CMlLabel Label_MVPCount;
	CMlFrame Frame_MainRoyalLevel;
	CMlLabel Label_MainRoyalLevel;
	CMlFrame Frame_RoyalStats;
	CMlFrame Frame_RoyalLevel;
	CMlLabel Label_RoyalVictories;
	CMlQuad Quad_SuperRoyalLogo;
	CMlLabel Label_SuperRoyalVictories;
	CMlLabel Label_BronzeVictories;
	CMlLabel Label_SilverVictories;
	CMlLabel Label_GoldVictories;
	CMlLabel Label_MasterVictories;
	CMlFrame Frame_ButtonList;
	CMlLabel Label_Error;
	CMlFrame NavigationTabs_Categories;
	CMlQuad Quad_Background;
	CMlFrame Frame_Content;
	CMlFrame Frame_ContentTrophiesRanking;
	CMlFrame Frame_GeneralTab;
	CMlFrame Frame_GeneralTabInfoRanking;
	CMlFrame Spinner_PrivilegeCheck;
	CMlLabel Label_PrivilegeCheck;
	CMlFrame Frame_ReportSystem;
}

#Struct ComponentProfilePlayerInfo_K_Scene {
	Ident SceneId;
	Ident CurrentItemId;
	Ident CurrentExtraItemId;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesRanking {
	Text ZoneName;
	Integer Rank;
	Integer Total;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesRankingsPager {
	LibCampaignStruct_K_Ranking[] TrophiesRankings;
	Integer CurrentPage;
	Integer MaxPage;
}

#Struct ComponentProfilePlayerInfo_K_TrophyHistoryEntry {
	Text Description;
	Text Date;
	Integer Amount;
	Integer TimeStamp;
}

#Struct ComponentProfilePlayerInfo_K_TrophyHistoryScroll {
	ComponentProfilePlayerInfo_K_TrophyHistoryEntry[Integer] Content;
	Integer Total;
}

#Struct ComponentProfilePlayerInfo_K_TrophiesHistory {
	ComponentProfilePlayerInfo_K_TrophyHistoryScroll TrophyScroll;
	Ident TaskId_GetTrophyHistory;
	Integer RequestedTrophyType;
	Integer RequestedOffset;
	Boolean IsLoading;
}

#Struct ComponentProfilePlayerInfo_K_MatchmakingStats {
	ComponentProfilePlayerInfo_Http::K_Request GetPlayerStats;
	LibStructuresMatchmaking_K_PlayerStatistics Stats;
	Text QueueId;
}

#Struct ComponentProfilePlayerInfo_K_SuperRoyalStats {
	ComponentProfilePlayerInfo_Http::K_Request GetPlayerStats;
	LibStructuresMatchmaking_K_SuperRoyalStatistics Stats;
}

#Struct ComponentProfilePlayerInfo_K_Zone {
	Text Id;
	Text ParentId;
	Text Name;
	Text Path;
	Text FullPath;
	Text FlagUrl;
	Text CountryFlagUrl;
	Text CarSkinName;
	Text CarSkinUrl;
	Text PilotSkinName;
	Text PilotSkinUrl;
}

#Struct ComponentProfilePlayerInfo_K_Record {
	Text Detail;
	Text Id;
}

#Struct ComponentProfilePlayerInfo_K_PlayerProfile {
	Boolean IsFakeUser;
	Boolean IsFirstPartyDisplayName;
	Integer SuccessfulTaskNumber;
	Ident UserId;
	Text AccountId;
	Text ClubTag;
	Text Trigram;
	Text Name;
	ComponentProfilePlayerInfo_K_Zone Zone;
	LibStructuresClub_K_Skin CarSkin;
	LibStructuresClub_K_Skin PilotSkin;
	Vec3 SkinLightColor;
	Boolean CanViewGameHistory;
	Boolean IsReportable;
	ComponentProfilePlayerInfo_K_Record RecordData;
	Boolean IsGhost;
}

#Struct ComponentProfilePlayerInfo_K_PrivilegeCheck {
	ComponentProfilePlayerInfo_K_PlayerProfile User;
	ComponentProfilePlayerInfo_Privileges::K_PrivilegeCheck PrivilegeCheck;
}

#Struct ComponentProfilePlayerInfo_K_State {
	ComponentProfilePlayerInfo_K_Controls Controls;
	Boolean Enabled;
	Boolean MyAccessButtonEnabled;
	Boolean GarageButtonEnabled;
	Boolean PlayersPagerEnabled;
	Boolean ZoneSelectionEnabled;
	Boolean IsPlayerProfileUpdated;
	Boolean IsTTSContextUpdateNeeded;
	ComponentProfilePlayerInfo_K_TrophiesRankingsPager TrophiesRankingsPager;
	Ident TaskId_GetAccountLastYearSummary;
	Boolean TrophiesLoadingError;
	Integer[Integer] TrophiesCount;
	ComponentProfilePlayerInfo_Http::K_Request GetPlayersTrophyRanking;
	Text TrophyRankingLoadingError;
	Integer TabDisplayed;
	Integer NextPrevPlayerCooldown;
	ComponentProfilePlayerInfo_K_Scene Scene;
	Integer FocusedTrophyKey;
	Integer SelectedTrophyKey;
	Integer HistoryTrophyType;
	ComponentProfilePlayerInfo_K_PlayerProfile PlayerProfile;
	ComponentProfilePlayerInfo_K_TrophiesHistory TrophiesHistory;
	ComponentProfilePlayerInfo_K_MatchmakingStats Ranked;
	ComponentProfilePlayerInfo_K_MatchmakingStats Royal;
	ComponentProfilePlayerInfo_K_SuperRoyalStats SuperRoyal;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetClubTagList;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetSkinList;
	ComponentProfilePlayerInfo_Task::K_Task Task_GetPrestigeSkin;
	ComponentProfilePlayerInfo_Task::K_Task Task_RetrieveDisplayName;
	ComponentProfilePlayerInfo_Task::K_Task Task_RetrieveUserZoneList;
	ComponentProfilePlayerInfo_Pager::K_Pager MyQuarterlyCampaignsRankingsPager;
	CMlControl[Integer] TabsFocuses;
	ComponentProfilePlayerInfo_K_PrivilegeCheck PrivilegeCheck;
	Text MatchId;
	Text MatchmakingId;
}

#Struct ComponentProfilePlayerInfo_K_Event {
	Integer Type;
	Ident CurrentUserId;
}

#Const ComponentProfilePlayerInfo_C_EventType_Close 0
#Const ComponentProfilePlayerInfo_C_EventType_NextPlayer 1
#Const ComponentProfilePlayerInfo_C_EventType_PrevPlayer 2
#Const ComponentProfilePlayerInfo_C_EventType_EditPlayer 3
#Const ComponentProfilePlayerInfo_C_EventType_Garage 4
#Const ComponentProfilePlayerInfo_C_EventType_MyAccessInfo 5

#Const ComponentProfilePlayerInfo_C_Zone_Translations ["World"=>"|Zone|World", "Europe"=>"|Zone|Europe", "Middle East"=>"|Zone|Middle East", "North America"=>"|Zone|North America", "South America"=>"|Zone|South America", "Oceania"=>"|Zone|Oceania", "Africa"=>"|Zone|Africa", "Asia"=>"|Zone|Asia", "Algeria"=>"|Zone|Algeria", "Angola"=>"|Zone|Angola", "Benin"=>"|Zone|Benin", "Botswana"=>"|Zone|Botswana", "Burkina Faso"=>"|Zone|Burkina Faso", "Burundi"=>"|Zone|Burundi", "Cameroon"=>"|Zone|Cameroon", "Cabo Verde"=>"|Zone|Cabo Verde", "Central African Republic"=>"|Zone|Central African Republic", "Chad"=>"|Zone|Chad", "Comoros"=>"|Zone|Comoros", "Congo"=>"|Zone|Congo", "Djibouti"=>"|Zone|Djibouti", "DR Congo"=>"|Zone|DR Congo", "Equatorial Guinea"=>"|Zone|Equatorial Guinea", "Eritrea"=>"|Zone|Eritrea", "Ethiopia"=>"|Zone|Ethiopia", "Gabon"=>"|Zone|Gabon", "Ghana"=>"|Zone|Ghana", "Guinea"=>"|Zone|Guinea", "Guinea-Bissau"=>"|Zone|Guinea-Bissau", "Ivory Coast"=>"|Zone|Ivory Coast", "Kenya"=>"|Zone|Kenya", "Lesotho"=>"|Zone|Lesotho", "Afghanistan"=>"|Zone|Afghanistan", "Armenia"=>"|Zone|Armenia", "Azerbaijan"=>"|Zone|Azerbaijan", "Bangladesh"=>"|Zone|Bangladesh", "Bhutan"=>"|Zone|Bhutan", "Brunei"=>"|Zone|Brunei", "Cambodia"=>"|Zone|Cambodia", "Mainland China"=>"|Zone|Mainland China", "Georgia"=>"|Zone|Georgia", "Hong Kong"=>"|Zone|Hong Kong", "India"=>"|Zone|India", "Indonesia"=>"|Zone|Indonesia", "Japan"=>"|Zone|Japan", "Kazakhstan"=>"|Zone|Kazakhstan", "Kyrgyzstan"=>"|Zone|Kyrgyzstan", "Laos"=>"|Zone|Laos", "Malaysia"=>"|Zone|Malaysia", "Maldives"=>"|Zone|Maldives", "Mongolia"=>"|Zone|Mongolia", "Myanmar"=>"|Zone|Myanmar", "Nepal"=>"|Zone|Nepal", "North Korea"=>"|Zone|North Korea", "Pakistan"=>"|Zone|Pakistan", "Philippines"=>"|Zone|Philippines", "Albania"=>"|Zone|Albania", "Andorra"=>"|Zone|Andorra", "Austria"=>"|Zone|Austria", "Belarus"=>"|Zone|Belarus", "Belgium"=>"|Zone|Belgium", "Bosnia and Herzegovina"=>"|Zone|Bosnia and Herzegovina", "Bulgaria"=>"|Zone|Bulgaria", "Croatia"=>"|Zone|Croatia", "Cyprus"=>"|Zone|Cyprus", "Czechia"=>"|Zone|Czechia", "Denmark"=>"|Zone|Denmark", "Estonia"=>"|Zone|Estonia", "Finland"=>"|Zone|Finland", "France"=>"|Zone|France", "Germany"=>"|Zone|Germany", "Greece"=>"|Zone|Greece", "Hungary"=>"|Zone|Hungary", "Iceland"=>"|Zone|Iceland", "Ireland"=>"|Zone|Ireland", "Italy"=>"|Zone|Italy", "Latvia"=>"|Zone|Latvia", "Liechtenstein"=>"|Zone|Liechtenstein", "Lithuania"=>"|Zone|Lithuania", "Luxembourg"=>"|Zone|Luxembourg", "Bahrain"=>"|Zone|Bahrain", "Egypt"=>"|Zone|Egypt", "Iran"=>"|Zone|Iran", "Iraq"=>"|Zone|Iraq", "Israel"=>"|Zone|Israel", "Jordan"=>"|Zone|Jordan", "Kuwait"=>"|Zone|Kuwait", "Lebanon"=>"|Zone|Lebanon", "Oman"=>"|Zone|Oman", "Qatar"=>"|Zone|Qatar", "Saudi Arabia"=>"|Zone|Saudi Arabia", "Syria"=>"|Zone|Syria", "United Arab Emirates"=>"|Zone|United Arab Emirates", "Yemen"=>"|Zone|Yemen", "Antigua and Barbuda"=>"|Zone|Antigua and Barbuda", "Bahamas"=>"|Zone|Bahamas", "Barbados"=>"|Zone|Barbados", "Belize"=>"|Zone|Belize", "Canada"=>"|Zone|Canada", "Costa Rica"=>"|Zone|Costa Rica", "Cuba"=>"|Zone|Cuba", "Dominica"=>"|Zone|Dominica", "Dominican Republic"=>"|Zone|Dominican Republic", "El Salvador"=>"|Zone|El Salvador", "Grenada"=>"|Zone|Grenada", "Haiti"=>"|Zone|Haiti", "Honduras"=>"|Zone|Honduras", "Jamaica"=>"|Zone|Jamaica", "Mexico"=>"|Zone|Mexico", "Nicaragua"=>"|Zone|Nicaragua", "Saint Kitts and Nevis"=>"|Zone|Saint Kitts and Nevis", "Saint Lucia"=>"|Zone|Saint Lucia", "Saint Vincent and the Grenadines"=>"|Zone|Saint Vincent and the Grenadines", "Trinidad and Tobago"=>"|Zone|Trinidad and Tobago", "United States"=>"|Zone|United States", "Australia"=>"|Zone|Australia", "Fiji"=>"|Zone|Fiji", "Marshall Islands"=>"|Zone|Marshall Islands", "Micronesia"=>"|Zone|Micronesia", "Nauru"=>"|Zone|Nauru", "New Zealand"=>"|Zone|New Zealand", "Palau"=>"|Zone|Palau", "Papua New Guinea"=>"|Zone|Papua New Guinea", "Samoa"=>"|Zone|Samoa", "Solomon Islands"=>"|Zone|Solomon Islands", "Tonga"=>"|Zone|Tonga", "Tuvalu"=>"|Zone|Tuvalu", "Vanuatu"=>"|Zone|Vanuatu", "Argentina"=>"|Zone|Argentina", "Bolivia"=>"|Zone|Bolivia", "Brazil"=>"|Zone|Brazil", "Chile"=>"|Zone|Chile", "Colombia"=>"|Zone|Colombia", "Ecuador"=>"|Zone|Ecuador", "Guatemala"=>"|Zone|Guatemala", "Guyana"=>"|Zone|Guyana", "Panama"=>"|Zone|Panama", "Paraguay"=>"|Zone|Paraguay", "Peru"=>"|Zone|Peru", "Suriname"=>"|Zone|Suriname", "Uruguay"=>"|Zone|Uruguay", "Venezuela"=>"|Zone|Venezuela", "Liberia"=>"|Zone|Liberia", "Libya"=>"|Zone|Libya", "Madagascar"=>"|Zone|Madagascar", "Malawi"=>"|Zone|Malawi", "Mali"=>"|Zone|Mali", "Mauritania"=>"|Zone|Mauritania", "Mauritius"=>"|Zone|Mauritius", "Morocco"=>"|Zone|Morocco", "Mozambique"=>"|Zone|Mozambique", "Namibia"=>"|Zone|Namibia", "Niger"=>"|Zone|Niger", "Nigeria"=>"|Zone|Nigeria", "Rwanda"=>"|Zone|Rwanda", "São Tomé and Príncipe"=>"|Zone|São Tomé and Príncipe", "Senegal"=>"|Zone|Senegal", "Seychelles"=>"|Zone|Seychelles", "Sierra Leone"=>"|Zone|Sierra Leone", "Somalia"=>"|Zone|Somalia", "South Africa"=>"|Zone|South Africa", "South Sudan"=>"|Zone|South Sudan", "Sudan"=>"|Zone|Sudan", "Tanzania"=>"|Zone|Tanzania", "The Gambia"=>"|Zone|The Gambia", "Togo"=>"|Zone|Togo", "Tunisia"=>"|Zone|Tunisia", "Uganda"=>"|Zone|Uganda", "Zambia"=>"|Zone|Zambia", "Zimbabwe"=>"|Zone|Zimbabwe", "Singapore"=>"|Zone|Singapore", "South Korea"=>"|Zone|South Korea", "Sri Lanka"=>"|Zone|Sri Lanka", "Taïwan"=>"|Zone|Taïwan", "Tajikistan"=>"|Zone|Tajikistan", "Thailand"=>"|Zone|Thailand", "Timor-Leste"=>"|Zone|Timor-Leste", "Turkmenistan"=>"|Zone|Turkmenistan", "Uzbekistan"=>"|Zone|Uzbekistan", "Vietnam"=>"|Zone|Vietnam", "North Macedonia"=>"|Zone|North Macedonia", "Malta"=>"|Zone|Malta", "Moldova"=>"|Zone|Moldova", "Monaco"=>"|Zone|Monaco", "Montenegro"=>"|Zone|Montenegro", "Netherlands"=>"|Zone|Netherlands", "Norway"=>"|Zone|Norway", "Poland"=>"|Zone|Poland", "Portugal"=>"|Zone|Portugal", "Romania"=>"|Zone|Romania", "Russia"=>"|Zone|Russia", "San Marino"=>"|Zone|San Marino", "Serbia"=>"|Zone|Serbia", "Slovakia"=>"|Zone|Slovakia", "Slovenia"=>"|Zone|Slovenia", "Spain"=>"|Zone|Spain", "Sweden"=>"|Zone|Sweden", "Switzerland"=>"|Zone|Switzerland", "Türkiye"=>"|Zone|Türkiye", "Ukraine"=>"|Zone|Ukraine", "United Kingdom"=>"|Zone|United Kingdom"]

#Const ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest 250

#Const ComponentProfilePlayerInfo_C_ErrorCode_None "0"
#Const ComponentProfilePlayerInfo_C_ErrorCode_CouldNotCreateTask "1"
#Const ComponentProfilePlayerInfo_C_ErrorCode_TaskDeleted "2"

#Const ComponentProfilePlayerInfo_C_TTSContextLevel_Page 11
#Const ComponentProfilePlayerInfo_C_TTSContextLevel_Section 12

#Const ComponentProfilePlayerInfo_C_TabDisplayed_General 0
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Trophies 1
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Ranked 3
#Const ComponentProfilePlayerInfo_C_TabDisplayed_Royal 2

#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloMedal "SoloMedal"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloRanking "SoloRanking"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_LiveMatch "LiveMatch"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionMatch "CompetitionMatch"
#Const ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionRanking "CompetitionRanking"

#Const ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes [
	"OfficialQuarterly" => "|TrophyUnlock|Seasonal campaign",
	"TrackOfTheDay" => "|TrophyUnlock|Track of the Day"
]

#Const ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes [
	"TrackOfTheDay" => "|TrophyUnlock|Track of the Day",
	"SoloWhite" => "|TrophyUnlock|All medals on white tracks",
	"SoloGreen" => "|TrophyUnlock|All medals on green tracks",
	"SoloBlue" => "|TrophyUnlock|All medals on blue tracks",
	"SoloRed" => "|TrophyUnlock|All medals on red tracks",
	"SoloBlack" => "|TrophyUnlock|All medals on black tracks"
]

#Const ComponentProfilePlayerInfo_C_Echelon_Null 0
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze1 1
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze2 2
#Const ComponentProfilePlayerInfo_C_Echelon_Bronze3 3
#Const ComponentProfilePlayerInfo_C_Echelon_Silver1 4
#Const ComponentProfilePlayerInfo_C_Echelon_Silver2 5
#Const ComponentProfilePlayerInfo_C_Echelon_Silver3 6
#Const ComponentProfilePlayerInfo_C_Echelon_Gold1 7
#Const ComponentProfilePlayerInfo_C_Echelon_Gold2 8
#Const ComponentProfilePlayerInfo_C_Echelon_Gold3 9

#Const ComponentProfilePlayerInfo_C_Rank_Bar_Colors [1=><0.761, 0.506, 0.333>, 2=><0.761, 0.506, 0.333>, 3=><0.761, 0.506, 0.333>, 4=><0.682, 0.69, 0.69>, 5=><0.682, 0.69, 0.69>, 6=><0.682, 0.69, 0.69>, 7=><0.8745, 0.663, 0.086>, 8=><0.8745, 0.663, 0.086>, 9=><0.8745, 0.663, 0.086>, 10=><0.502, 0.871, 0.035>, 11=><0.502, 0.871, 0.035>, 12=><0.502, 0.871, 0.035>, 13=><0.502, 0.871, 0.0352>]
#Const ComponentProfilePlayerInfo_C_Rank_Names [1=>"|MatchmakingRank|Bronze I", 2=>"|MatchmakingRank|Bronze II", 3=>"|MatchmakingRank|Bronze III", 4=>"|MatchmakingRank|Silver I", 5=>"|MatchmakingRank|Silver II", 6=>"|MatchmakingRank|Silver III", 7=>"|MatchmakingRank|Gold I", 8=>"|MatchmakingRank|Gold II", 9=>"|MatchmakingRank|Gold III", 10=>"|MatchmakingRank|Master I", 11=>"|MatchmakingRank|Master II", 12=>"|MatchmakingRank|Master III", 13=>"|MatchmakingRank|Trackmaster"]
#Const ComponentProfilePlayerInfo_C_Royal_Level_Names [1=>"Unranked", 2=>"Bronze", 3=>"Silver", 4=>"Gold", 5=>"Master"]
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Logos [""=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Qualifications.dds", "Bronze"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Bronze.dds", "Silver"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Silver.dds", "Gold"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Gold.dds", "Master"=>"file://Media/Manialinks/Nadeo/Trackmania/Modes/Royal/SuperRoyal/Logo_Super_Royal_Master.dds"]
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Bronze "Bronze"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Silver "Silver"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Gold "Gold"
#Const ComponentProfilePlayerInfo_C_SuperRoyal_Division_Master "Master"

// */
// @Component end component-profileplayerinfo

#Include "TextLib" as TL
#Include "Libs/Nadeo/CMGame/Utils/MainUser.Script.txt" as MainUser
#Include "Libs/Nadeo/CMGame/Utils/Task.Script.txt" as Task
#Include "Libs/Nadeo/CMGame/Utils/Tools.Script.txt" as Tools
#Include "Libs/Nadeo/Trackmania/Modes/COTDQualifications/Constants.Script.txt" as COTDConst
#Include "Libs/Nadeo/Trackmania/Modes/COTDQualifications/NetShare.Script.txt" as NetShare
#Include "Libs/Nadeo/Trackmania/Structures/ReportStruct.Script.txt" as ReportStruct
#Include "Libs/Nadeo/CMGame/Utils/Platform.Script.txt" as Platform

#Struct K_Controls {
	CMlFrame Frame_Global;
	CMlFrame ButtonIcon_Rules;
	CMlFrame Button_Hide;
	CMlFrame Button_Rules;
	CMlFrame Frame_Content;
	CMlFrame Frame_ControllerInfo;
	CMlFrame Frame_HideableContent;
	CMlFrame Frame_Profile;
	CMlFrame Frame_ScoreOwner;
	CMlLabel Label_OwnerRank;
	CMlFrame PlayerName_OwnerName;
	CMlLabel Label_OwnerTime;
	CMlFrame LoadingSpinner_OwnerRank;
	CMlFrame Frame_Scores;
	CMlFrame PopUpMultiChoice_Rules;
	CMlLabel Label_NewRank;
}
#Struct K_State {
	K_Controls Controls;
	Boolean DisplayModule;
}
#Struct K_RankingEntry {
	Text AccountId;
	Integer Time;
}

#Const C_State_Null K_State {
	Controls = K_Controls {},
	DisplayModule = False
}

#Const C_InputPriority_Scores 10
#Const C_ScoresScale 1.05
#Const C_EnableNewRankAnimation True
#Const C_NewRankDisplayDuration 5000

#Const C_Status_Pending 0
#Const C_Status_Requesting 1
#Const C_Status_Complete 2



// @Component start component-cmgame-uimodules
// /*

Component_CMGame_UIModules_K_Module[Text] Component_CMGame_UIModules_Private_UpdateModulesProperties(Component_CMGame_UIModules_K_Module[Text] _UIModules, Component_CMGame_UIModules_UIModules_Common::K_ModuleProperties[Text] _ModulesProperties) {
	declare Component_CMGame_UIModules_K_Module[Text] UIModules = _UIModules;
	foreach (ModuleId => Module in _UIModules) {
		// Module properties are customized
		if (_ModulesProperties.existskey(ModuleId)) {
			declare Component_CMGame_UIModules_UIModules_Common::K_ModuleProperties ModuleProperties = _ModulesProperties[ModuleId];
			Module.Control.RelativePosition_V3 = ModuleProperties.Position;
			Module.Control.RelativeScale = ModuleProperties.Scale;
			Module.Control.Visible = ModuleProperties.Visible;
			UIModules[ModuleId].IsCustom = True;
		}
		// Module properties are not customized anymore
		else if (Module.IsCustom) {
			Module.Control.RelativePosition_V3 = Module.DefaultProperties.Position;
			Module.Control.RelativeScale = Module.DefaultProperties.Scale;
			Module.Control.Visible = Module.DefaultProperties.Visible;
			UIModules[ModuleId].IsCustom = False;
		}
	}
	return UIModules;
}

Component_CMGame_UIModules_K_Module[Text] Component_CMGame_UIModules_Private_Initialize() {
	// Find UI modules controls
	declare Component_CMGame_UIModules_K_Module[Text] Component_CMGame_UIModules_UIModules;
	Page.GetClassChildren("component-cmgame-uimodules-module", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare TrueControlHandle = Control;
		assert(TrueControlHandle.ControlId != "", "[UIModules] A UI module CMlControl must have an id");
		assert(!Component_CMGame_UIModules_UIModules.existskey(TrueControlHandle.ControlId), "[UIModules] Two UI modules CMlControl cannot share the same id '"^TrueControlHandle.ControlId^"'");
		if (
			TrueControlHandle.DataAttributeExists("customizable-module-enabled") &&
			Component_CMGame_UIModules_Tools::TextToBoolean(TrueControlHandle.DataAttributeGet("customizable-module-enabled"))
		) {
			Component_CMGame_UIModules_UIModules[TrueControlHandle.ControlId] = Component_CMGame_UIModules_K_Module {
				Control = TrueControlHandle,
				IsCustom = False,
				DefaultProperties = Component_CMGame_UIModules_UIModules_Common::K_ModuleProperties {
					Position = TrueControlHandle.RelativePosition_V3,
					Scale = TrueControlHandle.RelativeScale,
					Visible = TrueControlHandle.Visible
				}
			};
		}
	}
	return Component_CMGame_UIModules_UIModules;
}

***MainInit***
***
declare netread Component_CMGame_UIModules_UIModules_Common::K_ModuleProperties[Text] Net_LibUI3_CustomizableModule_Properties for Teams[0];
declare netread Integer Net_LibUI3_CustomizableModule_PropertiesUpdate for Teams[0];

declare Component_CMGame_UIModules_K_Module[Text] Component_CMGame_UIModules_UIModules;
***

***MainStart***
***
declare Integer ModulesPropertiesUpdate = Net_LibUI3_CustomizableModule_PropertiesUpdate;

Component_CMGame_UIModules_UIModules = Component_CMGame_UIModules_Private_Initialize();
Component_CMGame_UIModules_UIModules = Component_CMGame_UIModules_Private_UpdateModulesProperties(Component_CMGame_UIModules_UIModules, Net_LibUI3_CustomizableModule_Properties);
***

***MainLoop***
***
if (ModulesPropertiesUpdate != Net_LibUI3_CustomizableModule_PropertiesUpdate) {
	ModulesPropertiesUpdate = Net_LibUI3_CustomizableModule_PropertiesUpdate;
	Component_CMGame_UIModules_UIModules = Component_CMGame_UIModules_Private_UpdateModulesProperties(Component_CMGame_UIModules_UIModules, Net_LibUI3_CustomizableModule_Properties);
}
***

// */
// @Component end component-cmgame-uimodules

// @Component start share-menu-navigation
// /*

***MainLoop***
***
ShareMenuNavigation_ShareMenuNavigation::MainLoop(This);
***

// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

***MainInit***
***
ComponentNavigation_ComponentNavigation::MainInit(This);
***

***MainLoop***
***
ComponentNavigation_ComponentNavigation::MainLoop(This);
***

// */
// @Component end component-navigation

// @Component start component-loadingspinner
// /*

***MainInit***
***
CMGame_LoadingSpinner::MainInit(This);
***

***MainLoop***
***
CMGame_LoadingSpinner::MainLoop(This);
***

// */
// @Component end component-loadingspinner

// @Component start component-trackmania-button
// /*

***MainInit***
***
Trackmania_Button::MainInit(This);
***

***MainLoop***
***
Trackmania_Button::MainLoop(This);
***

// */
// @Component end component-trackmania-button

// @Component start component-button-icon-2
// /*

***MainInit***
***
ButtonIcon2_ButtonIcon2::MainInit(This);
***

***MainStart***
***
ButtonIcon2_ButtonIcon2::MainStart(This);
***

***MainLoop***
***
ButtonIcon2_ButtonIcon2::MainLoop(This);
***

// */
// @Component end component-button-icon-2

// @Component start component-checkbox
// /*

***MainInit***
***
Trackmania_Checkbox::MainInit(This);
***

// */
// @Component end component-checkbox

// @Component start component-cmgame-expendable-button
// /*

***MainInit***
***
CMGame_ExpendableButton::MainInit(This);
***

***MainStart***
***
CMGame_ExpendableButton::MainStart(This);
***

***MainLoop***
***
CMGame_ExpendableButton::MainLoop(This);
***

// */
// @Component end component-cmgame-expendable-button

// @Component start component-trackmania-expendable-button
// /*

***MainInit***
***
CMGame_ExpendableButton::Trackmania_MainInit(This);
***

// */
// @Component end component-trackmania-expendable-button

// @Component start component-trackmania-pop-up-background-2
// /*

***MainInit***
***
Trackmania_PopUpBackground2::MainInit(This);
***

***MainStart***
***
Trackmania_PopUpBackground2::MainStart(This);
***

***MainLoop***
***
Trackmania_PopUpBackground2::MainLoop(This);
***

// */
// @Component end component-trackmania-pop-up-background-2

// @Component start menu-libs-scroll
// /*

***MainInit***
***
CMGame_Scroll::MainInit(This);
***

***MainStart***
***
CMGame_Scroll::MainStart(This);
***

***MainLoop***
***
CMGame_Scroll::MainLoop(This);
***

// */
// @Component end menu-libs-scroll

// @Component start component-cmgame-selector
// /*

***MainInit***
***
CMGame_Selector::MainInit(This);
***

***MainStart***
***
CMGame_Selector::MainStart(This);
***

***MainLoop***
***
CMGame_Selector::MainLoop(This);
***

// */
// @Component end component-cmgame-selector

// @Component start component-textfield
// /*

***MainInit***
***
CMGame_TextField::MainInit(This);
***

***MainStart***
***
CMGame_TextField::MainStart(This);
***

***MainLoop***
***
CMGame_TextField::MainLoop(This);
***

// */
// @Component end component-textfield

// @Component start component-popupmultichoice
// /*

***MainInit***
***
Trackmania_PopUpMultiChoice::MainInit(This);
***

***MainStart***
***
Trackmania_PopUpMultiChoice::MainStart(This);
***

***MainLoop***
***
Trackmania_PopUpMultiChoice::MainLoop(This);
***

// */
// @Component end component-popupmultichoice

// @Component start component-cmgame-menusounds
// /*

***MainInit***
***
CMGame_MenuSounds::MainInit(This);
***

***MainStart***
***
CMGame_MenuSounds::MainStart(This);
***

***MainLoop***
***
CMGame_MenuSounds::MainLoop(This);
***

// */
// @Component end component-cmgame-menusounds

// @Component start component-buttonslist2
// /*

Void ComponentButtonsList2_Private_ApplyProperties(CMlFrame _Frame_ButtonsList) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;

	// Order in which properties are applied is important !

	if (
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonsSpacing)
	) {
		ComponentButtonsList2_Data.Width = 0.;
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			if (ComponentButtonsList2_Data.Binds.existskey(ControlKey) && ComponentButtonsList2_Data.Actions.existskey(ControlKey)) {
				declare Text Bind = ComponentButtonsList2_Data.Binds[ControlKey];
				declare Text Action = ComponentButtonsList2_Data.Actions[ControlKey];

				declare CMlFrame ButtonIcon_Bind <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_button-icon-bind") as CMlFrame);
				declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);

				declare Text PreviousAction = "";
				if (ComponentButtonsList2_Data.Actions.existskey(ControlKey - 1)) PreviousAction = ComponentButtonsList2_Data.Actions[ControlKey-1];
				if (ComponentButtonsList2_Data.Width > 0. && PreviousAction != "") ComponentButtonsList2_Data.Width += ComponentButtonsList2_Data.ButtonsSpacing;

				ButtonIcon2_ButtonIcon2::SetBind(This, ButtonIcon_Bind, Bind);
				Label_Action.Value = Action;
				Frame_Button.Visible = True;
				Frame_Button.RelativePosition_V3.X = ComponentButtonsList2_Data.Width;

				declare Real ActionMaxWidth = ComponentButtonsList2_ML::Max(0., ComponentButtonsList2_Data.ButtonMaxWidth - 8. - 1.);
				declare Real ActionWidth = Label_Action.ComputeWidth(Label_Action.Value, True);
				Label_Action.Size.X = ComponentButtonsList2_ML::Min(ActionMaxWidth, ActionWidth);

				ComponentButtonsList2_Data.Width += 9. + Label_Action.Size.X;
				ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
			} else {
				Frame_Button.Visible = False;
			}
		}
	}

	if (
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_HAlign) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_VAlign) ||
		ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth)
	) {
		ComponentButtonsList2_Tools::AlignFrame(ComponentButtonsList2_Data.Frame_Align, <ComponentButtonsList2_Data.Width, 8.>, ComponentButtonsList2_Data.HAlign, ComponentButtonsList2_Data.VAlign);
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Color)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			if (Frame_Button.Visible) {
				declare CMlFrame ButtonIcon_Bind <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_button-icon-bind") as CMlFrame);
				declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);

				ButtonIcon2_ButtonIcon2::SetColor(This, ButtonIcon_Bind, ComponentButtonsList2_Data.Color);
				Label_Action.TextColor = ComponentButtonsList2_Data.Color;
			}
		}
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextPrefix)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);
			Label_Action.TextPrefix = ComponentButtonsList2_Data.TextPrefix;
			ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
		}
	}

	if (ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextFont)) {
		foreach (ControlKey => Frame_Button in ComponentButtonsList2_Data.Frames_Button) {
			declare CMlLabel Label_Action <=> (Frame_Button.GetFirstChild("ComponentButtonsList2_label-action") as CMlLabel);
			Label_Action.TextFont = ComponentButtonsList2_Data.TextFont;
			ComponentButtonsList2_Tools::FitLabelValue(Label_Action, 3., 2., 0.25);
		}
	}

	ComponentButtonsList2_Data.DirtyProperties = [];
}

Void ComponentButtonsList2_SetButtons(CMlFrame _Frame_ButtonsList, Text[Text] _Buttons) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;

	ComponentButtonsList2_Data.Binds = [];
	ComponentButtonsList2_Data.Actions = [];
	foreach (Bind => Action in _Buttons) {
		ComponentButtonsList2_Data.Binds.add(Bind);
		ComponentButtonsList2_Data.Actions.add(Action);
	}
	if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons)) {
		ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Buttons);
	}

	ComponentButtonsList2_Private_ApplyProperties(_Frame_ButtonsList);
}

Void ComponentButtonsList2_Private_Init(CMlFrame _Frame_ButtonsList) {
	declare ComponentButtonsList2_K_Data ComponentButtonsList2_Data for _Frame_ButtonsList;
	ComponentButtonsList2_Data = ComponentButtonsList2_K_Data {
		Frame_Align = Null,
		Frames_Button = [],
		Binds = [],
		Actions = [],
		HAlign = CMlControl::AlignHorizontal::Left,
		VAlign = CMlControl::AlignVertical::Top,
		Color = <1., 1., 1.>,
		ButtonMaxWidth = 100.,
		Width = 0.,
		TextPrefix = "",
		TextFont = "",
		ButtonsSpacing = 1.,
		DirtyProperties = []
	};

	ComponentButtonsList2_Data.Frame_Align <=> (_Frame_ButtonsList.GetFirstChild("ComponentButtonsList2_frame-align") as CMlFrame);
	foreach (Control in ComponentButtonsList2_Data.Frame_Align.Controls) {
		ComponentButtonsList2_Data.Frames_Button.add((Control as CMlFrame));
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttons")) {
		declare Text[Text] Buttons;
		Buttons.fromjson(_Frame_ButtonsList.DataAttributeGet("buttons"));
		foreach (Bind => Action in Buttons) {
			ComponentButtonsList2_Data.Binds.add(Bind);
			ComponentButtonsList2_Data.Actions.add(Action);
		}
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Buttons)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Buttons);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("halign")) {
		ComponentButtonsList2_Data.HAlign = ComponentButtonsList2_Tools::TextToHAlign(_Frame_ButtonsList.DataAttributeGet("halign"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_HAlign)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_HAlign);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("valign")) {
		ComponentButtonsList2_Data.VAlign = ComponentButtonsList2_Tools::TextToVAlign(_Frame_ButtonsList.DataAttributeGet("valign"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_VAlign)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_VAlign);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("color")) {
		ComponentButtonsList2_Data.Color = ComponentButtonsList2_CL::HexToRgb(_Frame_ButtonsList.DataAttributeGet("color"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_Color)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_Color);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttonmaxwidth")) {
		ComponentButtonsList2_Data.ButtonMaxWidth = ComponentButtonsList2_TL::ToReal(_Frame_ButtonsList.DataAttributeGet("buttonmaxwidth"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonMaxWidth)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_ButtonMaxWidth);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("textprefix")) {
		ComponentButtonsList2_Data.TextPrefix = _Frame_ButtonsList.DataAttributeGet("textprefix");
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextPrefix)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_TextPrefix);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("textfont")) {
		ComponentButtonsList2_Data.TextFont = _Frame_ButtonsList.DataAttributeGet("textfont");
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_TextFont)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_TextFont);
		}
	}

	if (_Frame_ButtonsList.DataAttributeExists("buttons-spacing")) {
		ComponentButtonsList2_Data.ButtonsSpacing = ComponentButtonsList2_TL::ToReal(_Frame_ButtonsList.DataAttributeGet("buttons-spacing"));
		if (!ComponentButtonsList2_Data.DirtyProperties.exists(ComponentButtonsList2_C_Property_ButtonsSpacing)) {
			ComponentButtonsList2_Data.DirtyProperties.add(ComponentButtonsList2_C_Property_ButtonsSpacing);
		}
	}

	ComponentButtonsList2_Private_ApplyProperties(_Frame_ButtonsList);
}

***MainInit***
***
Page.GetClassChildren("ComponentButtonsList2_container", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	ComponentButtonsList2_Private_Init(Control.Parent);
}
***

// */
// @Component end component-buttonslist2

// @Component start component-menu-button-list
// /*

declare CMlFrame ComponentMenuButtonList_G_Frame_ButtonList;

Void ComponentMenuButtonList_SetButtons(CMlFrame _Frame_ButtonList, Text[Text] _ButtonsList) {
	if (_Frame_ButtonList != Null) {
		declare CMlFrame Frame_ButtonList <=> (_Frame_ButtonList.GetFirstChild("ComponentMenuButtonList_frame-button-list") as CMlFrame);
		if (ComponentMenuButtonList_G_Frame_ButtonList != Frame_ButtonList) {
			if (ComponentMenuButtonList_G_Frame_ButtonList != Null) ComponentButtonsList2_SetButtons(ComponentMenuButtonList_G_Frame_ButtonList, []); // reset previous Frame buttons
				ComponentMenuButtonList_G_Frame_ButtonList <=> Frame_ButtonList;
		}
		if (ComponentMenuButtonList_G_Frame_ButtonList != Null) ComponentButtonsList2_SetButtons(ComponentMenuButtonList_G_Frame_ButtonList, _ButtonsList);
	}
}

***MainInit***
***
declare CMlFrame ComponentMenuButtonList_Frame_Global;
***

***MainStart***
***
ComponentMenuButtonList_Frame_Global <=> (Page.GetFirstChild("ComponentMenuButtonList_frame-global") as CMlFrame);

ComponentMenuButtonList_G_Frame_ButtonList = Null;
***

***MainLoop***
***
if (ComponentMenuButtonList_Frame_Global.Parent.Visible && ComponentMenuButtonList_G_Frame_ButtonList != Null) {
	if (ComponentMenuButtonList_G_Frame_ButtonList.Visible == ComponentMenuButtonList_Tools::IsUsingMouse(Input)) {
		ComponentMenuButtonList_G_Frame_ButtonList.Visible = !ComponentMenuButtonList_Tools::IsUsingMouse(Input);
	}
}
***

// */
// @Component end component-menu-button-list

// @Component start structures-club
// /*

LibStructuresClub_K_Club LibStructuresClub_GetEmptyClub() {
	return LibStructuresClub_K_Club {
		Id = LibStructuresClub_C_ClubNullId,
		Name = "",
		Tag = "",
		IconUrl = "",
		LogoUrl = "",
		DecalUrl = "",
		BgUrl = "",
		VerticalUrl = "",
		DecoImageUrl_DecalSponsor4x1 = "",
		DecoImageUrl_Screen16x9 = "",
		DecoImageUrl_Screen8x1 = "",
		DecoImageUrl_Screen16x1 = "",
		PrivacyState = LibStructuresClub_C_ClubState_Public,
		PopularityLevel = 0
	};
}

LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin, Boolean _IsFavorite, Boolean _IsUsed) {
	return LibStructuresClub_K_Skin {
		Id = _NSSkin.Id,
		Type = _NSSkin.Type,
		Name = _NSSkin.Name,
		DisplayName = _NSSkin.DisplayName,
		CreatorAccountId = _NSSkin.CreatorAccountId,
		CreatorDisplayName = _NSSkin.CreatorDisplayName,
		CreatorIsFirstPartyDisplayName = _NSSkin.CreatorIsFirstPartyDisplayName,
		FileName = _NSSkin.FileName,
		FileUrl = _NSSkin.FileUrl,
		ThumbnailUrl = _NSSkin.ThumbnailUrl,
		TimeStamp = _NSSkin.TimeStamp,
		IsFavorite = _IsFavorite,
		IsUsed = _IsUsed
	};
}
LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin) {
	return LibStructuresClub_GetSkinFromNSSkin(_NSSkin, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the display name of a club activity
Text LibStructuresClub_GetActivityDisplayName(Text _ActivityType) {
	return LibStructuresClub_C_ClubActivity_DisplayNames.get(_ActivityType, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty member structure
LibStructuresClub_K_Member LibStructuresClub_GetEmptyMember() {
	return LibStructuresClub_K_Member {
		AccountId = LibStructuresClub_C_AccountNullId,
		Role = LibStructuresClub_C_ClubRoleNone,
		JoinDate = 0
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty activity structure
LibStructuresClub_K_Activity LibStructuresClub_GetEmptyActivity() {
	return LibStructuresClub_K_Activity {
		Id = LibStructuresClub_C_ActivityNullId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine if the given theme name exists or not
Boolean LibStructuresClub_IsClubThemeName(Text _ThemeName) {
	return LibStructuresClub_C_ClubThemes_Folders.existskey(_ThemeName);
}

/// Determine if the given url is a club theme url or not
Boolean LibStructuresClub_IsClubThemeUrl(Text _MediaUrl) {
	if (!LibStructuresClub_TL::StartsWith("file://"^LibStructuresClub_C_ClubThemes_Path, LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))) return False;
	return LibStructuresClub_C_ClubThemes_Folders.exists("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text LibStructuresClub_GetClubThemeName(Text _MediaUrl) {
	if (!LibStructuresClub_IsClubThemeUrl(_MediaUrl)) return _MediaUrl;
	return LibStructuresClub_C_ClubThemes_Folders.keyof("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-2]);
}

/// Get the formatted url of a club theme given the name and the media type
Text LibStructuresClub_GetClubThemeUrl(Text _ThemeName, Text _MediaType) {
	if (!LibStructuresClub_IsClubThemeName(_ThemeName) || !LibStructuresClub_C_ClubThemes_Files.existskey(_MediaType)) return "";
	return "file://"^LibStructuresClub_C_ClubThemes_Path^LibStructuresClub_C_ClubThemes_Folders[_ThemeName]^LibStructuresClub_C_ClubThemes_Files[_MediaType];
}

/// Get the club theme type given the media url
Text LibStructuresClub_GetClubThemeType(Text _MediaUrl) {
	if (LibStructuresClub_IsClubThemeUrl(_MediaUrl)) {
		declare Text File = "/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(_MediaUrl, "\\", "/"))[-1];
		foreach (ThemeType => ThemeFile in LibStructuresClub_C_ClubThemes_Files) {
			if (LibStructuresClub_TL::CompareWithoutFormat(ThemeFile, File, False)) {
				return ThemeType;
			}
		}
	}
	return "";
}

/// Get the media url corresponding to the given media type
Text LibStructuresClub_GetMediaFromType(LibStructuresClub_K_Club _Club, Text _MediaType) {
	declare Text MediaUrl;

	switch (_MediaType) {
		case LibStructuresClub_C_MediaType_Icon: MediaUrl = _Club.IconUrl;
		case LibStructuresClub_C_MediaType_Vertical: MediaUrl = _Club.VerticalUrl;
		case LibStructuresClub_C_MediaType_Bg: MediaUrl = _Club.BgUrl;
		case LibStructuresClub_C_MediaType_Decal: MediaUrl = _Club.DecalUrl;
		case LibStructuresClub_C_MediaType_DecalSponsor: MediaUrl = _Club.DecoImageUrl_DecalSponsor4x1;
		case LibStructuresClub_C_MediaType_Screen16x9: MediaUrl = _Club.DecoImageUrl_Screen16x9;
		case LibStructuresClub_C_MediaType_Screen16x1: MediaUrl = _Club.DecoImageUrl_Screen16x1;
		case LibStructuresClub_C_MediaType_Screen8x1: MediaUrl = _Club.DecoImageUrl_Screen8x1;
	}

	return MediaUrl;
}

/// Check if there is at least one asset in the club
Boolean LibStructuresClub_IsAnyAssetSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in LibStructuresClub_C_MediaType_Translations) {
		if (LibStructuresClub_GetMediaFromType(_Club, MediaType) != "") {
			return True;
		}
	}

	return False;
}

/// Check if there is at least one theme selected among the different club assets
Boolean LibStructuresClub_IsAnyThemeSelected(LibStructuresClub_K_Club _Club) {
	foreach (MediaType => MediaTranslation in LibStructuresClub_C_MediaType_Translations) {
		declare Text MediaUrl = LibStructuresClub_GetMediaFromType(_Club, MediaType);
		if (LibStructuresClub_TL::StartsWith("file://"^LibStructuresClub_C_ClubThemes_Path, LibStructuresClub_TL::Replace(MediaUrl, "\\", "/"))) {
			MediaUrl = LibStructuresClub_C_ClubThemes_Folders.keyof("/"^LibStructuresClub_TL::Split("/", LibStructuresClub_TL::Replace(MediaUrl, "\\", "/"))[-2]);
		}
		if (LibStructuresClub_C_ClubThemes_Folders.existskey(MediaUrl)) {
			return True;
		}
	}

	return False;
}

// */
// @Component end structures-club

// @Component start structures-matchmaking
// /*

LibStructuresMatchmaking_K_Mode LibStructuresMatchmaking_GetMode(Text _ModeName) {
	return LibStructuresMatchmaking_C_Modes.get(_ModeName, LibStructuresMatchmaking_K_Mode {});
}

// */
// @Component end structures-matchmaking

// @Component start lib-user-store
// /*

***MainInit***
***
Trackmania_UserStore::MainInit(This);
***

// */
// @Component end lib-user-store

// @Component start lib-http-struct
// /*


// */
// @Component end lib-http-struct

// @Component start lib-campaign-struct
// /*

Integer LibCampaignStruct_GetSeasonNameInCampaignName(Text _CampaignName) {
	foreach (SeasonName => SeasonIndex in LibCampaignStruct_Const::C_Season_Name_To_Index) {
		if (LibCampaignStruct_TL::Find(SeasonName, _CampaignName, False, False)) return SeasonIndex;
	}
	return LibCampaignStruct_Const::C_SeasonIndex_Null;
}

Integer LibCampaignStruct_GetYearInCampaignName(Text _CampaignName) {
	declare Text[] Result = LibCampaignStruct_TL::RegexFind("\\b\\d{4,}\\b", _CampaignName, "");
	if (Result.count > 0) return LibCampaignStruct_TL::ToInteger(Result[0]);
	return 0;
}

LibCampaignStruct_K_Campaign LibCampaignStruct_GetCampaignFromHttpCampaign(LibHttpStruct_K_HttpCampaign _HttpCampaign) {
	declare LibCampaignStruct_K_Map[Integer] PlaylistToSort;
	declare LibCampaignStruct_K_Map[] Playlist;

	foreach (HttpMap in _HttpCampaign.playlist) {
		PlaylistToSort[HttpMap.position] = LibCampaignStruct_K_Map {
			Position = HttpMap.position,
			Uid = HttpMap.mapUid
		};
	}
	foreach (Map in PlaylistToSort.sort()) {
		Playlist.add(Map);
	}

	return LibCampaignStruct_K_Campaign {
		Id = _HttpCampaign.id,
		Name = _HttpCampaign.name,
		SeasonUid = _HttpCampaign.seasonUid,
		Type = _HttpCampaign.useCase,
		Day = _HttpCampaign.day,
		Week = _HttpCampaign.week,
		Month = _HttpCampaign.month,
		MonthDay = _HttpCampaign.monthDay,
		MonthYear = _HttpCampaign.monthYear,
		Year = _HttpCampaign.year,
		SeasonName = LibCampaignStruct_GetSeasonNameInCampaignName(_HttpCampaign.name),
		Club = LibStructuresClub_K_Club { Id = _HttpCampaign.clubId },
		IsSeasonLive = LibCampaignStruct_TiL::Compare(LibCampaignStruct_TiL::GetCurrent(), ""^_HttpCampaign.endTimestamp) < 0,
		IsLoaded = False,
		IsFetched = False,
		FailedToGetMapUrl = False,
		Playlist = Playlist,
		CampaignRanking = LibCampaignStruct_K_CampaignRanking {},
		TopRankings = [],
		ClubTopRankings = [],
		StartTimestamp = _HttpCampaign.startTimestamp,
		EndTimestamp = _HttpCampaign.endTimestamp,
		EditionTimestamp = _HttpCampaign.editionTimestamp,
		RankingSentTimestamp = _HttpCampaign.rankingSentTimestamp,
		PublicationTimestamp = _HttpCampaign.publicationTimestamp
	};
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromNSMap(LibCampaignStruct_K_Map _OldMap, CNadeoServicesMap _NSMap) {
	declare LibCampaignStruct_K_Map NewMap = _OldMap;
	NewMap.Position = _OldMap.Position;
	NewMap.Uid = _NSMap.Uid;
	NewMap.Name = _NSMap.Name;
	NewMap.Type = _NSMap.Type;
	NewMap.Style = _NSMap.Style;
	NewMap.AuthorLogin = _NSMap.AuthorAccountId;
	NewMap.AuthorDisplayName = _NSMap.AuthorDisplayName;
	NewMap.AuthorIsFirstPartyDisplayName = _NSMap.AuthorIsFirstPartyDisplayName;
	NewMap.SubmitterAccountId = _NSMap.SubmitterAccountId;
	NewMap.CreatedWithSimpleEditor = _NSMap.CreatedWithSimpleEditor;
	NewMap.CreatedWithGamepadEditor = _NSMap.CreatedWithGamepadEditor;
	NewMap.AuthorTime = _NSMap.AuthorScore;
	NewMap.GoldTime = _NSMap.GoldScore;
	NewMap.SilverTime = _NSMap.SilverScore;
	NewMap.BronzeTime = _NSMap.BronzeScore;
	NewMap.DownloadUrl = _NSMap.FileUrl;
	NewMap.ThumbnailUrl = _NSMap.ThumbnailUrl;
	NewMap.UploadTimestamp = _NSMap.TimeStamp;
	NewMap.IsPlayable = _NSMap.IsPlayable;
	NewMap.CollectionName = _NSMap.CollectionName;

	return NewMap;
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromMapInfo(CMapInfo _MapInfo) {
	return LibCampaignStruct_K_Map {
		Uid = _MapInfo.MapUid,
		Name = _MapInfo.Name,
		LocalFileName = _MapInfo.FileName,
		Type = _MapInfo.MapType,
		Style = _MapInfo.MapStyle,
		AuthorLogin = _MapInfo.AuthorLogin,
		AuthorDisplayName = _MapInfo.AuthorNickName,
		AuthorTime = _MapInfo.TMObjective_AuthorTime,
		GoldTime = _MapInfo.TMObjective_GoldTime,
		SilverTime = _MapInfo.TMObjective_SilverTime,
		BronzeTime = _MapInfo.TMObjective_BronzeTime,
		ThumbnailUrl = "file://Thumbnails/MapUid/"^_MapInfo.MapUid,
		IsPlayable = _MapInfo.IsPlayable,
		CollectionName = _MapInfo.CollectionName,
		CreatedWithSimpleEditor = _MapInfo.CreatedWithSimpleEditor,
		CreatedWithGamepadEditor = _MapInfo.CreatedWithGamepadEditor
	};
}

LibCampaignStruct_K_Campaign LibCampaignStruct_GetEmptyCampaign() {
	return LibCampaignStruct_K_Campaign {
		Id = LibCampaignStruct_C_Campaign_NullId,
		Type = LibCampaignStruct_C_CampaignType_None
	};
}

LibCampaignStruct_K_MonthlyCampaign LibCampaignStruct_GetEmptyMonthlyCampaign() {
	return LibCampaignStruct_K_MonthlyCampaign {
		Id = LibCampaignStruct_C_MonthlyCampaign_NullId
	};
}

Boolean LibCampaignStruct_IsNull(LibCampaignStruct_K_MonthlyCampaign _MonthlyCampaign) {
	return _MonthlyCampaign.Id == LibCampaignStruct_C_MonthlyCampaign_NullId;
}

/**
 * Parse a campaign name into a struct containing its season (see Const::C_Season_Names) and its year
 *
 *	@param _CampaignName		The name of the campaign to parse
 *
 *	@return									A struct LibCampaignStruct_K_CampaignName
 */
LibCampaignStruct_K_CampaignName LibCampaignStruct_ParseCampaignName(Text _CampaignName) {
	declare LibCampaignStruct_K_CampaignName CampaignName = LibCampaignStruct_K_CampaignName {
		IsValid = False,
		Name = _CampaignName
	};

	declare Text[] NameSplit = LibCampaignStruct_TL::Split(" ", _CampaignName);
	if (NameSplit.count >= 2) {
		CampaignName.Season = NameSplit[0];
		CampaignName.Year = NameSplit[1];
		CampaignName.IsValid = LibCampaignStruct_C_Season_Names.existskey(CampaignName.Season) && LibCampaignStruct_TL::ToInteger(CampaignName.Year) > 0;
		if (CampaignName.IsValid) {
			CampaignName.TranslatedName = LibCampaignStruct_TL::Compose("%1 %2", LibCampaignStruct_C_Season_Names[CampaignName.Season], CampaignName.Year);
		}
	}

	return CampaignName;
}

// Get the minimum medals needed to unlock this category
Integer LibCampaignStruct_GetMedalsMinToUnlockCategory(Integer _CategoryIndex) {
	switch (_CategoryIndex) {
		case LibCampaignStruct_C_CategoryBlue: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSectionDebug;
			else return LibCampaignStruct_C_MinBronzeMedalsToPlayBlueSection;
		}
		case LibCampaignStruct_C_CategoryRed: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinSilverMedalsToPlayRedSectionDebug;
			else return LibCampaignStruct_C_MinSilverMedalsToPlayRedSection;
		}
		case LibCampaignStruct_C_CategoryBlack: {
			if (LibCampaignStruct_Config::HasFeature(LibCampaignStruct_Config::C_Feature_DebugFakeCampaignUnlock)) return LibCampaignStruct_C_MinGoldMedalsToPlayBlackSectionDebug;
			else return LibCampaignStruct_C_MinGoldMedalsToPlayBlackSection;
		}
	}

	return 0;
}

// Check if a daily map's leaderboard is closed
Boolean LibCampaignStruct_LeaderboardIsClosed(LibCampaignStruct_K_DailyMap _DailyMap) {
	return (_DailyMap.RelativeEnd <= 0 || (Now - _DailyMap.RelativeNow) / 1000 >= _DailyMap.RelativeEnd);
}

// Get the value of the text displayed for the medal score (can be a time or points)
Text LibCampaignStruct_GetMedalScoreText(Integer _Time, Integer _Points, Integer _Respawns, Text _MapType, LibCampaignStruct_K_ScoreTextOptions _Options) {
	declare Text MedalScoreText = "";
	// For Stunt maps, we display the points of the players and not their time
	if (LibCampaignStruct_TitleControl::IsStuntMapType(_MapType)) {
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Points, LibCampaignStruct_TM_Const::C_ScoreType_Points, _Options);
	// For Platform maps, we display the respawns of the players
	} else if (LibCampaignStruct_TitleControl::IsPlatformMapType(_MapType)) {
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Respawns, LibCampaignStruct_TM_Const::C_ScoreType_Respawns, _Options);
	} else { // other map type (time)
		MedalScoreText = LibCampaignStruct_TM_Const::GetScoreText(_Time, LibCampaignStruct_TM_Const::C_ScoreType_Time, _Options);
	}
	return MedalScoreText;
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Time, Integer _Points, Integer _Respawns, Text _MapType, Boolean _EnableAbbreviation) {
	declare LibCampaignStruct_K_ScoreTextOptions Options = LibCampaignStruct_C_ScoreTextOptions_Null;
	Options.EnableAbbreviation = _EnableAbbreviation;
	return LibCampaignStruct_GetMedalScoreText(_Time, _Points, _Respawns, _MapType, Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType, Boolean _EnableAbbreviation) {
	declare LibCampaignStruct_K_ScoreTextOptions Options = LibCampaignStruct_C_ScoreTextOptions_Null;
	Options.EnableAbbreviation = _EnableAbbreviation;
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType, LibCampaignStruct_K_ScoreTextOptions _Options) {
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, _Options);
}
Text LibCampaignStruct_GetMedalScoreText(Integer _Score, Text _MapType) {
	return LibCampaignStruct_GetMedalScoreText(_Score, _Score, _Score, _MapType, LibCampaignStruct_C_ScoreTextOptions_Null);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Determine the map's category in official campaigns from its position in the playlist
Integer LibCampaignStruct_GetCategoryFromMapPosition(Integer _MapPosition) {
	return (_MapPosition - (_MapPosition % LibCampaignStruct_C_MapsByCategory)) / LibCampaignStruct_C_MapsByCategory;
}

// */
// @Component end lib-campaign-struct

// @Component start lib-campaign-store
// /*

***MainInit***
***
Trackmania_CampaignStore::MainInit(This);
***

***MainLoop***
***
Trackmania_CampaignStore::MainLoop(This);
***

// */
// @Component end lib-campaign-store

// @Component start component-playerroyalvictories
// /*

***MainInit***
***
Trackmania_PlayerRoyalVictories::MainInit(This);
***

// */
// @Component end component-playerroyalvictories

// @Component start component-playerrank
// /*

declare LibStructuresMatchmaking_K_Division[Text] ComponentPlayerRank_G_Divisions;

// Mandatory function to call to use the PlayerRank component
Void ComponentPlayerRank_SetDivisions(LibStructuresMatchmaking_K_Division[Text] _Divisions) {
	ComponentPlayerRank_G_Divisions.clear();
	ComponentPlayerRank_G_Divisions = _Divisions;
}

Integer ComponentPlayerRank_GetRankNumberFromDivisionId(Text _DivisionId) {
	declare Integer Rank = -1;
	if (ComponentPlayerRank_G_Divisions.existskey(_DivisionId)) Rank = ComponentPlayerRank_G_Divisions[_DivisionId].Position;
	return Rank;
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank, Integer _InitialRank) {
	declare CMlQuad Quad_PlayerRankBg <=> (_Frame_PlayerRank.GetFirstChild("ComponentPlayerRank_quad-rank") as CMlQuad);

	Quad_PlayerRankBg.ChangeImageUrl(ComponentPlayerRank_C_Rank_Icons.get(_NewRank, ""));
	if (_InitialRank >= 0) {
		AnimMgr.Flush(_Frame_PlayerRank);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.35\" rot=\""^ComponentPlayerRank_ML::Rand(-4., 4.)^"\"/>", ComponentPlayerRank_C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadIn);
		AnimMgr.Add(_Frame_PlayerRank, "<anim scale=\"1.\" rot=\"0.\"/>", Now + ComponentPlayerRank_C_RankAnim_Duration/4, 3*ComponentPlayerRank_C_RankAnim_Duration/4, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Integer _NewRank) {
	ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, _NewRank, -1);
}

Void ComponentPlayerRank_UpdatePlayerRank(CMlFrame _Frame_PlayerRank, Text _NewDivisionId) {
	declare Integer NewRank = ComponentPlayerRank_GetRankNumberFromDivisionId(_NewDivisionId);
	ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, NewRank, -1);
}



// */
// @Component end component-playerrank

// @Component start component-cmgame-expendable-asset
// /*

***MainInit***
***
CMGame_ExpendableAsset::MainInit(This);
***

***MainStart***
***
CMGame_ExpendableAsset::MainStart(This);
***

***MainLoop***
***
CMGame_ExpendableAsset::MainLoop(This);
***

// */
// @Component end component-cmgame-expendable-asset

// @Component start component-trackmania-expendable-asset
// /*

***MainInit***
***
CMGame_ExpendableAsset::Trackmania_MainInit(This);
***

// */
// @Component end component-trackmania-expendable-asset

// @Component start component-transition
// /*

***MainInit***
***
CMGame_Transition::MainInit(This);
***

***MainLoop***
***
CMGame_Transition::MainLoop(This);
***

// */
// @Component end component-transition

// @Component start component-navigationtabs
// /*

***MainInit***
***
Trackmania_NavigationTabs::MainInit(This);
***

***MainStart***
***
Trackmania_NavigationTabs::MainStart(This);
***

***MainLoop***
***
Trackmania_NavigationTabs::MainLoop(This);
***

// */
// @Component end component-navigationtabs

// @Component start component-form-select
// /*

***MainInit***
***
CMGame_FormSelect::MainInit(This);
***

***MainStart***
***
CMGame_FormSelect::MainStart(This);
***

***MainLoop***
***
CMGame_FormSelect::MainLoop(This);
***

// */
// @Component end component-form-select

// @Component start component-popupreportsystem
// /*

***MainInit***
***
ComponentPopUpReportSystem::MainInit(This);
***

***MainStart***
***
ComponentPopUpReportSystem::MainStart(This);
***

***MainLoop***
***
ComponentPopUpReportSystem::MainLoop(This);
***

// */
// @Component end component-popupreportsystem

// @Component start component-cmgame-player-name
// /*

***MainInit***
***
CMGame_PlayerName::MainInit(This);
***

***MainLoop***
***
CMGame_PlayerName::MainLoop(This);
***

// */
// @Component end component-cmgame-player-name

// @Component start component-profileplayerinfo
// /*

declare ComponentProfilePlayerInfo_K_Event[] ComponentProfilePlayerInfo_PendingEvents;
declare ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_G_State;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle;
declare Ident ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank;

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (State.Scene.SceneId != NullId && !ComponentProfilePlayerInfo_MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)) {
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
			State.Scene.CurrentItemId = NullId;
		}
		if (State.Scene.CurrentExtraItemId != NullId) {
			MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
			State.Scene.CurrentExtraItemId = NullId;
		}

		declare Text CarSkinUrl = "";
		declare Text CarSkinName = "Skins/Models/CarSport/Stadium_World.zip";
		if (State.PlayerProfile.CarSkin.Name != "") {
			CarSkinName = State.PlayerProfile.CarSkin.Name;
			CarSkinUrl = State.PlayerProfile.CarSkin.FileUrl;
		} else if (State.PlayerProfile.Zone.CarSkinName != "") {
			CarSkinName = State.PlayerProfile.Zone.CarSkinName;
			CarSkinUrl = State.PlayerProfile.Zone.CarSkinUrl;
		}
		State.Scene.CurrentItemId = MenuSceneMgr.ItemCreate(
			State.Scene.SceneId,
			"CarSport",
			CarSkinName,
			CarSkinUrl,
			State.PlayerProfile.CarSkin.PrestigeOptions
		);
		if (State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetPlayerState(
				State.Scene.SceneId,
				State.Scene.CurrentItemId,
				State.PlayerProfile.SkinLightColor,
				<1., 1., 1.>,
				"",
				State.PlayerProfile.Trigram
			);
			MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentItemId, <0., 0., 0.2734>);

			declare Text PilotSkinName = "Skins/Models/CharacterPilot/Stadium.zip";
			declare Text PilotSkinUrl = "";
			declare Text PilotSkinCharacterOptions = "";
			if (State.PlayerProfile.PilotSkin.Name != "") {
				PilotSkinName = State.PlayerProfile.PilotSkin.Name;
				PilotSkinUrl = State.PlayerProfile.PilotSkin.FileUrl;
				PilotSkinCharacterOptions = State.PlayerProfile.PilotSkin.CharacterOptions;
			} else if (State.PlayerProfile.Zone.PilotSkinName != "") {
				PilotSkinName = State.PlayerProfile.Zone.PilotSkinName;
				PilotSkinUrl = State.PlayerProfile.Zone.PilotSkinUrl;
			}
			State.Scene.CurrentExtraItemId = MenuSceneMgr.ItemCreate(
				State.Scene.SceneId,
				"CharacterPilot",
				PilotSkinName,
				PilotSkinUrl,
				PilotSkinCharacterOptions
			);
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemSetPlayerState(
					State.Scene.SceneId,
					State.Scene.CurrentExtraItemId,
					State.PlayerProfile.SkinLightColor,
					<1., 1., 1.>,
					"",
					State.PlayerProfile.Trigram
				);
				MenuSceneMgr.ItemSetPivot(State.Scene.SceneId, State.Scene.CurrentExtraItemId, <-1., 0., 0.>);
			}
		}
	}

	return State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Display and create the 3D scene or destroy it
ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_K_State _State, Boolean _IsVisible) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_IsVisible) {
		if (State.Scene.SceneId == NullId) {
			State.Scene.SceneId = MenuSceneMgr.SceneCreate("Empty");
		}
		ComponentProfilePlayerInfo_MenuSceneManager::PageSynchronizeScene(Page, LocalUser);
		if (State.Scene.SceneId != NullId) {
			MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, <-0., 3.2, -11.7>, 12., 39.);
			MenuSceneMgr.PlaneReflectEnable(State.Scene.SceneId, 0.63, Null, Null, Null, Null, 0.);
		}
		State = ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(State);
	} else {
		if (State.Scene.SceneId != NullId) {
			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
				State.Scene.CurrentItemId = NullId;
			}
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
				State.Scene.CurrentExtraItemId = NullId;
			}
			MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
			State.Scene.SceneId = NullId;
		}
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry, ComponentProfilePlayerInfo_K_TrophyHistoryEntry _TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-description") as CMlLabel);
	declare CMlLabel Label_Date <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-date") as CMlLabel);
	declare CMlLabel Label_Amount <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-amount") as CMlLabel);
	Label_Description.Value = _TrophyHistoryEntry.Description;
	ComponentProfilePlayerInfo_Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	Label_Date.Value = _TrophyHistoryEntry.Date;
	Label_Amount.Value = ""^_TrophyHistoryEntry.Amount;
	// Trophies are taken into account for the ranking during 1 year
	if (ComponentProfilePlayerInfo_TiL::GetLocalDelta_Years(ComponentProfilePlayerInfo_TiL::GetCurrent(), ""^_TrophyHistoryEntry.TimeStamp) >= 1) {
		Label_Description.Opacity = 0.6;
		Label_Date.Opacity = 0.6;
		Label_Amount.Opacity = 0.6;
	} else {
		Label_Description.Opacity = 1.;
		Label_Date.Opacity = 1.;
		Label_Amount.Opacity = 1.;
	}
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntryLoading(CMlFrame _Frame_TrophyHistoryEntry) {
	declare CMlLabel Label_Description <=> (_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-description") as CMlLabel);
	Label_Description.Value = "|Data|Retrieving";
	ComponentProfilePlayerInfo_Tools::FitLabelValue(Label_Description, 2., 0.5, 0.25);
	(_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-date") as CMlLabel).Value = "";
	(_Frame_TrophyHistoryEntry.GetFirstChild("ComponentProfilePlayerInfo_label-amount") as CMlLabel).Value = "";
	_Frame_TrophyHistoryEntry.Visible = True;
}

Void ComponentProfilePlayerInfo_Private_HideTrophyHistoryEntry(CMlFrame _Frame_TrophyHistoryEntry) {
	_Frame_TrophyHistoryEntry.Visible = False;
}

Void ComponentProfilePlayerInfo_Private_PlayPagerAnim(CMlFrame _Button_Pager) {
	AnimMgr.Flush(_Button_Pager);
	_Button_Pager.RelativeScale = 1.;
	AnimMgr.Add(_Button_Pager, "<a scale=\"1.1\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	AnimMgr.AddChain(_Button_Pager, "<a scale=\"1\" />", 100, CAnimManager::EAnimManagerEasing::QuadOut);
}

Void ComponentProfilePlayerInfo_Private_SendCloseEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_Close,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendPrevPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_Private_PlayPagerAnim(_State.Controls.Button_PrevPlayer);
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_PrevPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendNextPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_Private_PlayPagerAnim(_State.Controls.Button_NextPlayer);
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_NextPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendEditPlayerEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_EditPlayer,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendGarageEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_Garage,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}
Void ComponentProfilePlayerInfo_Private_SendMyAccessInfoEvent(ComponentProfilePlayerInfo_K_State _State) {
	ComponentProfilePlayerInfo_PendingEvents.add(ComponentProfilePlayerInfo_K_Event {
		Type = ComponentProfilePlayerInfo_C_EventType_MyAccessInfo,
		CurrentUserId = _State.PlayerProfile.UserId
	});
}

Void ComponentProfilePlayerInfo_Private_EnableUnderline(CMlControl _Control, Boolean _Enabled) {
	if (_Control.Parent != Null) {
		declare CMlControl Control_Underline <=> _Control.Parent.GetFirstChild("ComponentProfilePlayerInfo_quad-underline");
		if (Control_Underline != Null) {
			if (_Enabled) {
				AnimMgr.Add(Control_Underline, "<a opacity=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				AnimMgr.Add(Control_Underline, "<a opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}
	}
}

Boolean ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_K_State _State) {
	return (
		_State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Trophies &&
		_State.SelectedTrophyKey >= 0 &&
		!ComponentNavigation_ComponentNavigation::IsLocked(_State.Controls.Frame_TrophiesList)
	);
}

Void ComponentProfilePlayerInfo_Private_UpdateControllerInfo(ComponentProfilePlayerInfo_K_State _State, CMlControl _Focus) {
	declare Text[Text] Buttons;
	if (_Focus != Null) {
		if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(_State)) {
			Buttons["up"] = ""; //< empty on purpose
			//L16N [Profile] Browse the trophies history of the player
			Buttons["down"] = _("|History|Browse");
			Buttons["B"] = _("Back");
		} else if (_Focus.HasClass("ComponentProfilePlayerInfo_controller-info-pager")) {
			Buttons["left"] = ""; //< empty on purpose
			//L16N [Profile] Browse the rankings of the player
			Buttons["right"] = _("|Rankings|Browse");
		} else {
			Buttons["A"] = _("Select");
		}
	}

	if (This is CMlScriptIngame) {
		ComponentMenuButtonList_SetButtons(_State.Controls.Frame_ButtonList, Buttons);
	} else {
		ComponentProfilePlayerInfo_ControllerInfo::SetButtons(Buttons);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusUnsetPage(CMlQuad _Quad_Unset, Boolean _Focused) {
	if (_Focused) {
		_Quad_Unset.Opacity = 1.;
		_Quad_Unset.Colorize = <1., 0., 0.>;
	} else {
		_Quad_Unset.Opacity = 0.5;
		_Quad_Unset.Colorize = <1., 1., 1.>;
	}
}

Void ComponentProfilePlayerInfo_Private_FocusTrophyKey(ComponentProfilePlayerInfo_K_State _State, Integer _FocusedTrophyKey, Integer _SelectedTrophyKey, Boolean _TrophiesListIsFocused) {
	foreach (ControlKey => Control in _State.Controls.Frame_TrophiesList.Controls) {
		declare CMlFrame Frame_Trophy <=> (Control as CMlFrame);
		declare CMlQuad Quad_TrophyBG <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-bg") as CMlQuad);
		declare CMlQuad Quad_TrophyIcon <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyFocus <=> (Frame_Trophy.GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-focus") as CMlQuad);

		declare Real TrophyBGOpacity = 0.2;
		declare Real TrophyCountOpacity = 0.8;
		declare Real TrophyIconOpacity = 0.8;
		declare Real TrophyFocusOpacity = 0.;
		if (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId) {
			if (ControlKey == _SelectedTrophyKey) {
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
				TrophyFocusOpacity = 1.;
			} else if (_TrophiesListIsFocused && ControlKey == _FocusedTrophyKey) {
				Label_TrophyCount.TTS_Focus();
				TrophyBGOpacity = 0.6;
				TrophyCountOpacity = 1.;
				TrophyIconOpacity = 1.;
			}
		}

		declare Text TrophyCountColor = "6EFAA0";
		if (
			(_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId && ControlKey == _SelectedTrophyKey) ||
			(!_State.TrophiesCount.existskey(_State.Controls.Frame_TrophiesList.Controls.count - ControlKey) || _State.TrophiesCount[_State.Controls.Frame_TrophiesList.Controls.count - ControlKey] <= 0)
		) {
			TrophyCountColor = "FFFFFF";
		}

		AnimMgr.Flush(Quad_TrophyBG);
		AnimMgr.Flush(Quad_TrophyIcon);
		AnimMgr.Flush(Label_TrophyCount);
		AnimMgr.Flush(Quad_TrophyFocus);
		AnimMgr.Add(Quad_TrophyBG, "<anim opacity=\""^TrophyBGOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyIcon, "<anim opacity=\""^TrophyIconOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_TrophyCount, "<anim textcolor=\""^TrophyCountColor^"\" opacity=\""^TrophyCountOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Quad_TrophyFocus, "<anim opacity=\""^TrophyFocusOpacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusTrophiesList(ComponentProfilePlayerInfo_K_State _State, Boolean _TrophiesListIsFocused) {
	ComponentProfilePlayerInfo_Private_FocusTrophyKey(_State, _State.FocusedTrophyKey, _State.SelectedTrophyKey, _TrophiesListIsFocused);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = ComponentProfilePlayerInfo_ML::Clamp(_TrophyKey, 0, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.FocusedTrophyKey == NewTrophyKey) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.FocusedTrophyKey = NewTrophyKey;
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);

	return State;
}

Void ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_K_State _State, CMlFrame _Frame_Container) {
	if (_Frame_Container != Null && _Frame_Container.HasClass("ComponentProfilePlayerInfo_controller-info-pager")) {
		if (ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle == NullId) ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);
		if (ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank == NullId) ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);

		if (_Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-info-campaign-ranking") {
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle, _State.Controls.Label_TopCampaignName);
			if (_State.Controls.Label_TopText.Visible) {
				ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, ComponentProfilePlayerInfo_TL::GetTranslatedText(ComponentProfilePlayerInfo_TL::Compose("%1 %2 %3", "|Rank|Top", _State.Controls.Label_TopCampaignRank.Value, _State.Controls.Label_TopCampaignZone.Value)), True);
			} else {
				ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, _State.Controls.Label_TopCampaignZone);
			}
		} else if (_Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-trophies-ranking" || _Frame_Container.ControlId == "ComponentProfilePlayerInfo_frame-info-ranking") {
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle, "Global rank", True);
			ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank, ComponentProfilePlayerInfo_TL::Compose("%1 %2 %3", "|Rank|Top", _State.Controls.Label_TrophiesGlobalRankingPosition.Value, _State.Controls.Label_TrophiesGlobalRankingZone.Value), True);
		}

		ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Section);
	} else {
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank);
	}
}
Void ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_K_State _State, CMlControl _Control) {
	if (_Control != Null && _Control.HasClass("ComponentProfilePlayerInfo_focus-opacity-element") && _Control.Parent != Null && _Control.Parent.Parent != Null) {
		ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _Control.Parent.Parent);
	} else {
		ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _Control as CMlFrame);
	}
}

Void ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(ComponentProfilePlayerInfo_K_State _State, CMlFrame _Frame_Container, Boolean _Focused) {
	if (_Frame_Container != Null) {
		Page.GetClassChildren("ComponentProfilePlayerInfo_focus-opacity-element", _Frame_Container, True);
		foreach (Control in Page.GetClassChildren_Result) {
			if (_Focused && Control.DataAttributeExists("ComponentProfilePlayerInfo_opacity-focus")) {
				if (Trackmania_Button::IsButton(Control)) {
					Trackmania_Button::SetOpacityUnfocus(This, (Control as CMlFrame), ComponentProfilePlayerInfo_TL::ToReal(Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-focus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-focus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else if (!_Focused && Control.DataAttributeExists("ComponentProfilePlayerInfo_opacity-unfocus")) {
				if (Trackmania_Button::IsButton(Control)) {
					Trackmania_Button::SetOpacityUnfocus(This, (Control as CMlFrame), ComponentProfilePlayerInfo_TL::ToReal(Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-unfocus")));
				} else {
					AnimMgr.Flush(Control);
					AnimMgr.Add(Control, "<anim opacity=\""^Control.DataAttributeGet("ComponentProfilePlayerInfo_opacity-unfocus")^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			}
		}
	}
}

Void ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_K_State _State, CMlControl _From, CMlControl _To) {
	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);

		if (Trackmania_Button::IsButton(_From)) {
			Trackmania_Button::Unfocus(This, (_From as CMlFrame));
		} else if (CMGame_Scroll::IsScroll(_From)) {
			CMGame_Scroll::Unfocus(This, (_From as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_From)) {
			CMGame_ExpendableButton::Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("ComponentProfilePlayerInfo_focus-opacity-container")) {
			ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(_State, (_From as CMlFrame), False);
		} else if (_From.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			ComponentProfilePlayerInfo_Private_FocusTrophiesList(_State, False);
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);

		if (Trackmania_Button::IsButton(_To)) {
			Trackmania_Button::Focus(This, (_To as CMlFrame));
		} else if (CMGame_Scroll::IsScroll(_To)) {
			CMGame_Scroll::Focus(This, (_To as CMlFrame));
		} else if (CMGame_ExpendableButton::IsButton(_To)) {
			CMGame_ExpendableButton::Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("ComponentProfilePlayerInfo_focus-opacity-container")) {
			ComponentProfilePlayerInfo_Private_FocusOpacityContainerUpdate(_State, (_To as CMlFrame), True);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(_State, _To as CMlFrame);
		} else if (_To.ControlId == _State.Controls.Frame_TrophiesList.ControlId) {
			ComponentProfilePlayerInfo_Private_FocusTrophiesList(_State, True);
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(_State, _To);
}
Void ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_K_State _State, CMlControl _To) {
	assert(_To != Null, "Use Private_Focus(K_State _State, CMlControl _From, CMlControl _To) to focus Null");
	declare Text TargetNavGroup = ComponentNavigation_ComponentNavigation::GetControlGroupName(_To);
	ComponentProfilePlayerInfo_Private_Focus(_State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, TargetNavGroup), _To);
}

Void ComponentProfilePlayerInfo_Anim_FadeInOut(CMlQuad _Quad, Boolean _FadeIn) {
	AnimMgr.Flush(_Quad);
	if (_FadeIn) {
		AnimMgr.Add(_Quad, "<a opacity=\"1.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(_Quad, "<a opacity=\"0.\" />", 215, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(ComponentProfilePlayerInfo_K_State _State, Integer _NewTabDisplayed) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Save control focused in the old tab
	State.TabsFocuses[State.TabDisplayed] = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");

	State.TabDisplayed = _NewTabDisplayed;
	State.Controls.Frame_Trophies.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Trophies;
	State.Controls.Frame_RankedStats.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Ranked;
	State.Controls.Frame_RoyalStats.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_Royal;
	State.Controls.Frame_MainProfile.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General;
	State.Controls.Frame_CurrentSkin.Visible = State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General;

	// Display the car only when the profile is displayed and the general tab selected
	State = ComponentProfilePlayerInfo_Private_Display3DScene(State, State.Enabled && State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);
	ComponentProfilePlayerInfo_Anim_FadeInOut(State.Controls.Quad_Lights, State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);

	if (Trackmania_NavigationTabs::GetCurrentTab(State.Controls.NavigationTabs_Categories) != State.TabDisplayed) {
		Trackmania_NavigationTabs::UpdateCurrentTab(This, State.Controls.NavigationTabs_Categories, State.TabDisplayed, False);
	}

	// Update navigation and report context
	declare Text UpTargetControlId = "";
	switch (State.TabDisplayed) {
		case ComponentProfilePlayerInfo_C_TabDisplayed_General: {
			UpTargetControlId = "ComponentProfilePlayerInfo_frame-info-campaign-ranking";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Trophies: {
			UpTargetControlId = "ComponentProfilePlayerInfo_frame-trophies-list";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Royal: {
			UpTargetControlId = "";
		}
		case ComponentProfilePlayerInfo_C_TabDisplayed_Ranked: {
			UpTargetControlId = "";
		}
	}
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Back, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_MyAccess, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_UpdateZone, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Garage, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_FirstPartyProfile, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_UbisoftConnectProfile, "up", UpTargetControlId);
	ComponentNavigation_ComponentNavigation::ChangeControlTarget(This, State.Controls.Button_Report, "up", UpTargetControlId);

	// Select a control to focus
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (
		ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(State) &&
		!ComponentNavigation_ComponentNavigation::IsLocked(State.Controls.Frame_TrophiesList)
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Frame_TrophiesList);
		State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(State, State.SelectedTrophyKey);
	} else if (
		(FocusedControl == Null || !FocusedControl.HasClass("ComponentProfilePlayerInfo_bottom-button")) &&
		State.TabsFocuses.existskey(State.TabDisplayed) &&
		State.TabsFocuses[State.TabDisplayed] != Null &&
		!ComponentNavigation_ComponentNavigation::IsLocked(State.TabsFocuses[State.TabDisplayed])
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.TabsFocuses[State.TabDisplayed]);
	} else if (
		FocusedControl == Null ||
		!FocusedControl.HasClass("ComponentProfilePlayerInfo_bottom-button") ||
		ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)
	) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_SetZoneFlag(ComponentProfilePlayerInfo_K_State _State, Text _FlagUrl) {
	_State.Controls.Quad_PlayerCardFlag.ImageUrl = _FlagUrl;
}

Void ComponentProfilePlayerInfo_Private_SetPlayerName(ComponentProfilePlayerInfo_K_State _State, Text _PlayerName, Text _ClubTag, Boolean _IsFirstPartyDisplayName, Boolean _IsFakeUser) {
	CMGame_PlayerName::SetName(This, _State.Controls.PlayerName_PlayerCardName, _PlayerName, _ClubTag, _IsFirstPartyDisplayName, !_IsFakeUser);
}

Text ComponentProfilePlayerInfo_Private_GetTrophyImage(Integer _Trophy) {
	declare TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds";
	switch (_Trophy) {
		case 0: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_base_00.dds";
		case 1: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_1.dds"; //< T1 trophy
		case 2: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_2.dds";
		case 3: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_bronze_3.dds";
		case 4: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_1.dds";
		case 5: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_2.dds";
		case 6: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_silver_3.dds";
		case 7: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_1.dds";
		case 8: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_2.dds";
		case 9: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/512/trophy_gold_3.dds"; //< T9 trophy
	}
	return TrophyImage;
}
Text ComponentProfilePlayerInfo_Private_GetTrophyImageSmall(Integer _Trophy) {
	declare TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_base_00.dds";
	switch (_Trophy) {
		case 0: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_base_00.dds";
		case 1: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_1.dds"; //< T1 trophy
		case 2: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_2.dds";
		case 3: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_bronze_3.dds";
		case 4: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_1.dds";
		case 5: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_2.dds";
		case 6: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_silver_3.dds";
		case 7: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_1.dds";
		case 8: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_2.dds";
		case 9: TrophyImage = "file://Media/Manialinks/Nadeo/Trackmania/Trophies/128/trophy_gold_3.dds"; //< T9 trophy
	}
	return TrophyImage;
}

Integer ComponentProfilePlayerInfo_GetBestTrophy(Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = 0;
	foreach (Trophy => TrophyCount in _TrophiesCount) {
		if (TrophyCount > 0 && Trophy > BestTrophy) BestTrophy = Trophy;
	}
	return BestTrophy;
}

Void ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(ComponentProfilePlayerInfo_K_State _State, Integer[Integer] _TrophiesCount) {
	declare Integer BestTrophy = ComponentProfilePlayerInfo_GetBestTrophy(_TrophiesCount);

	_State.Controls.Quad_TopTrophy.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(BestTrophy);
	_State.Controls.Quad_BestTrophy.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(BestTrophy);

	if (_TrophiesCount.count > 0) {
		_State.Controls.Label_TopTrophyCount.Value = ""^_TrophiesCount[BestTrophy];
	} else {
		_State.Controls.Label_TopTrophyCount.Value = "0";
	}
}

Integer[Integer] ComponentProfilePlayerInfo_GetTrophyCount(CAccountTrophyLastYearSummary _TrophiesSummary) {
	if (_TrophiesSummary == Null) return [];

	declare Integer[Integer] TrophiesCount;
	for (Index, 0, 9) {
		switch (Index) {
			case 0: TrophiesCount[0] = 0;
			case 1: TrophiesCount[1] = _TrophiesSummary.T1Count;
			case 2: TrophiesCount[2] = _TrophiesSummary.T2Count;
			case 3: TrophiesCount[3] = _TrophiesSummary.T3Count;
			case 4: TrophiesCount[4] = _TrophiesSummary.T4Count;
			case 5: TrophiesCount[5] = _TrophiesSummary.T5Count;
			case 6: TrophiesCount[6] = _TrophiesSummary.T6Count;
			case 7: TrophiesCount[7] = _TrophiesSummary.T7Count;
			case 8: TrophiesCount[8] = _TrophiesSummary.T8Count;
			case 9: TrophiesCount[9] = _TrophiesSummary.T9Count;
		}
	}
	return TrophiesCount;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophies(ComponentProfilePlayerInfo_K_State _State, CAccountTrophyLastYearSummary _TrophiesSummary) {
	declare ComponentProfilePlayerInfo_K_State State = _State;
	State.TrophiesCount = ComponentProfilePlayerInfo_GetTrophyCount(_TrophiesSummary);
	declare BestTrophy = ComponentProfilePlayerInfo_GetBestTrophy(State.TrophiesCount);

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlLabel Label_TrophyCount <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_label-trophy-count") as CMlLabel);
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		declare Integer Trophy = State.Controls.Frame_TrophiesList.Controls.count - Key;

		if (State.TrophiesCount.existskey(Trophy)) Label_TrophyCount.Value = ""^State.TrophiesCount[Trophy];
		else Label_TrophyCount.Value = "0";
		Label_TrophyCount.TTS_AltText = ComponentProfilePlayerInfo_TL::Compose("%1 trophy %2", Label_TrophyCount.Value, ""^Trophy);
		if (Trophy <= BestTrophy) {
			Quad_TrophyIcon.ChangeImageUrl(ComponentProfilePlayerInfo_Private_GetTrophyImage(Trophy));
		} else {
			Quad_TrophyIcon.ChangeImageUrl(ComponentProfilePlayerInfo_Private_GetTrophyImage(0));
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(State, State.TrophiesCount);

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList));

	return State;
}

Void ComponentProfilePlayerInfo_Private_SetTrophiesPoints(ComponentProfilePlayerInfo_K_State _State, Integer _Points) {
	_State.Controls.Label_TrophiesPoints.Value = ""^_Points;
	if (_Points > 1) {
		_State.Controls.Label_TrophiesPointsText.Value = "|Score|Points";
	} else {
		_State.Controls.Label_TrophiesPointsText.Value = "|Score|Point";
	}
}

Void ComponentProfilePlayerInfo_Private_SetEchelon(ComponentProfilePlayerInfo_K_State _State, Integer _Echelon) {
	declare Integer Echelon = ComponentProfilePlayerInfo_ML::Clamp(_Echelon, ComponentProfilePlayerInfo_C_Echelon_Null, ComponentProfilePlayerInfo_C_Echelon_Gold3);
	if (Echelon >= ComponentProfilePlayerInfo_C_Echelon_Bronze1) {
		switch (_Echelon) {
			case ComponentProfilePlayerInfo_C_Echelon_Bronze1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Bronze2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Bronze3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_bronze_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Bronze 3";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Silver3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_silver_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Silver 3";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold1: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_1.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 1";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold2: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_2.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 2";
			}
			case ComponentProfilePlayerInfo_C_Echelon_Gold3: {
				_State.Controls.Quad_PlayerCardEchelon.ImageUrl = "file://Media/Manialinks/Nadeo/Trackmania/Modes/Race/Rungs/64_rung_gold_3.dds";
				_State.Controls.Label_PlayerCardEchelon.Value = "|Echelon|Gold 3";
			}
		}
		_State.Controls.Quad_PlayerCardEchelon.Visible = True;
		_State.Controls.Label_PlayerCardEchelon.Visible = True;
	} else {
		_State.Controls.Quad_PlayerCardEchelon.Visible = False;
		_State.Controls.Label_PlayerCardEchelon.Visible = False;
	}
}

Void ComponentProfilePlayerInfo_Private_SetRank(
	CMlFrame _Frame_PlayerRank,
	CMlLabel _Label_Rank,
	CMlLabel _Label_RankDate,
	Text _DivisionId,
	Text _ProgressionDate,
	Boolean _ShowMinRankIfNoInfo,
	CMlLabel _Label_RankNoInfo
) {
	if (_DivisionId != "") {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, _DivisionId);
		declare Integer BestRank = ComponentPlayerRank_GetRankNumberFromDivisionId(_DivisionId);
		_Label_Rank.Value = ComponentProfilePlayerInfo_C_Rank_Names.get(BestRank, "");
		_Label_RankDate.Value = ComponentProfilePlayerInfo_TiL::FormatDate(_ProgressionDate, ComponentProfilePlayerInfo_TiL::EDateFormats::MonthYear);
	} else if (_ShowMinRankIfNoInfo) {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, 1);
		_Label_Rank.Value = ComponentProfilePlayerInfo_C_Rank_Names.get(1, "");
		_Label_RankDate.Value = "";
	} else {
		if (_Label_RankNoInfo != Null) _Label_RankNoInfo.Value = "No data";
		ComponentPlayerRank_UpdatePlayerRank(_Frame_PlayerRank, -1);
		_Label_Rank.Value = "";
		_Label_RankDate.Value = "";
	}
}

Void ComponentProfilePlayerInfo_Private_SetRankedStats(ComponentProfilePlayerInfo_K_State _State, Boolean _DisplaySensibleData) {
	// Ranked button preview
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerBestRank, _State.Controls.Label_BestRank, _State.Controls.Label_BestRankDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, True, Null);

	//Ranked Stats
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerCurrentSeason, _State.Controls.Label_CurrentSeason, _State.Controls.Label_CurrentSeasonDate, _State.Ranked.Stats.CurrentDivision, ComponentProfilePlayerInfo_TiL::GetCurrent(), True, Null);
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerPreviousSeason, _State.Controls.Label_PreviousSeason, _State.Controls.Label_PreviousSeasonDate, _State.Ranked.Stats.PreviousDivision, ""^_State.Ranked.Stats.PreviousProgressionDate, False, _State.Controls.Label_PreviousRankedError);
	ComponentProfilePlayerInfo_Private_SetRank(_State.Controls.Frame_PlayerBestSeason, _State.Controls.Label_BestSeason, _State.Controls.Label_BestSeasonDate, _State.Ranked.Stats.BestDivision, ""^_State.Ranked.Stats.BestProgressionDate, False, _State.Controls.Label_BestRankedError);
	ComponentProfilePlayerInfo_G_State.Controls.Frame_SensibleData.Visible = _DisplaySensibleData;
	if (_DisplaySensibleData) {
		declare Real WinRate = 0.;
		if (_State.Ranked.Stats.PlayedMatches > 0) WinRate = ((_State.Ranked.Stats.Victories * 1.)  / _State.Ranked.Stats.PlayedMatches) * 100.; //Do not remove the *1. on the integer in the division, otherwise WinRate will be 0
		ComponentProfilePlayerInfo_G_State.Controls.Label_MatchesCount.Value = ""^_State.Ranked.Stats.PlayedMatches;
		ComponentProfilePlayerInfo_G_State.Controls.Label_WinRate.Value = ComponentProfilePlayerInfo_TL::Compose("%1%%", ""^ComponentProfilePlayerInfo_ML::NearestInteger(WinRate));
		ComponentProfilePlayerInfo_G_State.Controls.Label_MVPCount.Value = ""^_State.Ranked.Stats.MVPCount;
		AnimMgr.Flush(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData);
		AnimMgr.Add(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData, "<a pos=\"0 "^ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Flush(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData);
		AnimMgr.Add(ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData, "<a pos=\"-48 "^ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData.RelativePosition_V3.Y^"\" />", 50, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

	Void ComponentProfilePlayerInfo_Private_SetRoyalLevel(
	CMlFrame _Frame_RoyalLevel,
	CMlLabel _Label_RoyalLevel,
	CMlLabel _Label_RoyalVictories,
	Text _DivisionId,
	Integer _Victories
) {
	Trackmania_PlayerRoyalVictories::UpdatePlayerRoyalVictories(This, _Frame_RoyalLevel, _DivisionId, _Victories);
	declare Integer RoyalLevel = Trackmania_PlayerRoyalVictories::GetRoyalLevelFromDivisionId(This, _DivisionId);
	if (_Label_RoyalLevel != Null) _Label_RoyalLevel.Value = ComponentProfilePlayerInfo_C_Royal_Level_Names.get(RoyalLevel, "");
	if (_Label_RoyalVictories != Null) _Label_RoyalVictories.Value = ""^_Victories;
}

Void ComponentProfilePlayerInfo_Private_SetSuperRoyalStats(
	CMlQuad _Quad_SuperRoyalLogo,
	CMlLabel _Label_SuperRoyalVictories,
	CMlLabel _Label_BronzeVictories,
	CMlLabel _Label_SilverVictories,
	CMlLabel _Label_GoldVictories,
	CMlLabel _Label_MasterVictories,
	Integer _BronzeVictories,
	Integer _SilverVictories,
	Integer _GoldVictories,
	Integer _MasterVictories
) {
	declare Text BestSuperRoyalDivision = "";
	declare Integer BestSuperRoyalVictories = 0;
	if (_MasterVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Master;
		BestSuperRoyalVictories = _MasterVictories;
	} else if (_GoldVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Gold;
		BestSuperRoyalVictories = _GoldVictories;
	} else if (_SilverVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Silver;
		BestSuperRoyalVictories = _SilverVictories;
	} else if (_BronzeVictories > 0) {
		BestSuperRoyalDivision = ComponentProfilePlayerInfo_C_SuperRoyal_Division_Bronze;
		BestSuperRoyalVictories = _BronzeVictories;
	}

	_Label_BronzeVictories.Value = ""^_BronzeVictories;
	_Label_SilverVictories.Value = ""^_SilverVictories;
	_Label_GoldVictories.Value = ""^_GoldVictories;
	_Label_MasterVictories.Value = ""^_MasterVictories;
	_Quad_SuperRoyalLogo.ChangeImageUrl(ComponentProfilePlayerInfo_C_SuperRoyal_Logos.get(BestSuperRoyalDivision, ""));
	_Label_SuperRoyalVictories.Value = ""^BestSuperRoyalVictories;
}

Void ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_K_State _State) {
	// Royal button preview
	ComponentProfilePlayerInfo_Private_SetRoyalLevel(_State.Controls.Frame_MainRoyalLevel, _State.Controls.Label_MainRoyalLevel, Null, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.CurrentProgression);

	// Royal stats
	ComponentProfilePlayerInfo_Private_SetRoyalLevel(_State.Controls.Frame_RoyalLevel, Null, _State.Controls.Label_RoyalVictories, _State.Royal.Stats.CurrentDivision, _State.Royal.Stats.Victories);
	// Super Royal stats
	ComponentProfilePlayerInfo_Private_SetSuperRoyalStats(
		_State.Controls.Quad_SuperRoyalLogo,
		_State.Controls.Label_SuperRoyalVictories,
		_State.Controls.Label_BronzeVictories,
		_State.Controls.Label_SilverVictories,
		_State.Controls.Label_GoldVictories,
		_State.Controls.Label_MasterVictories,
		_State.SuperRoyal.Stats.BronzeVictories,
		_State.SuperRoyal.Stats.SilverVictories,
		_State.SuperRoyal.Stats.GoldVictories,
		_State.SuperRoyal.Stats.MasterVictories
	);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_K_State _State, Integer _PageNb, Boolean _PlaySound) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare Integer NewCurrentPage = ComponentProfilePlayerInfo_ML::Clamp(_PageNb, 0, State.TrophiesRankingsPager.MaxPage);

	if (NewCurrentPage > State.TrophiesRankingsPager.CurrentPage) {
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_NextZone);
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesNextZone);
		if (_PlaySound) ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
	} else if (NewCurrentPage < State.TrophiesRankingsPager.CurrentPage) {
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_PrevZone);
		ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Button_GeneralTrophiesPreviousZone);
		if (_PlaySound) ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
	}

	State.Controls.Button_NextZone.Visible = (_PageNb < State.TrophiesRankingsPager.MaxPage);
	State.Controls.Button_GeneralTrophiesNextZone.Visible = State.Controls.Button_NextZone.Visible;
	State.Controls.Button_PrevZone.Visible = (_PageNb > 0);
	State.Controls.Button_GeneralTrophiesPreviousZone.Visible = State.Controls.Button_PrevZone.Visible;

	State.TrophiesRankingsPager.CurrentPage = NewCurrentPage;

	if (
		State.TrophiesRankingsPager.TrophiesRankings.count <= 0 ||
		!State.TrophiesRankingsPager.TrophiesRankings.existskey(State.TrophiesRankingsPager.CurrentPage)
	) {
		if (State.TrophyRankingLoadingError != ComponentProfilePlayerInfo_C_ErrorCode_None) {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving ranking (code: %1)", State.TrophyRankingLoadingError);
		} else {
			State.Controls.Label_TrophiesGlobalRankingZone.Value = "Not ranked";
		}
		State.Controls.Label_TrophiesGlobalRankingPosition.Value = "-";
	} else {
		declare LibCampaignStruct_K_Ranking TrophiesRanking = State.TrophiesRankingsPager.TrophiesRankings[State.TrophiesRankingsPager.CurrentPage];

		State.Controls.Label_TrophiesGlobalRankingPosition.Value = ComponentProfilePlayerInfo_Tools::FormatTop(TrophiesRanking.Position, False);
		State.Controls.Label_TrophiesGlobalRankingZone.Value = ComponentProfilePlayerInfo_C_Zone_Translations.get(TrophiesRanking.ZoneName, ComponentProfilePlayerInfo_TL::GetTranslatedText(TrophiesRanking.ZoneName));
	}

	State.Controls.Label_TrophyTopRank.Value = State.Controls.Label_TrophiesGlobalRankingPosition.Value;
	State.Controls.Label_TrophyTopRankZone.Value = State.Controls.Label_TrophiesGlobalRankingZone.Value;

	ComponentProfilePlayerInfo_Tools::FitLabelValue(State.Controls.Label_TrophiesGlobalRankingZone, 2.5, 1.5, 0.25);
	ComponentProfilePlayerInfo_Tools::FitLabelValue(State.Controls.Label_TrophyTopRankZone, 2.5, 1.5, 0.25);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesRankings(ComponentProfilePlayerInfo_K_State _State, LibCampaignStruct_K_Ranking[] _TrophiesRankings) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.TrophiesRankingsPager.TrophiesRankings = _TrophiesRankings;
	State.TrophiesRankingsPager.MaxPage = ComponentProfilePlayerInfo_ML::Max(0, _TrophiesRankings.count - 1);

	// Find the better zone with a rank below or equal to 100
	declare Integer PageNb = _TrophiesRankings.count - 1;
	foreach (Key => ZoneRanking in _TrophiesRankings) {
		if (ZoneRanking.Position <= 100) {
			PageNb = Key;
			break;
		}
	}

	State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, PageNb, False);

	return State;
}

Void ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(ComponentProfilePlayerInfo_K_State _State) {
	declare Boolean IsLoading = ComponentProfilePlayerInfo_Http::IsInitialized(_State.GetPlayersTrophyRanking) && ComponentProfilePlayerInfo_Http::IsRunning(_State.GetPlayersTrophyRanking);
	_State.Controls.Frame_InfoRankingLoaded.Visible = !IsLoading;
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_Ranking, IsLoading);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(ComponentProfilePlayerInfo_K_State _State, Boolean _IsLoading) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.TrophiesHistory.IsLoading = _IsLoading;
	State.Controls.Scroll_TrophiesHistory.Visible = !State.TrophiesHistory.IsLoading;
	State.Controls.Label_TrophyHistory.Visible = !State.TrophiesHistory.IsLoading;
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_TrophiesHistory, State.TrophiesHistory.IsLoading);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetTrophyHistoryScroll(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyType, Integer _Offset, CTaskResult_AccountTrophyGainHistory _TrophyHistory) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_TrophyHistory != Null) {
		State.TrophiesHistory.TrophyScroll.Content = [];
		declare Integer Key = _Offset;

		/*
		AchievementType data

		SoloMedal:
		- Text SoloMedalAchievementType
		SoloRanking:
		- Text MapId
		- Text SeasonId
		- Text SoloRankingAchievementType
		LiveMatch:
		- Integer Duration
		- Text GameMode
		- Text GameModeCustomData
		- Boolean IsOfficial
		- Text ServerId
		CompetitionMatch:
		- Text CompetitionId
		- Text CompetitionMatchInfo
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		- Text ServerId
		CompetitionRanking:
		- Text CompetitionId
		- Text CompetitionName
		- Text CompetitionStage
		- Text CompetitionStageStep
		- Text CompetitionType
		 */

		foreach (AccountTrophyGain in _TrophyHistory.AccountTrophyGainList) {
			declare Text Description = AccountTrophyGain.TrophyAchievement.TrophyAchievementType;
			switch (AccountTrophyGain.TrophyAchievement.TrophyAchievementType) {
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloMedal: {
					declare TrophySoloMedal <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloMedal);
					declare Text AchievementType = TrophySoloMedal.SoloMedalAchievementType;
					if (ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes.existskey(TrophySoloMedal.SoloMedalAchievementType)) {
						AchievementType = ComponentProfilePlayerInfo_C_SoloMedalAchievementTypes[TrophySoloMedal.SoloMedalAchievementType];
					}
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Solo medal", AchievementType);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_SoloRanking: {
					declare TrophySoloRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_SoloRanking);
					declare Text AchievementType = TrophySoloRanking.SoloRankingAchievementType;
					if (ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes.existskey(TrophySoloRanking.SoloRankingAchievementType)) {
						AchievementType = ComponentProfilePlayerInfo_C_SoloRankingAchievementTypes[TrophySoloRanking.SoloRankingAchievementType];
					}
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Solo ranking", AchievementType);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_LiveMatch: {
					declare TrophyLiveMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_LiveMatch);
					Description = "|TrophyUnlock|Live match";
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionMatch: {
					declare TrophyCompetitionMatch <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionMatch);
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Competition match", TrophyCompetitionMatch.CompetitionName);
				}
				case ComponentProfilePlayerInfo_C_TrophyAchievementType_CompetitionRanking: {
					declare TrophyCompetitionRanking <=> (AccountTrophyGain.TrophyAchievement as CTrophyAchievement_CompetitionRanking);
					Description = ComponentProfilePlayerInfo_TL::Compose("%1 - %2", "|TrophyUnlock|Competition ranking", TrophyCompetitionRanking.CompetitionName);
				}
			}

			declare Integer Amount = 0;
			switch (_TrophyType) {
				case 1: Amount = AccountTrophyGain.T1Count;
				case 2: Amount = AccountTrophyGain.T2Count;
				case 3: Amount = AccountTrophyGain.T3Count;
				case 4: Amount = AccountTrophyGain.T4Count;
				case 5: Amount = AccountTrophyGain.T5Count;
				case 6: Amount = AccountTrophyGain.T6Count;
				case 7: Amount = AccountTrophyGain.T7Count;
				case 8: Amount = AccountTrophyGain.T8Count;
				case 9: Amount = AccountTrophyGain.T9Count;
			}

			State.TrophiesHistory.TrophyScroll.Content[Key] = ComponentProfilePlayerInfo_K_TrophyHistoryEntry {
				Description = Description,
				Date = ComponentProfilePlayerInfo_TiL::FormatDate(""^AccountTrophyGain.TimeStamp, ComponentProfilePlayerInfo_TiL::EDateFormats::DateShort),
				Amount = Amount,
				TimeStamp = AccountTrophyGain.TimeStamp
			};
			Key += 1;
		}
		State.TrophiesHistory.TrophyScroll.Total = _TrophyHistory.AccountTrophyGainTotalCount;
	} else {
		State.TrophiesHistory.TrophyScroll.Content = [];
		State.TrophiesHistory.TrophyScroll.Total = 0;
	}

	if (State.TrophiesHistory.IsLoading) {
		State = ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(State, False);
	}

	if (State.HistoryTrophyType == _TrophyType) {
		CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, State.TrophiesHistory.TrophyScroll.Total);
		if (State.TrophiesHistory.TrophyScroll.Total <= 0) {
			if (
				_TrophyHistory != Null &&
				!_TrophyHistory.HasSucceeded &&
				State.TrophiesCount.existskey(_TrophyType) &&
				State.TrophiesCount[_TrophyType] > 0
			) {
				State.Controls.Label_TrophyHistory.Value = "Trophy history unavailable";
			} else {
				State.Controls.Label_TrophyHistory.Value = "Trophy history empty";
			}
		} else {
			State.Controls.Label_TrophyHistory.Value = "";
		}
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main"));

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_RequestTrophyHistory(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyType, Integer _Offset, Integer _Count) {
	if (ScoreMgr == Null && _TrophyType <= 0) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Cancel previous task
	if (State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr.TaskResults.existskey(State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			ScoreMgr.TaskResult_Release(State.TrophiesHistory.TaskId_GetTrophyHistory);
		}
		State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
	}
	State.TrophiesHistory.RequestedTrophyType = 0;
	State.TrophiesHistory.RequestedOffset = 0;

	// Start new task
	declare CTaskResult_AccountTrophyGainHistory Task = ScoreMgr.Trophy_GetGainHistoryByType(
		ComponentProfilePlayerInfo_MainUser::GetMainUserId(),
		_TrophyType,
		_Offset,
		_Count
	);
	if (Task != Null) {
		State.TrophiesHistory.TaskId_GetTrophyHistory = Task.Id;
		State.TrophiesHistory.RequestedTrophyType = _TrophyType;
		State.TrophiesHistory.RequestedOffset = _Offset;
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	State.SelectedTrophyKey = _TrophyKey;
	if (State.SelectedTrophyKey >= 0 && State.SelectedTrophyKey < _State.Controls.Frame_TrophiesList.Controls.count) {
		State.HistoryTrophyType = _State.Controls.Frame_TrophiesList.Controls.count - State.SelectedTrophyKey;
	} else {
		State.HistoryTrophyType = 0;
	}
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);

	State.Controls.Frame_TrophiesHistory.Visible = State.HistoryTrophyType > 0 && State.PlayerProfile.AccountId == LocalUser.WebServicesUserId;
	if (State.Controls.Frame_TrophiesHistory.Visible) {
		if (!State.TrophiesHistory.IsLoading) {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesHistoryIsLoading(State, True);
		}
		CMGame_Scroll::SetElementsTotal(This, State.Controls.Scroll_TrophiesHistory, 0);
		CMGame_Scroll::TriggerPagerUpdate(State.Controls.Scroll_TrophiesHistory);
	}

	ComponentProfilePlayerInfo_Private_UpdateControllerInfo(State, ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main"));

	return State;
}
ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetSelectedTrophy(ComponentProfilePlayerInfo_K_State _State, Integer _TrophyKey) {
	declare Integer NewTrophyKey = ComponentProfilePlayerInfo_ML::Clamp(_TrophyKey, -1, _State.Controls.Frame_TrophiesList.Controls.count - 1);
	if (_State.SelectedTrophyKey == NewTrophyKey) NewTrophyKey = -1;
	return ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(_State, NewTrophyKey);
}

Void ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_K_State _State, Real _Delta) {
	if (
		_State.Controls.Frame_TrophiesHistory.Visible &&
		_State.Controls.Scroll_TrophiesHistory.Visible &&
		_State.TrophiesHistory.TrophyScroll.Total > 7
	) {
		CMGame_Scroll::ScrollDelta(This, _State.Controls.Scroll_TrophiesHistory, _Delta, 250);
	}
}

Void ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_K_State _State) {
	_State.Controls.Button_PrevPlayer.Visible = (_State.PlayersPagerEnabled && !ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer));
	_State.Controls.Button_NextPlayer.Visible = (_State.PlayersPagerEnabled && !ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer));
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	// Text to speech context
	if (_Enabled) {
		ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Enter(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
		ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs, Trackmania_NavigationTabs::GetCurrentTabLabel(State.Controls.NavigationTabs_Categories));
		ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
		if (State.Controls.Frame_ReportSystem.Visible) ComponentPopUpReportSystem::Display(This, State.Controls.Frame_ReportSystem, False);
	} else {
		ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerTitle);
		ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank = ParentApp.TTS_Context_Leave(ComponentProfilePlayerInfo_G_TTSContextIdent_ContainerRank);
	}

	if (_Enabled && !State.Enabled) {
		ComponentProfilePlayerInfo_Private_Focus(State, State.Controls.Button_Back);
	}

	State.Enabled = _Enabled;
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-main", State.Enabled);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-global", State.Enabled);
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-component-profileplayerinfo-mouse-only", State.Enabled);
	Trackmania_NavigationTabs::LockTabs(This, ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories, !_Enabled);
	ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(State);

	// Display the car only when the profile is displayed and the general tab selected
	State = ComponentProfilePlayerInfo_Private_Display3DScene(State, State.Enabled && State.TabDisplayed == ComponentProfilePlayerInfo_C_TabDisplayed_General);

	if (!State.Enabled) {
		State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableGarageButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.GarageButtonEnabled = _Enabled;
	State.Controls.Button_Garage.Visible = (
		State.GarageButtonEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_Garage, !State.Controls.Button_Garage.Visible);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_Garage && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_FirstPartyProfile,
		_Enabled && ComponentProfilePlayerInfo_Platform::IsFromFirstParty(System) && State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_FirstPartyProfile && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_UbisoftConnectProfile,
		State.PlayerProfile.AccountId != "" && LocalUser.WebServicesUserId != State.PlayerProfile.AccountId
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_UbisoftConnectProfile && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableReportButton(ComponentProfilePlayerInfo_K_State _State) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	CMGame_ExpendableButton::SetVisibilityAndNavigation(
		State.Controls.Button_Report,
		State.PlayerProfile.IsReportable
	);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_Report && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(ComponentProfilePlayerInfo_K_State _State) {
	if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
		if (_State.Controls.Button_Report.Visible) {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(_State.Controls.Button_Report);
		} else {
			_State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X = _State.Controls.Button_Report.RelativePosition_V3.X;
		}
	}
	if (_State.Controls.Button_FirstPartyProfile.Visible) {
		if (_State.Controls.Button_UbisoftConnectProfile.Visible) {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(_State.Controls.Button_UbisoftConnectProfile);
		} else {
			_State.Controls.Button_FirstPartyProfile.RelativePosition_V3.X = _State.Controls.Button_UbisoftConnectProfile.RelativePosition_V3.X;
		}
	}
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnablePlayersPager(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.PlayersPagerEnabled = _Enabled;
	State.Controls.ButtonIcon_PrevPlayer.Visible = State.PlayersPagerEnabled;
	State.Controls.ButtonIcon_NextPlayer.Visible = State.PlayersPagerEnabled;
	ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(State);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableZoneSelection(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.ZoneSelectionEnabled = _Enabled;
	State.Controls.Button_UpdateZone.Visible = (
		State.ZoneSelectionEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_UpdateZone, !State.Controls.Button_UpdateZone.Visible);
	State.Controls.Button_UpdateZone.RelativePosition_V3.X = State.Controls.Button_Garage.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(State.Controls.Button_Garage);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_UpdateZone && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}


ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_EnableMyAccessButton(ComponentProfilePlayerInfo_K_State _State, Boolean _Enabled) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.MyAccessButtonEnabled = _Enabled;
	State.Controls.Button_MyAccess.Visible = (
		State.MyAccessButtonEnabled &&
		State.PlayerProfile.AccountId != "" &&
		LocalUser.WebServicesUserId == State.PlayerProfile.AccountId
	);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Button_MyAccess, !State.Controls.Button_MyAccess.Visible);
	State.Controls.Button_MyAccess.RelativePosition_V3.X = State.Controls.Button_UpdateZone.RelativePosition_V3.X - 1. - CMGame_ExpendableButton::GetWidth(State.Controls.Button_UpdateZone);

	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == State.Controls.Button_MyAccess && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(State, FocusedControl, State.Controls.Button_Back);
	}

	return State;
}

Void ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_K_State _State) {
	CMGame_LoadingSpinner::SetIsLoading(This, _State.Controls.Spinner_Trophies, _State.TaskId_GetAccountLastYearSummary != NullId);
	_State.Controls.Label_TrophiesError.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && _State.TrophiesLoadingError);
	_State.Controls.Frame_TrophiesLoaded.Visible = (_State.TaskId_GetAccountLastYearSummary == NullId && !_State.TrophiesLoadingError);
	_State.Controls.Label_DisplayHistory.Visible = (_State.PlayerProfile.AccountId == LocalUser.WebServicesUserId);
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_TrophiesList, !_State.Controls.Frame_TrophiesLoaded.Visible || _State.PlayerProfile.AccountId != LocalUser.WebServicesUserId);
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == _State.Controls.Frame_TrophiesList && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
}

Void ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
	ComponentProfilePlayerInfo_K_State _State,
	LibCampaignStruct_K_CampaignRanking[Integer] _CampaignsRankings,
	Text[Integer] _CampaignsNames,
	Integer _Index
) {
	if (_CampaignsRankings.existskey(_Index)) {
		declare LibCampaignStruct_K_Ranking[] CampaignRankings = _CampaignsRankings[_Index].Rankings;
		declare LibCampaignStruct_K_Ranking TopRank = Trackmania_CampaignStore::GetTopRank(CampaignRankings);

		_State.Controls.Label_TopText.Visible = CampaignRankings.count > 0;
		if (CampaignRankings.count > 0) {
			_State.Controls.Label_TopCampaignRank.Value = ComponentProfilePlayerInfo_Tools::FormatTop(TopRank.Position, False);
			_State.Controls.Label_TopCampaignZone.Value = ComponentProfilePlayerInfo_C_Zone_Translations.get(TopRank.ZoneName, ComponentProfilePlayerInfo_TL::GetTranslatedText(TopRank.ZoneName));
		} else {
			_State.Controls.Label_TopCampaignRank.Value = "-";
			_State.Controls.Label_TopCampaignZone.Value = "Not ranked";
		}
		_State.Controls.Label_TopCampaignRank.Visible = True;
		_State.Controls.Label_TopCampaignZone.Visible = True;
		ComponentProfilePlayerInfo_Tools::FitLabelValue(_State.Controls.Label_TopCampaignZone, 2.5, 1.5, 0.25);

		CMGame_LoadingSpinner::StopAnimation(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign);
	} else {
		_State.Controls.Label_TopCampaignRank.Visible = False;
		_State.Controls.Label_TopCampaignZone.Visible = False;
		_State.Controls.Label_TopText.Visible = False;
		CMGame_LoadingSpinner::StartAnimation(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign);
	}
	if (_CampaignsNames.existskey(_Index)) {
		declare LibCampaignStruct_K_CampaignName CampaignName = LibCampaignStruct_ParseCampaignName(_CampaignsNames[_Index]);
		if (CampaignName.IsValid) {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.TranslatedName;
		} else {
			_State.Controls.Label_TopCampaignName.Value = CampaignName.Name;
		}
		_State.Controls.Label_TopCampaignName.Visible = True;
	} else {
		_State.Controls.Label_TopCampaignName.Visible = False;
	}
}

Void ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(ComponentProfilePlayerInfo_K_State _State) {
	if (_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible) {
		_State.Controls.Frame_PreviousCampaign.Visible = !ComponentProfilePlayerInfo_Pager::IsAtLastPage(_State.MyQuarterlyCampaignsRankingsPager);
		_State.Controls.Frame_NextCampaign.Visible = !ComponentProfilePlayerInfo_Pager::IsAtFirstPage(_State.MyQuarterlyCampaignsRankingsPager);
	}
}

Void ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(ComponentProfilePlayerInfo_K_State _State, Boolean _IsVisible) {
	_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible = _IsVisible;
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_MyQuarterlyCampaignsRankings, !_State.Controls.Frame_MyQuarterlyCampaignsRankings.Visible);
	declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (FocusedControl == _State.Controls.Frame_MyQuarterlyCampaignsRankings && ComponentNavigation_ComponentNavigation::IsLocked(FocusedControl)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, FocusedControl, _State.Controls.Button_Back);
	}
	ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(_State);
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_K_State _State, ComponentProfilePlayerInfo_K_PlayerProfile _User, Boolean _CheckPrivileges, Boolean _IsLeavingProfile) {
	declare ComponentProfilePlayerInfo_K_State State = _State;

	if (_User.IsReportable) {
		ComponentProfilePlayerInfo_ReportSystem::AddUsingId("component-profileplayerinfo");
	} else {
		ComponentProfilePlayerInfo_ReportSystem::RemoveUsingId("component-profileplayerinfo");
	}

	// Check if the user has the right privileges if they are not looking at their own profile
	State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(State.PrivilegeCheck.PrivilegeCheck);
	if (
		_CheckPrivileges &&
		!_User.IsFakeUser && (
			LocalUser == Null ||
			_User.AccountId != LocalUser.WebServicesUserId
		)
	) {
		State.PrivilegeCheck.User = _User;
		State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Create(PrivilegeMgr, ComponentProfilePlayerInfo_MainUser::GetMainUserId(), CPrivilegeMgr::EPrivilege::ViewUserGameHistory, [_User.AccountId]);
	}

	State.PlayerProfile = _User;
	State.TrophiesLoadingError = False;
	State.TrophyRankingLoadingError = ComponentProfilePlayerInfo_C_ErrorCode_None;

	State = ComponentProfilePlayerInfo_Private_SetTrophies(State, Null);
	ComponentProfilePlayerInfo_Private_SetTrophiesPoints(State, 0);
	ComponentProfilePlayerInfo_Private_SetEchelon(State, ComponentProfilePlayerInfo_C_Echelon_Null);
	State = ComponentProfilePlayerInfo_Private_SetTrophiesRankings(State, []);
	if (!_IsLeavingProfile) { //< Avoid unnecessary refreshes when leaving the page
		State = ComponentProfilePlayerInfo_Private_UpdateSkinDisplayed(State);
		State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(State, State.MyAccessButtonEnabled);
		State = ComponentProfilePlayerInfo_Private_EnableGarageButton(State, State.GarageButtonEnabled);
		State = ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
		State = ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(State);
		State = ComponentProfilePlayerInfo_Private_EnableReportButton(State);
		State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(State, State.ZoneSelectionEnabled);
		State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(State, State.TabDisplayed);
		ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(State);
	}

	if (State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey(State.TaskId_GetAccountLastYearSummary)) {
			ParentApp.ScoreMgr.TaskResult_Release(State.TaskId_GetAccountLastYearSummary);
		}
		State.TaskId_GetAccountLastYearSummary = NullId;
	}

	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.GetPlayersTrophyRanking)) {
		State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_Http::Destroy(State.GetPlayersTrophyRanking);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.Ranked.GetPlayerStats)) {
		State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.Ranked.GetPlayerStats);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.Royal.GetPlayerStats)) {
		State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.Royal.GetPlayerStats);
	}
	if (ComponentProfilePlayerInfo_Http::IsInitialized(State.SuperRoyal.GetPlayerStats)) {
		State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(State.SuperRoyal.GetPlayerStats);
	}
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Ranked, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Royal, False);
	CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, False);

	State.Controls.Label_PrivilegeCheck.Visible = False;
	State.Controls.Frame_Content.Visible = True;
	State.Controls.Frame_GeneralTab.Visible = True;
	ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_ContentTrophiesRanking, False);
	ComponentNavigation_ComponentNavigation::Lock(State.Controls.Frame_GeneralTabInfoRanking, False);

	// We need an API to get a favorite list of any user
	if (_User.AccountId == "") {
		ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "");
		ComponentProfilePlayerInfo_Private_SetPlayerName(State, "", "", False, False);
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, False);
		State.Controls.Label_Error.SetText("");
	} else if (
		!ComponentProfilePlayerInfo_Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck) ||
		(!_User.CanViewGameHistory && !_User.IsFakeUser)
	) {
		declare Boolean CheckIsComplete = ComponentProfilePlayerInfo_Privileges::Check_IsComplete(State.PrivilegeCheck.PrivilegeCheck);
		CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PrivilegeCheck, !CheckIsComplete);
		CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, !CheckIsComplete);
		State.Controls.Label_PrivilegeCheck.Visible = CheckIsComplete;
		State.Controls.Frame_Content.Visible = False;
		State.Controls.Frame_GeneralTab.Visible = False;
		ComponentNavigation_ComponentNavigation::Lock(_State.Controls.Frame_ContentTrophiesRanking, True);
		ComponentNavigation_ComponentNavigation::Lock(State.Controls.Frame_GeneralTabInfoRanking, True);

		if (State.PlayerProfile.IsFakeUser) {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, ComponentProfilePlayerInfo_Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}
		ComponentProfilePlayerInfo_Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, False);
	} else {
		if (State.PlayerProfile.IsFakeUser) {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, ComponentProfilePlayerInfo_Bot::GetCountryFlagUrl(_User.Name));
		} else if (_User.Zone.Path == "") {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, "file://ZoneFlags/Path/World");
		} else {
			ComponentProfilePlayerInfo_Private_SetZoneFlag(State, _User.Zone.CountryFlagUrl);
		}

		ComponentProfilePlayerInfo_Private_SetPlayerName(State, _User.Name,  _User.ClubTag, _User.IsFirstPartyDisplayName, _User.IsFakeUser);

		declare Ident[] TaskIds;
		foreach (Task in ParentApp.ScoreMgr.TaskResults) {
			TaskIds.add(Task.Id);
		}
		declare CTaskResult_AccountTrophyLastYearSummary Task;
		if (LocalUser.WebServicesUserId == _User.AccountId) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummary(ComponentProfilePlayerInfo_MainUser::GetMainUserId());
		} else if (!State.PlayerProfile.IsFakeUser) {
			Task = ParentApp.ScoreMgr.Trophy_GetLastYearSummaryForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _User.AccountId);
		}

		// ScoreMgr is not available ingame, we have to use ParentApp.ScoreMgr
		// Calling ParentApp.ScoreMgr.Trophy_XXX() will return Null
		// even if the task is created in ParentApp.ScoreMgr.TaskResults
		// Retrieve the task manually from the results array
		if (Task == Null) {
			foreach (TmpTask in ParentApp.ScoreMgr.TaskResults) {
				if (
					!TaskIds.exists(TmpTask.Id) &&
					(TmpTask is CTaskResult_AccountTrophyLastYearSummary)
				) {
					Task <=> (ParentApp.ScoreMgr.TaskResults[TmpTask.Id] as CTaskResult_AccountTrophyLastYearSummary);
				}
			}
		}
		ComponentProfilePlayerInfo_SetCampaignsRankingVisibility(State, True);

		if (Task != Null) {
			State.TaskId_GetAccountLastYearSummary = Task.Id;
		} else if (!State.PlayerProfile.IsFakeUser) {
			State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ComponentProfilePlayerInfo_C_ErrorCode_CouldNotCreateTask);
			State.TrophiesLoadingError = True;
		}

		if (!State.PlayerProfile.IsFakeUser) {
			State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_LeaderboardAPI::GetPlayersTrophyRanking([_User.AccountId]);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_PlayerCardEchelon, True);
			// Ranked stats
			if (State.Ranked.QueueId == "") {
				declare Trackmania_UserStore::K_MatchmakingInfo RankedMatchmakingInfo = Trackmania_UserStore::GetMatchmakingInfos("Teams 3v3");
				ComponentPlayerRank_SetDivisions(RankedMatchmakingInfo.Divisions);
				State.Ranked.QueueId = RankedMatchmakingInfo.QueueId;
			}
			State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Ranked.QueueId, _User.AccountId);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Ranked, True);
			// Royal stats
			if (State.Royal.QueueId == "") {
				declare Trackmania_UserStore::K_MatchmakingInfo RoyalMatchmakingInfo = Trackmania_UserStore::GetMatchmakingInfos("Royal");
				Trackmania_PlayerRoyalVictories::SetDivisions(This, RoyalMatchmakingInfo.Divisions);
				State.Royal.QueueId = RoyalMatchmakingInfo.QueueId;
			}
			State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetPlayerMatchmakingStatistics(State.Royal.QueueId, _User.AccountId);
			CMGame_LoadingSpinner::SetIsLoading(This, State.Controls.Spinner_Royal, True);
			// Super Royal stats
			State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_MatchmakingAPI::GetSuperRoyalStats(_User.AccountId);
		} else {
			State.Ranked.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			ComponentProfilePlayerInfo_Private_SetRankedStats(State, False);
			State.Royal.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			State.SuperRoyal.Stats = LibStructuresMatchmaking_K_SuperRoyalStatistics {};
			ComponentProfilePlayerInfo_Private_SetRoyalStats(State);
		}

		if (
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsTotal() <= 0 ||
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsAccountId() != _User.AccountId
		) {
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ForceRangeUpdate(State.MyQuarterlyCampaignsRankingsPager);
		}
		// Unselect the trophy if we are looking to another player
		if (LocalUser.WebServicesUserId != _User.AccountId) {
			State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, -1);
		}
	}

	ComponentProfilePlayerInfo_Private_DisplayTrophies(State);
	ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(State);
	ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(State);

	declare CMlControl Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	if (ComponentNavigation_ComponentNavigation::IsLocked(Focused_Control)) {
		ComponentProfilePlayerInfo_Private_Focus(_State, Focused_Control, _State.Controls.Button_Back);
	}

	Focused_Control = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
	declare Boolean TrophiesListIsFocused = (Focused_Control != Null && Focused_Control == State.Controls.Frame_TrophiesList);
	ComponentProfilePlayerInfo_Private_FocusTrophiesList(State, TrophiesListIsFocused);
	State = ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(State, State.SelectedTrophyKey);

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_InitProfilePlayerInfo(ComponentProfilePlayerInfo_K_State _State) {
	Page.GetClassChildren("component-profileplayerinfo", Page.MainFrame, True);
	assert(Page.GetClassChildren_Result.count <= 1, "You can only include one instance of the ProfilePlayerInfo component in a page");

	declare ComponentProfilePlayerInfo_K_State State = _State;

	State.IsPlayerProfileUpdated = True;
	State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::Create(1, 3, 1, 1000, False);

	State.TrophiesRankingsPager = ComponentProfilePlayerInfo_K_TrophiesRankingsPager {
		TrophiesRankings = [],
		CurrentPage = 0,
		MaxPage = 0
	};

	foreach (Key => Control in State.Controls.Frame_TrophiesList.Controls) {
		declare CMlQuad Quad_TrophyIcon <=> ((Control as CMlFrame).GetFirstChild("ComponentProfilePlayerInfo_quad-trophy-icon") as CMlQuad);
		Quad_TrophyIcon.ImageUrl = ComponentProfilePlayerInfo_Private_GetTrophyImage(State.Controls.Frame_TrophiesList.Controls.count - Key);
	}

	declare Boolean GarageButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-garage")) {
		GarageButtonEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-garage"));
	}
	State.GarageButtonEnabled = GarageButtonEnabled;

	State = ComponentProfilePlayerInfo_Private_Enable(State, False);
	State = ComponentProfilePlayerInfo_Private_SetUser(State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, False);

	declare Boolean PlayersPagerEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-players-pager")) {
		PlayersPagerEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-players-pager"));
	}
	State = ComponentProfilePlayerInfo_Private_EnablePlayersPager(State, PlayersPagerEnabled);

	declare Boolean ZoneSelectionEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-zone-selection")) {
		ZoneSelectionEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-zone-selection"));
	}
	State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(State, ZoneSelectionEnabled);
	State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(State, ComponentProfilePlayerInfo_C_TabDisplayed_General);

	declare Boolean MyAccessButtonEnabled = True;
	if (State.Controls.Frame_Global.Parent.DataAttributeExists("enable-my-access-info")) {
		MyAccessButtonEnabled = ComponentProfilePlayerInfo_Tools::TextToBoolean(State.Controls.Frame_Global.Parent.DataAttributeGet("enable-my-access-info"));
	}
	State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(State, MyAccessButtonEnabled);

	ComponentProfilePlayerInfo_Private_UpdateTopTrophyCount(State, []);
	ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(ComponentProfilePlayerInfo_G_State, [], [], ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager));

	State.NextPrevPlayerCooldown = -1;
	State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(State, State.Controls.Frame_TrophiesList.Controls.count - 1);
	State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, -1);

	State = ComponentProfilePlayerInfo_Private_EnableFirstPartyProfileButton(State, State.PlayerProfile.IsFirstPartyDisplayName);
	State = ComponentProfilePlayerInfo_Private_EnableUbisoftConnectProfileButton(State);
	ComponentProfilePlayerInfo_AdaptFooterButtonsPositions(State);

	State.MatchId = "";
	State.MatchmakingId = "";

	return State;
}

ComponentProfilePlayerInfo_K_State ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_K_State _State, CMlControl _Control) {
	if (_Control == Null) return _State;

	declare ComponentProfilePlayerInfo_K_State State = _State;

	switch (_Control.ControlId) {
		case "ComponentProfilePlayerInfo_button-back": {
			ComponentProfilePlayerInfo_Private_SendCloseEvent(State);
			State = ComponentProfilePlayerInfo_Private_SetUser(State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, True);
		}
		case "ComponentProfilePlayerInfo_button-my-access": {
			if (State.MyAccessButtonEnabled) {
				ComponentProfilePlayerInfo_Private_SendMyAccessInfoEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-garage": {
			if (State.GarageButtonEnabled) {
				ComponentProfilePlayerInfo_Private_SendGarageEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-first-party-profile": {
			UserMgr.Profile_ShowFirstPartyProfile(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "ComponentProfilePlayerInfo_button-ubisoft-connect-profile": {
			UserMgr.Profile_ShowUbisoftConnectProfile(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), State.PlayerProfile.AccountId);
		}
		case "ComponentProfilePlayerInfo_button-report": {
			State = ComponentProfilePlayerInfo_Private_Enable(State, False);
			if (This is CMlScriptIngame) {
				declare ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
				[
					ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_PlayerName => ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Skin] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (!State.PlayerProfile.IsGhost) {
					if (State.MatchId != "") {
						Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Player] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "MatchmakingId" => State.MatchmakingId, "MatchId" => State.MatchId, "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					} else {
						Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Player] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
							Details = [State.PlayerProfile.Name],
							Ids = [State.PlayerProfile.AccountId],
							Contexts = [["From" => "InGame Profile", "ServerChatLog" => ParentApp.ManiaPlanet.ServerChatLog]]
						};
					}
				}
				if (State.PlayerProfile.RecordData.Id != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Record] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.RecordData.Detail],
						Ids = [State.PlayerProfile.RecordData.Id],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_ClubTag] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "InGame Profile"]]
					};
				}
				ComponentPopUpReportSystem::SetReportTargetsData(This, State.Controls.Frame_ReportSystem, Data);
				ComponentPopUpReportSystem::Display(This, State.Controls.Frame_ReportSystem, True);
			} else {
				declare ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData[Integer] Data =
				[
					ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_PlayerName => ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					}
				];
				if (State.PlayerProfile.CarSkin.FileUrl != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_Skin] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.Name],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				if (State.PlayerProfile.ClubTag != "") {
					Data[ComponentProfilePlayerInfo_ReportStruct::C_ReportTarget_ClubTag] = ComponentProfilePlayerInfo_ReportStruct::LibStructuresReport_K_ReportData {
						Details = [State.PlayerProfile.ClubTag],
						Ids = [State.PlayerProfile.AccountId],
						Contexts = [["From" => "Menu Profile"]]
					};
				}
				ComponentProfilePlayerInfo_ReportSystem::Show(Data);
			}
		}
		case "ComponentProfilePlayerInfo_button-prev-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				ComponentProfilePlayerInfo_Private_SendPrevPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest;
			}
		}
		case "ComponentProfilePlayerInfo_button-next-player": {
			if (State.PlayersPagerEnabled && (State.NextPrevPlayerCooldown < 0 || Now >= State.NextPrevPlayerCooldown)) {
				ComponentProfilePlayerInfo_Private_SendNextPlayerEvent(State);
				State.NextPrevPlayerCooldown = Now + ComponentProfilePlayerInfo_C_DelayBetweenPagerRequest;
			}
		}
		case "ComponentProfilePlayerInfo_button-update-zone": {
			if (State.ZoneSelectionEnabled) {
				ComponentProfilePlayerInfo_Private_SendEditPlayerEvent(State);
			}
		}
		case "ComponentProfilePlayerInfo_button-prev-zone", "ComponentProfilePlayerInfo_button-general-trophies-previous-zone": {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage - 1, False);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(State, _Control);
		}
		case "ComponentProfilePlayerInfo_button-next-zone", "ComponentProfilePlayerInfo_button-general-trophies-next-zone": {
			State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(State, State.TrophiesRankingsPager.CurrentPage + 1, False);
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(State, _Control);
		}
		case "ComponentProfilePlayerInfo_button-previous-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToNextPage(State.MyQuarterlyCampaignsRankingsPager);
			ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Frame_PreviousCampaign);
		}
		case "ComponentProfilePlayerInfo_button-next-campaign": {
			State.IsTTSContextUpdateNeeded = True;
			State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToPreviousPage(State.MyQuarterlyCampaignsRankingsPager);
			ComponentProfilePlayerInfo_Private_PlayPagerAnim(State.Controls.Frame_NextCampaign);
		}
		case "ComponentProfilePlayerInfo_frame-trophies-list": {
			State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, State.FocusedTrophyKey);
		}
	}

	if (_Control.HasClass("ComponentProfilePlayerInfo_button-trophy")) {
		State = ComponentProfilePlayerInfo_Private_SetSelectedTrophy(State, ComponentProfilePlayerInfo_TL::ToInteger(_Control.DataAttributeGet("trophy-key")));
	}

	return State;
}

// Enable or disable the player profile
// The primary effect is to enable or
// disable the navigation inside the component
Void ComponentProfilePlayerInfo_Enable(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, _Enabled);
}

Boolean ComponentProfilePlayerInfo_IsEnabled() {
	return ComponentProfilePlayerInfo_G_State.Enabled;
}

// Set the user to display in the profile
Void ComponentProfilePlayerInfo_SetUser(CUser _User) {
	if (_User == Null) {
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, False);
	} else {
		declare Text ZoneName = "";
		declare Text[] Zones = ComponentProfilePlayerInfo_TL::Split("|", _User.ZonePath);
		if (Zones.count > 0) ZoneName = Zones[Zones.count-1];

		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {
			SuccessfulTaskNumber = 0,
			UserId = _User.Id,
			Name = _User.Name,
			ClubTag = _User.ClubTag,
			Trigram = _User.Trigram,
			IsFirstPartyDisplayName = _User.IsFirstPartyDisplayName,
			AccountId = _User.WebServicesUserId,
			IsFakeUser = (_User.IsFakeUser || ComponentProfilePlayerInfo_TL::StartsWith("*fake", _User.Login)), //@HACK to detect fake user until Falguiere fix the bug
			CarSkin = LibStructuresClub_K_Skin {
				Name = _User.Model_CarSport_SkinName,
				FileUrl = _User.Model_CarSport_SkinUrl,
				PrestigeOptions = _User.Prestige_SkinOptions
			},
			PilotSkin = LibStructuresClub_K_Skin {
				Name = _User.Model_CharacterPilot_SkinName,
				FileUrl = _User.Model_CharacterPilot_SkinUrl,
				CharacterOptions = _User.Character_SkinOptions
			},
			SkinLightColor = _User.Color,
			Zone = ComponentProfilePlayerInfo_K_Zone {
				Name = ZoneName,
				Path = _User.ZonePath,
				FlagUrl = _User.ZoneFlagUrl,
				CountryFlagUrl = _User.CountryFlagUrl
			},
			CanViewGameHistory = LocalUser != Null && _User.WebServicesUserId == LocalUser.WebServicesUserId,
			IsReportable = _User.WebServicesUserId != "" && _User.WebServicesUserId != LocalUser.WebServicesUserId && !ComponentProfilePlayerInfo_TL::StartsWith("*splitscreen", _User.Login) && !_User.IsFakeUser && !ComponentProfilePlayerInfo_TL::StartsWith("*fake", _User.Login), //@HACK to detect fake user until Falguiere fix the bug
			RecordData = ComponentProfilePlayerInfo_K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		}, True, False);
	}
}

// Set the accountid of the user to display in the profile
Void ComponentProfilePlayerInfo_SetUserAccountId(Text _AccountId) {
	if (_AccountId == LocalUser.WebServicesUserId) {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = True;
		ComponentProfilePlayerInfo_SetUser(LocalUser);
	} else {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = False;
		ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList, UserMgr, UserMgr.Tag_GetClubTagList(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin, UserMgr, UserMgr.Prestige_GetCurrentAccountPrestigeForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _AccountId));
		ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_GetSkinList, DataFileMgr, DataFileMgr.AccountSkin_NadeoServices_GetListForUser(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), _AccountId));
		ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName, UserMgr, UserMgr.RetrieveDisplayName(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::DestroyAndCreate(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList, ZoneMgr, ZoneMgr.RetrieveUserZoneList(ComponentProfilePlayerInfo_MainUser::GetMainUserId(), [_AccountId]));
		ComponentProfilePlayerInfo_G_State.PlayerProfile = ComponentProfilePlayerInfo_K_PlayerProfile {
			UserId = NullId,
			AccountId = _AccountId,
			CanViewGameHistory = False,
			IsReportable = _AccountId != "" && _AccountId != LocalUser.WebServicesUserId,
			RecordData = ComponentProfilePlayerInfo_K_Record {
				Detail = "",
				Id = ""
			},
			IsGhost = False
		};
	}
}

// Set the record of the user to display in the profile (for the report system)
Void ComponentProfilePlayerInfo_SetUserRecord(Text _RecordDetail, Text _RecordId) {
	ComponentProfilePlayerInfo_G_State.PlayerProfile.RecordData.Detail = _RecordDetail;
	ComponentProfilePlayerInfo_G_State.PlayerProfile.RecordData.Id = _RecordId;
}

// Set the match id (Ranked or Royal) for the context of the report system
Void ComponentProfilePlayerInfo_SetMatchAndMatchmakingId(Text _MatchId, Text _MatchmakingId) {
	ComponentProfilePlayerInfo_G_State.MatchId = _MatchId;
	ComponentProfilePlayerInfo_G_State.MatchmakingId = _MatchmakingId;
}

// Set if the user is a ghost (for the report system)
Void ComponentProfilePlayerInfo_SetUserIsGhost(Boolean _IsGhost) {
	ComponentProfilePlayerInfo_G_State.PlayerProfile.IsGhost = _IsGhost;
}

// Display or hide the my access button
Void ComponentProfilePlayerInfo_EnableMyAccessButton(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableMyAccessButton(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the garage button
Void ComponentProfilePlayerInfo_EnableGarageButton(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableGarageButton(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the players pager
Void ComponentProfilePlayerInfo_EnablePlayersPager(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnablePlayersPager(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Display or hide the zone selection button
Void ComponentProfilePlayerInfo_EnableZoneSelection(Boolean _Enabled) {
	ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_EnableZoneSelection(ComponentProfilePlayerInfo_G_State, _Enabled);
}

// Use navigation events from the manialink
Void ComponentProfilePlayerInfo_UseLocalEvents(Boolean _UseLocalEvents) {
	CMGame_Scroll::UseLocalEvents(This, _UseLocalEvents);
	ComponentNavigation_ComponentNavigation::UseLocalEvents(This, _UseLocalEvents);
}

// Control the visibility of the background
Void ComponentProfilePlayerInfo_SetBackgroundVisibility(Boolean _Visible) {
	ComponentProfilePlayerInfo_G_State.Controls.Quad_Background.Visible = _Visible;
}

***MainInit***
***
declare CMlFrame ComponentProfilePlayerInfo_Frame_Title;
declare CMlFrame ComponentProfilePlayerInfo_Frame_PlayerCard;
declare Boolean ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible;
declare Boolean ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible;
declare CMlControl ComponentProfilePlayerInfo_LastBottomButtonFocused;
***

***MainStart***
***
ComponentProfilePlayerInfo_G_State.Controls.Frame_Global <=> (Page.GetFirstChild("ComponentProfilePlayerInfo_frame-global") as CMlFrame);
ComponentProfilePlayerInfo_Frame_Title <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-title") as CMlFrame);
ComponentProfilePlayerInfo_Frame_PlayerCard <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-player-card") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_MyAccess <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-my-access") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_UpdateZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-update-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_PlayerCardFlag <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_quad-player-card-flag") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.PlayerName_PlayerCardName <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_playername-player-card-name") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_PrevPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-prev-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_NextPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-next-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-icon-prev-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_button-icon-next-player") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_BestTrophy <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_quad-best-trophy") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesLoaded <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-loaded") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Trophies <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_spinner-trophies") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-list") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_DisplayHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-display-history") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesGlobalRankingPosition <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-global-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesGlobalRankingZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-global-ranking-zone") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesPoints <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-points") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesPointsText <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_label-trophies-points-text") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_label-trophy-history") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_spinner-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Scroll_TrophiesHistory <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesHistory.GetFirstChild("ComponentProfilePlayerInfo_scroll-trophies-history") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_PrevZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_button-prev-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_NextZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Trophies.GetFirstChild("ComponentProfilePlayerInfo_button-next-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-main-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyTopRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TrophyTopRankZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-ranking-category") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Quad_TopTrophy <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_quad-highest-trophy") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopTrophyCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-trophy-number") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignName <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-name") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopText <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-top") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-position") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_TopCampaignZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-campaign-ranking-zone") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_InfoRankingLoaded <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-info-ranking-loaded") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranked <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-ranked") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Royal <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-royal") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_Campaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_spinner-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MyQuarterlyCampaignsRankings <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-info-campaign-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PreviousCampaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-previous-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_NextCampaign <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-next-campaign") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_GeneralTrophiesPreviousZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-general-trophies-previous-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_GeneralTrophiesNextZone <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-general-trophies-next-zone") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Back <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-back") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_CurrentSkin <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-current-skin") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_Lights <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_quad-lights") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Quad_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_quad-player-card-echelon") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_label-player-card-echelon") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_PlayerCardEchelon <=> (ComponentProfilePlayerInfo_Frame_PlayerCard.GetFirstChild("ComponentProfilePlayerInfo_spinner-player-card-echelon") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Garage <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-garage") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_FirstPartyProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-first-party-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_UbisoftConnectProfile <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-ubisoft-connect-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Button_Report  <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_button-report") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerBestRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-best-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRank <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-best-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRankDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-best-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-ranked-stats") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-current-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerCurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_CurrentSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_CurrentSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedCurrentSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-previous-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerPreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_PreviousRankedError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedPreviousSeason.GetFirstChild("ComponentProfilePlayerInfo_label-ranked-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-best-season") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PlayerBestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_frame-rank") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestSeason <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestSeasonDate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-rank-date") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BestRankedError <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedBestSeason.GetFirstChild("ComponentProfilePlayerInfo_label-ranked-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_PublicData <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-public-data") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_SensibleData <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_frame-sensible-data") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_MatchesCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-matches-count") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_WinRate <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-percentage") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_MVPCount <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RankedStats.GetFirstChild("ComponentProfilePlayerInfo_label-mvp-count") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_MainRoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-level") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_MainRoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-royal-level") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_RoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_MainProfile.GetFirstChild("ComponentProfilePlayerInfo_label-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-stats") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalLevel <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_frame-royal-level") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_RoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Quad_SuperRoyalLogo <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_quad-super-royal-logo") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Label_SuperRoyalVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-super-royal-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_BronzeVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-bronze-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_SilverVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-silver-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_GoldVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-gold-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Label_MasterVictories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_RoyalStats.GetFirstChild("ComponentProfilePlayerInfo_label-master-victories") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ButtonList <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-button-list-profile") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_Error <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_label-error") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_navigationtabs-categories") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Quad_Background <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_quad-background") as CMlQuad);
ComponentProfilePlayerInfo_G_State.Controls.Frame_Content <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-content") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ContentTrophiesRanking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Content.GetFirstChild("ComponentProfilePlayerInfo_frame-trophies-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTab <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-general-tab") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTabInfoRanking <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_GeneralTab.GetFirstChild("ComponentProfilePlayerInfo_frame-info-ranking") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Spinner_PrivilegeCheck <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_spinner-privilege-check") as CMlFrame);
ComponentProfilePlayerInfo_G_State.Controls.Label_PrivilegeCheck <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_label-privilege-check") as CMlLabel);
ComponentProfilePlayerInfo_G_State.Controls.Frame_ReportSystem <=> (ComponentProfilePlayerInfo_G_State.Controls.Frame_Global.GetFirstChild("ComponentProfilePlayerInfo_frame-report-system") as CMlFrame);

ComponentProfilePlayerInfo_PendingEvents = [];

ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer);
ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer);
ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_G_State);

ComponentProfilePlayerInfo_LastBottomButtonFocused = ComponentProfilePlayerInfo_G_State.Controls.Button_Back;
ComponentMenuButtonList_SetButtons(ComponentProfilePlayerInfo_G_State.Controls.Frame_ButtonList, []);
ComponentProfilePlayerInfo_ControllerInfo::SetButtons([]);
ComponentNavigation_ComponentNavigation::Focus(This, ComponentProfilePlayerInfo_G_State.Controls.Frame_Global);
ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_InitProfilePlayerInfo(ComponentProfilePlayerInfo_G_State);
***

***MainLoop***
***
ComponentProfilePlayerInfo_PendingEvents = [];

if (ComponentProfilePlayerInfo_G_State.Enabled) {
	if (
		ComponentProfilePlayerInfo_G_State.Scene.SceneId != NullId &&
		ComponentProfilePlayerInfo_MenuSceneManager::PageNeedToRecreateScene(Page, LocalUser)
	) {
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_G_State, False);
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Display3DScene(ComponentProfilePlayerInfo_G_State, True);
	}

	// Update pager and check if the range changed
	ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::Update(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
	if (ComponentProfilePlayerInfo_Pager::RangeUpdated(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
		ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ProcessRangeUpdate(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
		// Ask the store to load the new range of campaigns rankings
		Trackmania_CampaignStore::Action_LoadMyQuarterlyCampaignsRankings(
			This,
			ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId,
			ComponentProfilePlayerInfo_Pager::GetRangeOffset(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager),
			ComponentProfilePlayerInfo_Pager::GetRangeLength(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
		);
	}
	if (ComponentProfilePlayerInfo_Pager::PageUpdated(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
		ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::ProcessPageUpdate(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
		ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
			ComponentProfilePlayerInfo_G_State,
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsRankings(),
			Trackmania_CampaignStore::GetMyQuarterlyCampaignsNames(),
			ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
		);
		ComponentProfilePlayerInfo_Private_UpdateCampaignArrows(ComponentProfilePlayerInfo_G_State);
		if (ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded) {
			ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = False;
			ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Frame_MyQuarterlyCampaignsRankings);
		}
	}

	if (
		ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible != ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer) ||
		ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible != ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer)
	) {
		ComponentProfilePlayerInfo_ButtonIconPrevPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_PrevPlayer);
		ComponentProfilePlayerInfo_ButtonIconNextPlayerIsVisible = ButtonIcon2_ButtonIcon2::IsVisible(ComponentProfilePlayerInfo_G_State.Controls.ButtonIcon_NextPlayer);
		ComponentProfilePlayerInfo_Private_UpdatePlayersPagerVisibility(ComponentProfilePlayerInfo_G_State);
	}

	foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
		switch (Event.Type) {
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-global")) {
					if (ComponentProfilePlayerInfo_G_State.PlayersPagerEnabled) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Action3) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Button_PrevPlayer);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Action4) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.Controls.Button_NextPlayer);
						}
					}
					if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_G_State)) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_UpdateSelectedTrophy(ComponentProfilePlayerInfo_G_State, -1);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Up) {
							ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_G_State, -15.4286);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down) {
							ComponentProfilePlayerInfo_Private_ScrollTrophyHistory(ComponentProfilePlayerInfo_G_State, 15.4286);
						}
					} else {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
							ComponentProfilePlayerInfo_Private_SendCloseEvent(ComponentProfilePlayerInfo_G_State);
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_K_PlayerProfile {}, False, True);
						}
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-main")) {
					if (ComponentProfilePlayerInfo_Private_IsBrowsingTrophiesHistory(ComponentProfilePlayerInfo_G_State)) {
						// Do nothing
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList.ControlId && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.FocusedTrophyKey - 1);
							ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_Focus);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.FocusedTrophyKey + 1);
							ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_Focus);
						}
					} else if (
						Event.From == Event.To && (
							Event.From.ControlId == "ComponentProfilePlayerInfo_frame-trophies-ranking" ||
							Event.From.ControlId == "ComponentProfilePlayerInfo_frame-info-ranking"
						) && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.TrophiesRankingsPager.CurrentPage + 1, True);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankingsPage(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.TrophiesRankingsPager.CurrentPage - 1, True);
						}
					} else if (
						Event.From == Event.To &&
						Event.From.ControlId == "ComponentProfilePlayerInfo_frame-info-campaign-ranking" && (
							Event.Input == CMlScriptEvent::EMenuNavAction::Left ||
							Event.Input == CMlScriptEvent::EMenuNavAction::Right
						)
					) {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
							if (!ComponentProfilePlayerInfo_Pager::IsAtLastPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
								ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
							}
							ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = True;
							ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToNextPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
							ComponentProfilePlayerInfo_Private_PlayPagerAnim(ComponentProfilePlayerInfo_G_State.Controls.Frame_PreviousCampaign);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
							if (!ComponentProfilePlayerInfo_Pager::IsAtFirstPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)) {
								ComponentProfilePlayerInfo_AudioManager::PlaySound(This, CMGame_MenuSounds::C_Sound_ArrowSelect);
							}
							ComponentProfilePlayerInfo_G_State.IsTTSContextUpdateNeeded = True;
							ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::GoToPreviousPage(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager);
							ComponentProfilePlayerInfo_Private_PlayPagerAnim(ComponentProfilePlayerInfo_G_State.Controls.Frame_NextCampaign);
						}
					} else if (
						Event.From != Null &&
						Event.To != Null &&
						Event.From.HasClass("ComponentProfilePlayerInfo_bottom-button") &&
						!Event.To.HasClass("ComponentProfilePlayerInfo_bottom-button")
					) {
						ComponentProfilePlayerInfo_LastBottomButtonFocused = Event.From;
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}  else if (
						Event.From != Null &&
						Event.To != Null &&
						!Event.From.HasClass("ComponentProfilePlayerInfo_bottom-button") &&
						Event.To.HasClass("ComponentProfilePlayerInfo_bottom-button")
					) {
						if (!ComponentNavigation_ComponentNavigation::IsLocked(ComponentProfilePlayerInfo_LastBottomButtonFocused)) {
							ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, ComponentProfilePlayerInfo_LastBottomButtonFocused);
						} else {
							ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
						}
					} else {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
					ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, Event.To as CMlFrame);
				}
			}
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-main")) {
					ComponentProfilePlayerInfo_Private_TTSContextUpdate(ComponentProfilePlayerInfo_G_State, Event.To as CMlFrame);
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-component-profileplayerinfo-mouse-only")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Select(ComponentProfilePlayerInfo_G_State, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						if (
							Event.To != Null &&
							Event.To.HasClass("ComponentProfilePlayerInfo_button-trophy") &&
							!ComponentNavigation_ComponentNavigation::IsLocked(ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList)
						) {
							declare CMlControl FocusedControl = ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-component-profileplayerinfo-main");
							if (FocusedControl == Null || FocusedControl.ControlId != ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList.ControlId) {
								ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, FocusedControl, ComponentProfilePlayerInfo_G_State.Controls.Frame_TrophiesList);
							}
							ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetFocusedTrophy(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_TL::ToInteger(Event.To.DataAttributeGet("trophy-key")));
						}
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						ComponentProfilePlayerInfo_Private_Focus(ComponentProfilePlayerInfo_G_State, Event.From, Event.To);
					}
				}
			}
		}
	}

	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::PluginCustomEvent: {
				if (Event.CustomEventType == Trackmania_CampaignStore::C_Event_MyQuarterlyCampaignsRankingsUpdated) {
					ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager = ComponentProfilePlayerInfo_Pager::SetTotal(
						ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager,
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsTotal()
					);
					ComponentProfilePlayerInfo_Private_UpdateMyQuarterlyCampaignsRankings(
						ComponentProfilePlayerInfo_G_State,
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsRankings(),
						Trackmania_CampaignStore::GetMyQuarterlyCampaignsNames(),
						ComponentProfilePlayerInfo_Pager::GetIndex(ComponentProfilePlayerInfo_G_State.MyQuarterlyCampaignsRankingsPager)
					);
				}
			}
		}
	}

	foreach (Event in CMGame_Scroll::GetPendingEvents(This)) {
		if (Event.Scroll == ComponentProfilePlayerInfo_G_State.Controls.Scroll_TrophiesHistory) {
			switch (Event.Type) {
				case CMGame_Scroll::C_EventType_Update: {
					foreach (Key => Frame_Element in Event.ElementsVisible) {
						if (ComponentProfilePlayerInfo_G_State.TrophiesHistory.TrophyScroll.Content.existskey(Key)) {
							ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntry(Frame_Element, ComponentProfilePlayerInfo_G_State.TrophiesHistory.TrophyScroll.Content[Key]);
						} else {
							ComponentProfilePlayerInfo_Private_ShowTrophyHistoryEntryLoading(Frame_Element);
						}
					}
					foreach (Key => Frame_Element in Event.ElementsHidden) {
						ComponentProfilePlayerInfo_Private_HideTrophyHistoryEntry(Frame_Element);
					}
				}
				case CMGame_Scroll::C_EventType_PagerUpdate: {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_RequestTrophyHistory(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.HistoryTrophyType, Event.PagerOffset, Event.PagerCount);
				}
			}
		}
	}

	foreach (Event in Trackmania_NavigationTabs::GetPendingEvents(This)) {
		switch (Event.Type) {
			case Trackmania_NavigationTabs::C_EventType_Select: {
				if (Event.Frame_NavigationTabs.ControlId == ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories.ControlId) {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_UpdateTabDisplayed(ComponentProfilePlayerInfo_G_State, Event.CurrentTab);
					ParentApp.TTS_Context_Change(ComponentProfilePlayerInfo_G_TTSContextIdent_Tabs, Trackmania_NavigationTabs::GetCurrentTabLabel(ComponentProfilePlayerInfo_G_State.Controls.NavigationTabs_Categories));
					ParentApp.TTS_Context_Read(ComponentProfilePlayerInfo_C_TTSContextLevel_Page);
				}
			}
		}
	}

	// Process trophy history task
	if (ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory != NullId) {
		if (ScoreMgr != Null && ScoreMgr.TaskResults.existskey(ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory)) {
			declare CTaskResult_AccountTrophyGainHistory Task = (ScoreMgr.TaskResults[ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory] as CTaskResult_AccountTrophyGainHistory);
			if (!Task.IsProcessing) {
				ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophyHistoryScroll(
					ComponentProfilePlayerInfo_G_State,
					ComponentProfilePlayerInfo_G_State.TrophiesHistory.RequestedTrophyType,
					ComponentProfilePlayerInfo_G_State.TrophiesHistory.RequestedOffset,
					Task
				);
				ScoreMgr.TaskResult_Release(ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory);
				ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
			}
		} else {
			ComponentProfilePlayerInfo_G_State.TrophiesHistory.TaskId_GetTrophyHistory = NullId;
		}
	}

	// Process trophy ranking request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
		ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
			declare LibCampaignStruct_K_Ranking[] Ranking;
			declare Integer Points = 0;
			declare Integer Echelon = ComponentProfilePlayerInfo_C_Echelon_Null;
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking)) {
				declare Response = ComponentProfilePlayerInfo_LeaderboardAPI::GetResponseFromGetPlayersTrophyRanking(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
				if (Response.Players.count >= 1) {
					declare PlayerRanking = Response.Players[0];
					Points = PlayerRanking.Points;
					Echelon = PlayerRanking.Echelon;
					Ranking = PlayerRanking.Ranking;
					if (LocalUser.WebServicesUserId == ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId) {
						Trackmania_UserStore::Action_UpdateUserTrophyRankings(This, PlayerRanking);
					}
				}
			} else {
				ComponentProfilePlayerInfo_G_State.TrophyRankingLoadingError = ""^ComponentProfilePlayerInfo_Http::GetStatusCode(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
			}
			ComponentProfilePlayerInfo_Private_SetTrophiesPoints(ComponentProfilePlayerInfo_G_State, Points);
			ComponentProfilePlayerInfo_Private_SetEchelon(ComponentProfilePlayerInfo_G_State, Echelon);
			ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophiesRankings(ComponentProfilePlayerInfo_G_State, Ranking);

			ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.GetPlayersTrophyRanking);
			ComponentProfilePlayerInfo_Private_UpdateTrophiesRankingLoading(ComponentProfilePlayerInfo_G_State);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_PlayerCardEchelon, False);
		}
	}

	// Process trophies retrieve task
	if (ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary != NullId) {
		if (ParentApp.ScoreMgr.TaskResults.existskey(ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary)) {
			declare CTaskResult_AccountTrophyLastYearSummary Task <=> (ParentApp.ScoreMgr.TaskResults[ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary] as CTaskResult_AccountTrophyLastYearSummary);
			if (!Task.IsProcessing) {
				if (Task.HasSucceeded) {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetTrophies(ComponentProfilePlayerInfo_G_State, Task.Summary);
				} else {
					ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ""^Task.ErrorCode);
					ComponentProfilePlayerInfo_G_State.TrophiesLoadingError = True;
				}
				ParentApp.ScoreMgr.TaskResult_Release(ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary);
				ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary = NullId;
				ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_G_State);
			}
		} else {
			ComponentProfilePlayerInfo_G_State.Controls.Label_TrophiesError.Value = ComponentProfilePlayerInfo_TL::Compose("Error while retrieving trophies (code: %1)", ComponentProfilePlayerInfo_C_ErrorCode_TaskDeleted);
			ComponentProfilePlayerInfo_G_State.TrophiesLoadingError = True;
			ComponentProfilePlayerInfo_G_State.TaskId_GetAccountLastYearSummary = NullId;
			ComponentProfilePlayerInfo_Private_DisplayTrophies(ComponentProfilePlayerInfo_G_State);
		}
	}

	// Process matchmaking ranked stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.Ranked.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.Ranked.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRankedStats(ComponentProfilePlayerInfo_G_State, LocalUser.WebServicesUserId == ComponentProfilePlayerInfo_G_State.Ranked.Stats.AccountId);
			ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.Ranked.GetPlayerStats);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Ranked, False);
		}
	}

	// Process royal stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.Royal.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromGetPlayerMatchmakingStatistics(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.Royal.Stats = LibStructuresMatchmaking_K_PlayerStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_G_State);
			ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.Royal.GetPlayerStats);
			CMGame_LoadingSpinner::SetIsLoading(This, ComponentProfilePlayerInfo_G_State.Controls.Spinner_Royal, False);
		}
	}

	// Process super royal stats request
	if (ComponentProfilePlayerInfo_Http::IsInitialized(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
		ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Update(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
		if (!ComponentProfilePlayerInfo_Http::IsRunning(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
			if (ComponentProfilePlayerInfo_Http::IsSuccess(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats)) {
				ComponentProfilePlayerInfo_G_State.SuperRoyal.Stats = ComponentProfilePlayerInfo_MatchmakingAPI::GetResponseFromSuperRoyalStats(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
			} else {
				ComponentProfilePlayerInfo_G_State.SuperRoyal.Stats = LibStructuresMatchmaking_K_SuperRoyalStatistics {};
			}
			ComponentProfilePlayerInfo_Private_SetRoyalStats(ComponentProfilePlayerInfo_G_State);
			ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats = ComponentProfilePlayerInfo_Http::Destroy(ComponentProfilePlayerInfo_G_State.SuperRoyal.GetPlayerStats);
		}
	}

	// Get player display name task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
		ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName)) {
				ComponentProfilePlayerInfo_G_State.PlayerProfile.Name = UserMgr.FindDisplayName(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId, ComponentProfilePlayerInfo_G_State.PlayerProfile.IsFirstPartyDisplayName);
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName);
		}
	}

	// Get player club tag task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList)) {
		ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList)) {
			declare CTaskResult_ClubTagList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_ClubTagList(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList) && SourceTask != Null) {
				ComponentProfilePlayerInfo_G_State.PlayerProfile.ClubTag = SourceTask.GetClubTag(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId);
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetClubTagList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList);
		}
	}

	// Get player zone task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList)) {
		ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList)) {
			declare CTaskResult_UserZoneList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_UserZoneList(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList) && SourceTask != Null) {
				declare CZone Zone = SourceTask.GetUserZone(ComponentProfilePlayerInfo_G_State.PlayerProfile.AccountId);
				if (Zone != Null) {
					ComponentProfilePlayerInfo_G_State.PlayerProfile.Zone = ComponentProfilePlayerInfo_K_Zone {
						Id = Zone.Id,
						ParentId = Zone.ParentId,
						Name = Zone.Name,
						Path = Zone.Path,
						FullPath = Zone.FullPath,
						FlagUrl = Zone.FlagUrl,
						CountryFlagUrl = Zone.CountryFlagUrl,
						CarSkinName = Zone.Model_CarSport_SkinName,
						CarSkinUrl = Zone.Model_CarSport_SkinUrl,
						PilotSkinName = Zone.Model_CharacterPilot_SkinName,
						PilotSkinUrl = Zone.Model_CharacterPilot_SkinUrl
					};
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList);
		}
	}

	// Get player prestige skin task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin)) {
		ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin)) {
			declare CTaskResult_UserPrestige SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_UserPrestige(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin) && SourceTask != Null) {
				if (SourceTask.UserPrestige != Null) {
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions = ComponentProfilePlayerInfo_PrestigeStruct::ConvertPrestige(SourceTask.UserPrestige).SkinOptions;
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin);
		}
	}

	// Get player skins task
	if (ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)) {
		ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::Update(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
		if (!ComponentProfilePlayerInfo_Task::IsRunning(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)) {
			declare CTaskResult_NSSkinList SourceTask = ComponentProfilePlayerInfo_Task::GetSourceTask_NSSkinList(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
			if (ComponentProfilePlayerInfo_Task::IsSuccess(ComponentProfilePlayerInfo_G_State.Task_GetSkinList) && SourceTask != Null) {
				if (SourceTask.SkinList.count > 0) {
					declare Text PrestigeOptions = ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions;
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin = LibStructuresClub_GetSkinFromNSSkin(SourceTask.SkinList[0], True, False);
					ComponentProfilePlayerInfo_G_State.PlayerProfile.CarSkin.PrestigeOptions = PrestigeOptions; // Keep the prestige skin options rerieved earlier
				}
			} else {
				ComponentProfilePlayerInfo_G_State.Controls.Label_Error.SetText("Some information were not retrieved correctly. Please try again to display the missing information.");
			}
			ComponentProfilePlayerInfo_G_State.Task_GetSkinList = ComponentProfilePlayerInfo_Task::Destroy(ComponentProfilePlayerInfo_G_State.Task_GetSkinList);
		}
	}

	if (
		!ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetClubTagList) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveUserZoneList) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_RetrieveDisplayName) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetPrestigeSkin) &&
		!ComponentProfilePlayerInfo_Task::IsInitialized(ComponentProfilePlayerInfo_G_State.Task_GetSkinList)
	) {
		ComponentProfilePlayerInfo_G_State.IsPlayerProfileUpdated = True;
		ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.PlayerProfile, True, False);
	}

	if (!ComponentProfilePlayerInfo_Privileges::Check_IsComplete(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck)) {
		ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Update(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
		if (ComponentProfilePlayerInfo_Privileges::Check_IsComplete(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck)) {
			ComponentProfilePlayerInfo_G_State.PrivilegeCheck.User.CanViewGameHistory = ComponentProfilePlayerInfo_Privileges::Check_HasPrivilege(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
			ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck = ComponentProfilePlayerInfo_Privileges::Check_Destroy(ComponentProfilePlayerInfo_G_State.PrivilegeCheck.PrivilegeCheck);
			ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_SetUser(ComponentProfilePlayerInfo_G_State, ComponentProfilePlayerInfo_G_State.PrivilegeCheck.User, False, False);
		}
	}
} else {
	if (This is CMlScriptIngame) {
		/* Report system pop up events (used IN GAME) */
		foreach (Event in ComponentPopUpReportSystem::GetPendingEvents(This)) {
			switch (Event.Type) {
				case ComponentPopUpReportSystem::C_EventType_Close: {
					ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, True);
				}
			}
		}
	} else {
		/* Report system events (used in MENUS) */
		foreach (Event in ComponentProfilePlayerInfo_ReportSystem::GetPendingEvents()) {
			if (Event.LastUsingId == "component-profileplayerinfo") {
				switch (Event.Type) {
					case ComponentProfilePlayerInfo_ReportSystem::C_EventType_Close: {
						ComponentProfilePlayerInfo_G_State = ComponentProfilePlayerInfo_Private_Enable(ComponentProfilePlayerInfo_G_State, True);
					}
				}
			}
		}
	}
}
***

// */
// @Component end component-profileplayerinfo

K_State SetVisibility(K_State _State, Boolean _DisplayModule) {
	declare K_State State = _State;

	State.DisplayModule = _DisplayModule;

	State.Controls.Frame_Global.Visible = State.DisplayModule;

	return State;
}

// Display the player's profile associated to the given account id
Void DisplayProfile(CMlFrame _Frame_Profile, Text _AccountId, Text _RecordDetail, Text _RecordId, Boolean _Display) {
	_Frame_Profile.Visible = _Display && _AccountId != "";
	ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-cotd-ranking", !_Frame_Profile.Visible);
	ComponentProfilePlayerInfo_Enable(_Frame_Profile.Visible);
	if (_Frame_Profile.Visible) {
		ComponentProfilePlayerInfo_SetUserAccountId(_AccountId);
		ComponentProfilePlayerInfo_SetUserRecord(_RecordDetail, _RecordId);
	}
}

Void DisplayProfile(CMlFrame _Frame_Profile, Boolean _Display) {
	DisplayProfile(_Frame_Profile, "", "", "", _Display);
}

Boolean IsWaitingForNewRank(Integer _LocalRaceTime, Integer _APIRaceTime) {
	return (_LocalRaceTime > 0 && _LocalRaceTime < _APIRaceTime);
}

Void UpdateRanking(
	K_State _State,
	Integer[Text] _Leaderboard,
	CSmPlayer _InputPlayer,
	Integer _PlayerRank,
	Integer _PlayerAPIRaceTime,
	Integer _PlayerLocalRaceTime
) {
	// Update our own time
	if (_InputPlayer != Null && _InputPlayer.User != Null) {
		CMGame_PlayerName::SetUser(This, _State.Controls.PlayerName_OwnerName, InputPlayer.User, True);
	}
	if (IsWaitingForNewRank(_PlayerLocalRaceTime, _PlayerAPIRaceTime)) {
		_State.Controls.Label_OwnerRank.Value = "";
		CMGame_LoadingSpinner::StartAnimation(This, _State.Controls.LoadingSpinner_OwnerRank);
	} else if (_PlayerRank > 0) {
		_State.Controls.Label_OwnerRank.Value = ""^_PlayerRank;
		CMGame_LoadingSpinner::StopAnimation(This, _State.Controls.LoadingSpinner_OwnerRank);
	} else {
		_State.Controls.Label_OwnerRank.Value = "-";
		CMGame_LoadingSpinner::StopAnimation(This, _State.Controls.LoadingSpinner_OwnerRank);
	}
	if (_PlayerAPIRaceTime > 0) {
		_State.Controls.Label_OwnerTime.Value = TL::TimeToText(_PlayerAPIRaceTime, True, True);
	} else {
		_State.Controls.Label_OwnerTime.Value = "--:--.---";
	}
	Tools::FitLabelValue(_State.Controls.Label_OwnerRank, 1., 0.1, 0.1);
	Tools::FitLabelValue(_State.Controls.Label_OwnerTime, 1., 0.1, 0.1);

	// Update top 10 leaderboard
	declare K_RankingEntry[] Ranking;
	foreach (AccountId => Time in _Leaderboard) {
		Ranking.add(K_RankingEntry {
			AccountId = AccountId,
			Time = Time
		});
	}
	foreach (Key => Control in _State.Controls.Frame_Scores.Controls) {
		declare CMlFrame Frame_Score <=> (Control as CMlFrame);
		declare Text COTDQualifications_Ranking_PlayerAccountId for Frame_Score;
		declare Text COTDQualifications_Ranking_PlayerRecordDetail for Frame_Score = "";
		declare Text COTDQualifications_Ranking_PlayerRecordId for Frame_Score = "";

		Frame_Score.Visible = Key < Ranking.count;
		ComponentNavigation_ComponentNavigation::Lock(Frame_Score, !Frame_Score.Visible);

		if (Frame_Score.Visible) {
			declare CMlLabel Label_Rank <=> (Frame_Score.GetFirstChild("label-rank") as CMlLabel);
			declare CMlFrame PlayerName_Name <=> (Frame_Score.GetFirstChild("playername-name") as CMlFrame);
			declare CMlLabel Label_Time <=> (Frame_Score.GetFirstChild("label-time") as CMlLabel);
			declare CMlFrame LoadingSpinner_Rank <=> (Frame_Score.GetFirstChild("loading-spinner-rank") as CMlFrame);

			declare K_RankingEntry RankingEntry = Ranking[Key];
			COTDQualifications_Ranking_PlayerAccountId = RankingEntry.AccountId;

			declare Integer Rank = Key + 1;
			if (
				_InputPlayer != Null &&
				_InputPlayer.User != Null && (
					(
						_InputPlayer.User.WebServicesUserId == RankingEntry.AccountId && (
							IsWaitingForNewRank(_PlayerLocalRaceTime, _PlayerAPIRaceTime) ||
							_PlayerAPIRaceTime != RankingEntry.Time ||
							_PlayerRank != Rank
						)
					) || (
						_PlayerRank == Rank &&
						_InputPlayer.User.WebServicesUserId != RankingEntry.AccountId
					)
				)
			) {
				Label_Rank.Value = "";
				CMGame_LoadingSpinner::StartAnimation(This, LoadingSpinner_Rank);
			} else {
				Label_Rank.Value = ""^Rank;
				CMGame_LoadingSpinner::StopAnimation(This, LoadingSpinner_Rank);
			}

			CMGame_PlayerName::SetAccountId(This, PlayerName_Name, RankingEntry.AccountId, True);

			if (RankingEntry.Time > 0) {
				Label_Time.Value = TL::TimeToText(RankingEntry.Time, True, True);
			} else {
				Label_Time.Value = "--:--.---";
			}

			Tools::FitLabelValue(Label_Rank, 1., 0.1, 0.1);
			Tools::FitLabelValue(Label_Time, 1., 0.1, 0.1);

			// Save player record for report system in Profile
			COTDQualifications_Ranking_PlayerRecordDetail = ReportStruct::FormatRecordDetail(CMGame_PlayerName::GetName(This, PlayerName_Name), RankingEntry.Time);
			declare Text MapUid = "";
			if (Map != Null && Map.MapInfo != Null)	{
				MapUid = Map.MapInfo.MapUid;
			}
			COTDQualifications_Ranking_PlayerRecordId = ReportStruct::FormatRecordId(RankingEntry.AccountId, "", MapUid);
		} else {
			COTDQualifications_Ranking_PlayerAccountId = "";
			COTDQualifications_Ranking_PlayerRecordDetail = "";
			COTDQualifications_Ranking_PlayerRecordId = "";
		}
	}
}

Void DisplayNewRankAlert(K_Controls _Controls, Integer _NewRank, Boolean _PlayAnimation) {
	if (_NewRank <= 0) return;

	// Display rank
	//L16N [COTD qualifications] New current player rank in the leaderboard. It has just been updated when this message appears. %1 is the rank e.g. "New rank: 2nd"
	_Controls.Label_NewRank.Value = TL::Compose(_("New rank: %1"), TL::FormatRank(_NewRank, False));

	// Animation
	if (_PlayAnimation) {
		declare Real HidePosLeft = -50.;
		declare Real HidePosRight = 50.;
		declare Real VisiblePosX = 0.;

		declare Integer InDuration = 1250;
		declare Integer OutDuration = 1250;

		AnimMgr.Flush(_Controls.Label_NewRank);
		AnimMgr.Flush(_Controls.Frame_Scores);
		_Controls.Label_NewRank.RelativePosition_V3.X = HidePosLeft;
		AnimMgr.Add(_Controls.Label_NewRank, "<frame pos=\""^VisiblePosX^" "^_Controls.Label_NewRank.RelativePosition_V3.Y^"\" hidden=\"0\" />", InDuration, CAnimManager::EAnimManagerEasing::ElasticOut);
		AnimMgr.Add(_Controls.Label_NewRank, "<frame pos=\""^HidePosRight^" "^_Controls.Label_NewRank.RelativePosition_V3.Y^"\" hidden=\"1\" />", Now + InDuration + C_NewRankDisplayDuration, OutDuration, CAnimManager::EAnimManagerEasing::ElasticIn);
		AnimMgr.Add(_Controls.Frame_Scores, "<frame pos=\"0 "^-5.^"\" />", InDuration, CAnimManager::EAnimManagerEasing::ElasticOut);
		AnimMgr.Add(_Controls.Frame_Scores, "<frame pos=\"0 0\" />", Now + InDuration + C_NewRankDisplayDuration, OutDuration, CAnimManager::EAnimManagerEasing::ElasticIn);
	}
}

Boolean ShouldDisplayContent(Integer _QualificationsProgress, Integer _APIRaceTime) {
	return (
		_QualificationsProgress == COTDConst::C_Progress_PlayQualifications &&
		_APIRaceTime > 0
	);
}

Void StartHideAnimation(K_Controls _Controls) {
	if (_Controls.Frame_HideableContent != Null) {
		declare Real HiddenPosX = -60.;
		declare Real VisiblePosX = 0.;
		declare Vec2 StartPos = _Controls.Frame_HideableContent.RelativePosition_V3;
		declare Real EndPosX = VisiblePosX;

		if (StartPos.X == HiddenPosX) {
			EndPosX = VisiblePosX;
			Trackmania_Button::SetIcon(This, _Controls.Button_Hide, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT.dds");
			Trackmania_Button::SetIconFocus(This, _Controls.Button_Hide, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_LEFT.dds");
		} else {
			EndPosX = HiddenPosX;
			Trackmania_Button::SetIcon(This, _Controls.Button_Hide, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT.dds");
			Trackmania_Button::SetIconFocus(This, _Controls.Button_Hide, "file://Media/Manialinks/Nadeo/CMGame/Utils/Icons/128x128/ICON_ARROW_RIGHT.dds");
		}

		AnimMgr.Flush(_Controls.Frame_HideableContent);
		AnimMgr.Add(_Controls.Frame_HideableContent, "<anim pos=\"" ^EndPosX^" "^StartPos.Y^ "\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
	}
}

Void FocusRecord(CMlFrame _Frame_Record, Boolean _IsFocused) {
	if (_Frame_Record == Null) return;
	declare Text COTDQualifications_Ranking_PlayerAccountId for _Frame_Record = "";
	if (COTDQualifications_Ranking_PlayerAccountId == "") return;

	declare CMlFrame PlayerName_Name <=> (_Frame_Record.GetFirstChild("playername-name") as CMlFrame);
	declare CMlLabel Label_Rank = (_Frame_Record.GetFirstChild("label-rank") as CMlLabel);
	declare CMlLabel Label_Time = (_Frame_Record.GetFirstChild("label-time") as CMlLabel);
	declare CMlQuad Quad_Bg = (_Frame_Record.GetFirstChild("quad-bg") as CMlQuad);

	if (_IsFocused) {
		CMGame_PlayerName::SetTextColor(This, PlayerName_Name, <0., 0., 0.>);
		Label_Rank.TextColor = <0., 0., 0.>;
		Label_Time.TextColor = <0., 0., 0.>;
	} else {
		CMGame_PlayerName::SetTextColor(This, PlayerName_Name, <1., 1., 1.>);
		Label_Rank.TextColor = <1., 1., 1.>;
		Label_Time.TextColor = <1., 1., 1.>;
	}

	AnimMgr.Flush(Quad_Bg);
	if (!_IsFocused) {
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"0.\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		AnimMgr.Add(Quad_Bg, "<anim opacity=\"0.8\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (_From == _To) return;

	if (_From != Null) {
		ComponentNavigation_ComponentNavigation::Unfocus(This, _From);
		if (Trackmania_Button::IsButton((_From as CMlFrame))) {
			Trackmania_Button::Unfocus(This, (_From as CMlFrame));
		} else if (_From.HasClass("class-cotd-ranking-score")) {
			FocusRecord(_From as CMlFrame, False);
		}
	}

	if (_To != Null) {
		ComponentNavigation_ComponentNavigation::Focus(This, _To);
		if (Trackmania_Button::IsButton((_To as CMlFrame))) {
			Trackmania_Button::Focus(This, (_To as CMlFrame));
		} else if (_To.HasClass("class-cotd-ranking-score")) {
			FocusRecord(_To as CMlFrame, True);
		}
	}
}

Void FocusRules(CMlFrame _Button_Rules, Boolean _IsFocused) {
	if (_IsFocused) {
		Focus(ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-cotd-ranking-mouse-only"), _Button_Rules);
	} else {
		Focus(ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-cotd-ranking-mouse-only"), Null);
	}
}

Void Select(K_Controls _Controls, CMlControl _SelectedControl) {
	if (_SelectedControl == Null) return;

	switch (_SelectedControl.ControlId) {
		case "button-hide": StartHideAnimation(_Controls);
		case "button-rules": Trackmania_PopUpMultiChoice::Open(This, _Controls.PopUpMultiChoice_Rules);
		default: {
			if (_SelectedControl.HasClass("class-cotd-ranking-score")) {
				declare Text COTDQualifications_Ranking_PlayerAccountId for _SelectedControl;
				declare Text COTDQualifications_Ranking_PlayerRecordDetail for _SelectedControl = "";
				declare Text COTDQualifications_Ranking_PlayerRecordId for _SelectedControl = "";
				DisplayProfile(_Controls.Frame_Profile, COTDQualifications_Ranking_PlayerAccountId, COTDQualifications_Ranking_PlayerRecordDetail, COTDQualifications_Ranking_PlayerRecordId, True);
			}
		}
	}
}

Void Initialize(K_Controls _Controls) {
	declare CMlQuad Quad_OwnerBackground <=> (_Controls.Frame_ScoreOwner.GetFirstChild("quad-bg") as CMlQuad);

	ComponentNavigation_ComponentNavigation::UseLocalEvents(This, True);
	DisplayProfile(_Controls.Frame_Profile, False);
	Quad_OwnerBackground.BgColor = <0., 0., 0.>;
	Quad_OwnerBackground.Opacity = 0.6;
}

***MainInit***
***
declare netread Boolean Net_COTDQualifications_Ranking_IsVisible for UI = False;
declare netread Integer[Text] Net_COTDQualifications_Ranking_Leaderboard for Teams[0] = [];
declare netread Integer Net_COTDQualifications_Ranking_LeaderboardUpdate for Teams[0] = 0;
declare Boolean COTDQualifications_Ranking_IsControllerNavigationEnabled for ClientUI = False;
declare Boolean COTDQualifications_Ranking_IsContentDisplayed for ClientUI = False;

declare K_State State = C_State_Null;
declare Integer LeaderboardUpdate;
declare Integer CurrentRank;
declare Integer APIRaceTime;
declare Integer LocalRaceTime;
declare Boolean IsControllerNavigationEnabled;
declare Boolean IsMouse;
declare Boolean NeedRankingUpdate;
declare Ident InputPlayerId;
***

***MainStart***
***
State.Controls.Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);
State.Controls.Frame_Content <=> (State.Controls.Frame_Global.GetFirstChild("frame-content") as CMlFrame);
State.Controls.Frame_ControllerInfo <=> (State.Controls.Frame_Global.GetFirstChild("frame-controller-info") as CMlFrame);
State.Controls.Frame_HideableContent <=> (State.Controls.Frame_Global.GetFirstChild("frame-hideable-content") as CMlFrame);
State.Controls.Frame_Profile <=> (Page.GetFirstChild("frame-profile") as CMlFrame);
State.Controls.Frame_ScoreOwner <=> (State.Controls.Frame_Global.GetFirstChild("frame-score-owner") as CMlFrame);
State.Controls.Label_OwnerRank <=> (State.Controls.Frame_ScoreOwner.GetFirstChild("label-rank") as CMlLabel);
State.Controls.PlayerName_OwnerName <=> (State.Controls.Frame_ScoreOwner.GetFirstChild("playername-name") as CMlFrame);
State.Controls.Label_OwnerTime <=> (State.Controls.Frame_ScoreOwner.GetFirstChild("label-time") as CMlLabel);
State.Controls.LoadingSpinner_OwnerRank = (State.Controls.Frame_ScoreOwner.GetFirstChild("loading-spinner-rank") as CMlFrame);
State.Controls.Frame_Scores <=> (State.Controls.Frame_Global.GetFirstChild("frame-scores") as CMlFrame);
State.Controls.ButtonIcon_Rules <=> (State.Controls.Frame_Global.GetFirstChild("buttonicon-rules") as CMlFrame);
State.Controls.Button_Hide <=> (State.Controls.Frame_Global.GetFirstChild("button-hide") as CMlFrame);
State.Controls.Button_Rules <=> (State.Controls.Frame_Global.GetFirstChild("button-rules") as CMlFrame);
State.Controls.Label_NewRank <=> (State.Controls.Frame_Global.GetFirstChild("label-new-rank") as CMlLabel);
State.Controls.PopUpMultiChoice_Rules <=> (Page.GetFirstChild("popupmultichoice-rules") as CMlFrame);

COTDQualifications_Ranking_IsContentDisplayed = State.Controls.Frame_Content.Visible;
LeaderboardUpdate = 0;
CurrentRank = 0;
APIRaceTime = 0;
LocalRaceTime = 0;
NeedRankingUpdate = True;
InputPlayerId = NullId;

Initialize(State.Controls);
State = SetVisibility(State, State.Controls.Frame_Global.Visible);

// Must move this UI to respect safe area on Playstation (see /trackmania-next/tmnext/-/issues/5400)
if (Platform::IsSony(System)) {
	State.Controls.Frame_Content.RelativePosition_V3.X = State.Controls.Frame_Content.RelativePosition_V3.X + 9.;
}
***

***MainLoop***
***
if (
	!EnableMenuNavigationInputs &&
	State.Controls.Frame_Global.Visible &&
	State.Controls.Frame_Content.Visible &&
	(IsControllerNavigationEnabled || State.Controls.Frame_Profile.Visible) &&
	!IsInGameMenuDisplayed
) {
	EnableMenuNavigation(True, False, False, Null, C_InputPriority_Scores);
} else if (
	EnableMenuNavigationInputs && (
		!State.Controls.Frame_Global.Visible ||
		!State.Controls.Frame_Content.Visible ||
		(!IsControllerNavigationEnabled && !State.Controls.Frame_Profile.Visible) ||
		IsInGameMenuDisplayed
	)
) {
	EnableMenuNavigation(False, False, False, Null, C_InputPriority_Scores);
}

if (PageIsVisible) {
	if (State.DisplayModule != Net_COTDQualifications_Ranking_IsVisible) {
		State = SetVisibility(State, Net_COTDQualifications_Ranking_IsVisible);
	}

	if (IsControllerNavigationEnabled != COTDQualifications_Ranking_IsControllerNavigationEnabled) {
		IsControllerNavigationEnabled = COTDQualifications_Ranking_IsControllerNavigationEnabled;
		State.Controls.Frame_ControllerInfo.Visible = COTDQualifications_Ranking_IsControllerNavigationEnabled;
		State.Controls.ButtonIcon_Rules.Visible = COTDQualifications_Ranking_IsControllerNavigationEnabled;
		FocusRules(State.Controls.Button_Rules, !IsMouse && COTDQualifications_Ranking_IsControllerNavigationEnabled);

		AnimMgr.Flush(State.Controls.Frame_Content);
		if (COTDQualifications_Ranking_IsControllerNavigationEnabled) {
			AnimMgr.Add(State.Controls.Frame_Content, "<anim scale=\""^C_ScoresScale^"\" pos=\"1.2 0\"/>", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Focus(ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-cotd-ranking"), State.Controls.Frame_Scores.Controls[0]);
		} else {
			AnimMgr.Add(State.Controls.Frame_Content, "<anim scale=\"1.\" pos=\"0 0\"/>" , 250, CAnimManager::EAnimManagerEasing::QuadOut);
			Focus(ComponentNavigation_ComponentNavigation::GetFocusedControl(This, "navgroup-cotd-ranking"), Null);
		}
	}

	if (COTDQualifications_Ranking_IsContentDisplayed != ShouldDisplayContent(NetShare::GetQualificationsProgress(Teams[0]), APIRaceTime)) {
		COTDQualifications_Ranking_IsContentDisplayed = ShouldDisplayContent(NetShare::GetQualificationsProgress(Teams[0]), APIRaceTime);
		State.Controls.Frame_Content.Visible = COTDQualifications_Ranking_IsContentDisplayed;
		if (!State.Controls.Frame_Content.Visible) {
			Trackmania_PopUpMultiChoice::Close(This, State.Controls.PopUpMultiChoice_Rules);
			DisplayProfile(State.Controls.Frame_Profile, False);
		}
	}

	if (LeaderboardUpdate != Net_COTDQualifications_Ranking_LeaderboardUpdate) {
		LeaderboardUpdate = Net_COTDQualifications_Ranking_LeaderboardUpdate;
		NeedRankingUpdate = True;
	}

	if (
		CurrentRank != NetShare::GetMyRank(UI) ||
		APIRaceTime != NetShare::GetMyAPIRaceTime(UI) ||
		LocalRaceTime != NetShare::GetMyLocalRaceTime(UI)
	) {
		declare Integer NewRank = NetShare::GetMyRank(UI);
		if (
			C_EnableNewRankAnimation &&
			COTDQualifications_Ranking_IsContentDisplayed &&
			NewRank > 0 &&
			CurrentRank != NewRank
		) {
			DisplayNewRankAlert(
				State.Controls,
				NewRank,
				(CurrentRank == 0 || NewRank < CurrentRank)
			);
		}
		CurrentRank = NewRank;
		APIRaceTime = NetShare::GetMyAPIRaceTime(UI);
		LocalRaceTime = NetShare::GetMyLocalRaceTime(UI);
		NeedRankingUpdate = True;
	}

	if (
		State.DisplayModule &&
		COTDQualifications_Ranking_IsContentDisplayed
	) {
		if (
			(InputPlayer == Null && InputPlayerId != NullId) ||
			(InputPlayer != Null && InputPlayerId != InputPlayer.Id)
		) {
			if (InputPlayer == Null) {
				InputPlayerId = NullId;
			} else {
				InputPlayerId = InputPlayer.Id;
			}
			NeedRankingUpdate = True;
		}

		if (NeedRankingUpdate) {
			NeedRankingUpdate = False;
			UpdateRanking(
				State,
				Net_COTDQualifications_Ranking_Leaderboard,
				InputPlayer,
				CurrentRank,
				APIRaceTime,
				LocalRaceTime
			);
		}
	}

	/* Navigation events*/
	foreach (Event in ComponentNavigation_ComponentNavigation::GetPendingEvents(This)) {
		switch (Event.Type) {
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateInput: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-cotd-ranking")) {
					switch (Event.Input) {
						case CMlScriptEvent::EMenuNavAction::Cancel: COTDQualifications_Ranking_IsControllerNavigationEnabled = False;
						case CMlScriptEvent::EMenuNavAction::Select: Select(State.Controls, Event.To);
						case CMlScriptEvent::EMenuNavAction::Action2: Trackmania_PopUpMultiChoice::Open(This, State.Controls.PopUpMultiChoice_Rules);
						default: Focus(Event.From, Event.To);
					}
				}
			}
			case ComponentNavigation_ComponentNavigation::C_EventType_NavigateMouse: {
				if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-cotd-ranking")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(State.Controls, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOut: {
							if (!COTDQualifications_Ranking_IsControllerNavigationEnabled) {
								Focus(Event.From, Event.To);
							}
						}
					}
				} else if (ComponentNavigation_ComponentNavigation::IsEventFromGroup(This, Event, "navgroup-cotd-ranking-mouse-only")) {
					switch (Event.Mouse) {
						case CMlScriptEvent::Type::MouseClick: Select(State.Controls, Event.To);
						case CMlScriptEvent::Type::MouseOut: Focus(Event.From, Event.To);
						case CMlScriptEvent::Type::MouseOver: Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in Trackmania_PopUpMultiChoice::GetPendingEvents(This)) {
		if (Event.PopUpMultiChoice != Null && Event.PopUpMultiChoice.Id == State.Controls.PopUpMultiChoice_Rules.Id) {
			switch (Event.Type) {
				case Trackmania_PopUpMultiChoice::C_EventType_Display: {
					ComponentNavigation_ComponentNavigation::EnableGroup(This, "navgroup-cotd-ranking", !Event.PopUpMultiChoice.Visible);
				}
			}
		}
	}

	/* Profile player info events */
	foreach (Event in ComponentProfilePlayerInfo_PendingEvents) {
		switch (Event.Type) {
			case ComponentProfilePlayerInfo_C_EventType_Close: {
				DisplayProfile(State.Controls.Frame_Profile, False);
			}
		}
	}

	/* Behaviors depending on the current controller */
	if (IsMouse != Tools::IsUsingMouse(Input)) {
		IsMouse = Tools::IsUsingMouse(Input);
		FocusRules(State.Controls.Button_Rules, !IsMouse && COTDQualifications_Ranking_IsControllerNavigationEnabled);
	}
}
***


Void ManiaView_DoNothing() {}

main() {
	+++MainInit+++
	+++MainStart+++
	while (True) {
		yield;
		+++MainLoop+++
	}
	+++MainEnd+++
}
--></script>
</manialink>
